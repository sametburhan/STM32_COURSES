
uart_spi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008280  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  08008410  08008410  00018410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088bc  080088bc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080088bc  080088bc  000188bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088c4  080088c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088c8  080088c8  000188c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080088cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000220  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003fc  200003fc  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d19e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d39  00000000  00000000  0002d3aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ab8  00000000  00000000  0002f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a18  00000000  00000000  0002fba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021597  00000000  00000000  000305b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000db0c  00000000  00000000  00051b4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c6b1b  00000000  00000000  0005f65b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00126176  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e3c  00000000  00000000  001261c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083f8 	.word	0x080083f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080083f8 	.word	0x080083f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc6:	f000 b9bf 	b.w	8000f48 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2203      	movs	r2, #3
 8000f58:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2203      	movs	r2, #3
 8000f64:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2203      	movs	r2, #3
 8000f6a:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2203      	movs	r2, #3
 8000f70:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2203      	movs	r2, #3
 8000f76:	715a      	strb	r2, [r3, #5]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	; 0x28
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	607a      	str	r2, [r7, #4]
 8000f90:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f9e:	7afb      	ldrb	r3, [r7, #11]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	8af9      	ldrh	r1, [r7, #22]
 8000fa4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000fa8:	9302      	str	r3, [sp, #8]
 8000faa:	2302      	movs	r3, #2
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	f107 0314 	add.w	r3, r7, #20
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f002 f877 	bl	80030a8 <HAL_I2C_Mem_Read>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d10b      	bne.n	8000fd8 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8000fc0:	7d7b      	ldrb	r3, [r7, #21]
 8000fc2:	021b      	lsls	r3, r3, #8
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	7d3b      	ldrb	r3, [r7, #20]
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	b21b      	sxth	r3, r3
 8000fce:	b29a      	uxth	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	801a      	strh	r2, [r3, #0]
		return true;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <read_register16+0x56>
	} else
		return false;
 8000fd8:	2300      	movs	r3, #0

}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 8000fe2:	b590      	push	{r4, r7, lr}
 8000fe4:	b08b      	sub	sp, #44	; 0x2c
 8000fe6:	af04      	add	r7, sp, #16
 8000fe8:	60f8      	str	r0, [r7, #12]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	461a      	mov	r2, r3
 8000fee:	460b      	mov	r3, r1
 8000ff0:	72fb      	strb	r3, [r7, #11]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001002:	7afb      	ldrb	r3, [r7, #11]
 8001004:	b29a      	uxth	r2, r3
 8001006:	7abb      	ldrb	r3, [r7, #10]
 8001008:	b29b      	uxth	r3, r3
 800100a:	8af9      	ldrh	r1, [r7, #22]
 800100c:	f241 3488 	movw	r4, #5000	; 0x1388
 8001010:	9402      	str	r4, [sp, #8]
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	f002 f845 	bl	80030a8 <HAL_I2C_Mem_Read>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d101      	bne.n	8001028 <read_data+0x46>
		return 0;
 8001024:	2300      	movs	r3, #0
 8001026:	e000      	b.n	800102a <read_data+0x48>
	else
		return 1;
 8001028:	2301      	movs	r3, #1

}
 800102a:	4618      	mov	r0, r3
 800102c:	371c      	adds	r7, #28
 800102e:	46bd      	mov	sp, r7
 8001030:	bd90      	pop	{r4, r7, pc}

08001032 <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	461a      	mov	r2, r3
 800103e:	2188      	movs	r1, #136	; 0x88
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f7ff ff9f 	bl	8000f84 <read_register16>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d06f      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3302      	adds	r3, #2
 8001050:	461a      	mov	r2, r3
 8001052:	218a      	movs	r1, #138	; 0x8a
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ff95 	bl	8000f84 <read_register16>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d065      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3304      	adds	r3, #4
 8001064:	461a      	mov	r2, r3
 8001066:	218c      	movs	r1, #140	; 0x8c
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff8b 	bl	8000f84 <read_register16>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d05b      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3306      	adds	r3, #6
 8001078:	461a      	mov	r2, r3
 800107a:	218e      	movs	r1, #142	; 0x8e
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff ff81 	bl	8000f84 <read_register16>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d051      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3308      	adds	r3, #8
 800108c:	461a      	mov	r2, r3
 800108e:	2190      	movs	r1, #144	; 0x90
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff77 	bl	8000f84 <read_register16>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d047      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	330a      	adds	r3, #10
 80010a0:	461a      	mov	r2, r3
 80010a2:	2192      	movs	r1, #146	; 0x92
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff ff6d 	bl	8000f84 <read_register16>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d03d      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	330c      	adds	r3, #12
 80010b4:	461a      	mov	r2, r3
 80010b6:	2194      	movs	r1, #148	; 0x94
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff ff63 	bl	8000f84 <read_register16>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d033      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	330e      	adds	r3, #14
 80010c8:	461a      	mov	r2, r3
 80010ca:	2196      	movs	r1, #150	; 0x96
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ff59 	bl	8000f84 <read_register16>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d029      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3310      	adds	r3, #16
 80010dc:	461a      	mov	r2, r3
 80010de:	2198      	movs	r1, #152	; 0x98
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff4f 	bl	8000f84 <read_register16>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d01f      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3312      	adds	r3, #18
 80010f0:	461a      	mov	r2, r3
 80010f2:	219a      	movs	r1, #154	; 0x9a
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff45 	bl	8000f84 <read_register16>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d015      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3314      	adds	r3, #20
 8001104:	461a      	mov	r2, r3
 8001106:	219c      	movs	r1, #156	; 0x9c
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff ff3b 	bl	8000f84 <read_register16>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00b      	beq.n	800112c <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001118:	461a      	mov	r2, r3
 800111a:	219e      	movs	r1, #158	; 0x9e
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff31 	bl	8000f84 <read_register16>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <read_calibration_data+0xfa>

		return true;
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <read_calibration_data+0xfc>
	}

	return false;
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	f103 0218 	add.w	r2, r3, #24
 8001144:	2301      	movs	r3, #1
 8001146:	21a1      	movs	r1, #161	; 0xa1
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff4a 	bl	8000fe2 <read_data>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d14b      	bne.n	80011ec <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	331a      	adds	r3, #26
 8001158:	461a      	mov	r2, r3
 800115a:	21e1      	movs	r1, #225	; 0xe1
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff11 	bl	8000f84 <read_register16>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d041      	beq.n	80011ec <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f103 021c 	add.w	r2, r3, #28
 800116e:	2301      	movs	r3, #1
 8001170:	21e3      	movs	r1, #227	; 0xe3
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ff35 	bl	8000fe2 <read_data>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d136      	bne.n	80011ec <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 800117e:	f107 030e 	add.w	r3, r7, #14
 8001182:	461a      	mov	r2, r3
 8001184:	21e4      	movs	r1, #228	; 0xe4
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fefc 	bl	8000f84 <read_register16>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d02c      	beq.n	80011ec <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	461a      	mov	r2, r3
 8001198:	21e5      	movs	r1, #229	; 0xe5
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fef2 	bl	8000f84 <read_register16>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d022      	beq.n	80011ec <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f103 0222 	add.w	r2, r3, #34	; 0x22
 80011ac:	2301      	movs	r3, #1
 80011ae:	21e7      	movs	r1, #231	; 0xe7
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff ff16 	bl	8000fe2 <read_data>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d117      	bne.n	80011ec <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80011bc:	89fb      	ldrh	r3, [r7, #14]
 80011be:	011b      	lsls	r3, r3, #4
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	89fb      	ldrh	r3, [r7, #14]
 80011ca:	121b      	asrs	r3, r3, #8
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	f003 030f 	and.w	r3, r3, #15
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 80011dc:	89bb      	ldrh	r3, [r7, #12]
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	841a      	strh	r2, [r3, #32]

		return true;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e000      	b.n	80011ee <read_hum_calibration_data+0xb8>
	}

	return false;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b088      	sub	sp, #32
 80011fa:	af04      	add	r7, sp, #16
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	460b      	mov	r3, r1
 8001200:	70fb      	strb	r3, [r7, #3]
 8001202:	4613      	mov	r3, r2
 8001204:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001212:	78fb      	ldrb	r3, [r7, #3]
 8001214:	b29a      	uxth	r2, r3
 8001216:	89f9      	ldrh	r1, [r7, #14]
 8001218:	f242 7310 	movw	r3, #10000	; 0x2710
 800121c:	9302      	str	r3, [sp, #8]
 800121e:	2301      	movs	r3, #1
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	1cbb      	adds	r3, r7, #2
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	f001 fe44 	bl	8002eb4 <HAL_I2C_Mem_Write>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <write_register8+0x40>
		return false;
 8001232:	2300      	movs	r3, #0
 8001234:	e000      	b.n	8001238 <write_register8+0x42>
	else
		return true;
 8001236:	2301      	movs	r3, #1
}
 8001238:	4618      	mov	r0, r3
 800123a:	3710      	adds	r7, #16
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800124e:	2b76      	cmp	r3, #118	; 0x76
 8001250:	d005      	beq.n	800125e <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001256:	2b77      	cmp	r3, #119	; 0x77
 8001258:	d001      	beq.n	800125e <bmp280_init+0x1e>

		return false;
 800125a:	2300      	movs	r3, #0
 800125c:	e099      	b.n	8001392 <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001264:	2301      	movs	r3, #1
 8001266:	21d0      	movs	r1, #208	; 0xd0
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff feba 	bl	8000fe2 <read_data>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <bmp280_init+0x38>
		return false;
 8001274:	2300      	movs	r3, #0
 8001276:	e08c      	b.n	8001392 <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800127e:	2b58      	cmp	r3, #88	; 0x58
 8001280:	d006      	beq.n	8001290 <bmp280_init+0x50>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001288:	2b60      	cmp	r3, #96	; 0x60
 800128a:	d001      	beq.n	8001290 <bmp280_init+0x50>

		return false;
 800128c:	2300      	movs	r3, #0
 800128e:	e080      	b.n	8001392 <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 8001290:	22b6      	movs	r2, #182	; 0xb6
 8001292:	21e0      	movs	r1, #224	; 0xe0
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ffae 	bl	80011f6 <write_register8>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <bmp280_init+0x64>
		return false;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e076      	b.n	8001392 <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80012a4:	f107 020c 	add.w	r2, r7, #12
 80012a8:	2301      	movs	r3, #1
 80012aa:	21f3      	movs	r1, #243	; 0xf3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fe98 	bl	8000fe2 <read_data>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1f5      	bne.n	80012a4 <bmp280_init+0x64>
				&& (status & 1) == 0)
 80012b8:	7b3b      	ldrb	r3, [r7, #12]
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d1f0      	bne.n	80012a4 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff feb5 	bl	8001032 <read_calibration_data>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f083 0301 	eor.w	r3, r3, #1
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d100      	bne.n	80012d6 <bmp280_init+0x96>
 80012d4:	e001      	b.n	80012da <bmp280_init+0x9a>
		return false;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e05b      	b.n	8001392 <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80012e0:	2b60      	cmp	r3, #96	; 0x60
 80012e2:	d10a      	bne.n	80012fa <bmp280_init+0xba>
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff26 	bl	8001136 <read_hum_calibration_data>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f083 0301 	eor.w	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <bmp280_init+0xba>
		return false;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e04b      	b.n	8001392 <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	795b      	ldrb	r3, [r3, #5]
 80012fe:	015b      	lsls	r3, r3, #5
 8001300:	b25a      	sxtb	r2, r3
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	785b      	ldrb	r3, [r3, #1]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	b25b      	sxtb	r3, r3
 800130a:	4313      	orrs	r3, r2
 800130c:	b25b      	sxtb	r3, r3
 800130e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	461a      	mov	r2, r3
 8001314:	21f5      	movs	r1, #245	; 0xf5
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff ff6d 	bl	80011f6 <write_register8>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <bmp280_init+0xe6>
		return false;
 8001322:	2300      	movs	r3, #0
 8001324:	e035      	b.n	8001392 <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d102      	bne.n	8001334 <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2200      	movs	r2, #0
 8001332:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	78db      	ldrb	r3, [r3, #3]
 8001338:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 800133a:	b25a      	sxtb	r2, r3
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	789b      	ldrb	r3, [r3, #2]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	b25b      	sxtb	r3, r3
 8001344:	4313      	orrs	r3, r2
 8001346:	b25a      	sxtb	r2, r3
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	b25b      	sxtb	r3, r3
 800134e:	4313      	orrs	r3, r2
 8001350:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 8001352:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800135a:	2b60      	cmp	r3, #96	; 0x60
 800135c:	d10d      	bne.n	800137a <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	791b      	ldrb	r3, [r3, #4]
 8001362:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 8001364:	7b7b      	ldrb	r3, [r7, #13]
 8001366:	461a      	mov	r2, r3
 8001368:	21f2      	movs	r1, #242	; 0xf2
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff43 	bl	80011f6 <write_register8>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <bmp280_init+0x13a>
			return false;
 8001376:	2300      	movs	r3, #0
 8001378:	e00b      	b.n	8001392 <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	461a      	mov	r2, r3
 800137e:	21f4      	movs	r1, #244	; 0xf4
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff38 	bl	80011f6 <write_register8>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <bmp280_init+0x150>
		return false;
 800138c:	2300      	movs	r3, #0
 800138e:	e000      	b.n	8001392 <bmp280_init+0x152>
	}

	return true;
 8001390:	2301      	movs	r3, #1
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800139a:	b480      	push	{r7}
 800139c:	b087      	sub	sp, #28
 800139e:	af00      	add	r7, sp, #0
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	10da      	asrs	r2, r3, #3
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80013bc:	12db      	asrs	r3, r3, #11
 80013be:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	111b      	asrs	r3, r3, #4
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	8812      	ldrh	r2, [r2, #0]
 80013c8:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 80013ca:	68ba      	ldr	r2, [r7, #8]
 80013cc:	1112      	asrs	r2, r2, #4
 80013ce:	68f9      	ldr	r1, [r7, #12]
 80013d0:	8809      	ldrh	r1, [r1, #0]
 80013d2:	1a52      	subs	r2, r2, r1
 80013d4:	fb02 f303 	mul.w	r3, r2, r3
 80013d8:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80013e0:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80013e4:	139b      	asrs	r3, r3, #14
 80013e6:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	441a      	add	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	4613      	mov	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	3380      	adds	r3, #128	; 0x80
 80013fe:	121b      	asrs	r3, r3, #8
}
 8001400:	4618      	mov	r0, r3
 8001402:	371c      	adds	r7, #28
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 800140c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001410:	b0cc      	sub	sp, #304	; 0x130
 8001412:	af00      	add	r7, sp, #0
 8001414:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
 8001418:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800141c:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001420:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001424:	17da      	asrs	r2, r3, #31
 8001426:	461c      	mov	r4, r3
 8001428:	4615      	mov	r5, r2
 800142a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800142e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001432:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 8001436:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800143a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800143e:	fb03 f102 	mul.w	r1, r3, r2
 8001442:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001446:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800144a:	fb02 f303 	mul.w	r3, r2, r3
 800144e:	18ca      	adds	r2, r1, r3
 8001450:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001454:	fba3 8903 	umull	r8, r9, r3, r3
 8001458:	eb02 0309 	add.w	r3, r2, r9
 800145c:	4699      	mov	r9, r3
 800145e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001462:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001466:	b21b      	sxth	r3, r3
 8001468:	17da      	asrs	r2, r3, #31
 800146a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800146e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001472:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001476:	4603      	mov	r3, r0
 8001478:	fb03 f209 	mul.w	r2, r3, r9
 800147c:	460b      	mov	r3, r1
 800147e:	fb08 f303 	mul.w	r3, r8, r3
 8001482:	4413      	add	r3, r2
 8001484:	4602      	mov	r2, r0
 8001486:	fba8 1202 	umull	r1, r2, r8, r2
 800148a:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800148e:	460a      	mov	r2, r1
 8001490:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001494:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001498:	4413      	add	r3, r2
 800149a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800149e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80014a2:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
 80014a6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80014aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014ae:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	17da      	asrs	r2, r3, #31
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80014ba:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80014be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014c2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80014c6:	462a      	mov	r2, r5
 80014c8:	fb02 f203 	mul.w	r2, r2, r3
 80014cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014d0:	4621      	mov	r1, r4
 80014d2:	fb01 f303 	mul.w	r3, r1, r3
 80014d6:	441a      	add	r2, r3
 80014d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80014dc:	4621      	mov	r1, r4
 80014de:	fba3 1301 	umull	r1, r3, r3, r1
 80014e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014e6:	460b      	mov	r3, r1
 80014e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014f0:	18d3      	adds	r3, r2, r3
 80014f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014f6:	f04f 0000 	mov.w	r0, #0
 80014fa:	f04f 0100 	mov.w	r1, #0
 80014fe:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001502:	462b      	mov	r3, r5
 8001504:	0459      	lsls	r1, r3, #17
 8001506:	4623      	mov	r3, r4
 8001508:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800150c:	4623      	mov	r3, r4
 800150e:	0458      	lsls	r0, r3, #17
 8001510:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001514:	1814      	adds	r4, r2, r0
 8001516:	643c      	str	r4, [r7, #64]	; 0x40
 8001518:	414b      	adcs	r3, r1
 800151a:	647b      	str	r3, [r7, #68]	; 0x44
 800151c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001520:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 8001524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001528:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800152c:	b21b      	sxth	r3, r3
 800152e:	17da      	asrs	r2, r3, #31
 8001530:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001534:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001538:	f04f 0000 	mov.w	r0, #0
 800153c:	f04f 0100 	mov.w	r1, #0
 8001540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001544:	00d9      	lsls	r1, r3, #3
 8001546:	2000      	movs	r0, #0
 8001548:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800154c:	1814      	adds	r4, r2, r0
 800154e:	63bc      	str	r4, [r7, #56]	; 0x38
 8001550:	414b      	adcs	r3, r1
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001554:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001558:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800155c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001560:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001564:	fb03 f102 	mul.w	r1, r3, r2
 8001568:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800156c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001570:	fb02 f303 	mul.w	r3, r2, r3
 8001574:	18ca      	adds	r2, r1, r3
 8001576:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800157a:	fba3 1303 	umull	r1, r3, r3, r3
 800157e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001582:	460b      	mov	r3, r1
 8001584:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800158c:	18d3      	adds	r3, r2, r3
 800158e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001596:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800159a:	b21b      	sxth	r3, r3
 800159c:	17da      	asrs	r2, r3, #31
 800159e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80015a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80015a6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80015aa:	462b      	mov	r3, r5
 80015ac:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80015b0:	4642      	mov	r2, r8
 80015b2:	fb02 f203 	mul.w	r2, r2, r3
 80015b6:	464b      	mov	r3, r9
 80015b8:	4621      	mov	r1, r4
 80015ba:	fb01 f303 	mul.w	r3, r1, r3
 80015be:	4413      	add	r3, r2
 80015c0:	4622      	mov	r2, r4
 80015c2:	4641      	mov	r1, r8
 80015c4:	fba2 1201 	umull	r1, r2, r2, r1
 80015c8:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80015cc:	460a      	mov	r2, r1
 80015ce:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80015d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80015d6:	4413      	add	r3, r2
 80015d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015dc:	f04f 0000 	mov.w	r0, #0
 80015e0:	f04f 0100 	mov.w	r1, #0
 80015e4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80015e8:	4623      	mov	r3, r4
 80015ea:	0a18      	lsrs	r0, r3, #8
 80015ec:	462b      	mov	r3, r5
 80015ee:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80015f2:	462b      	mov	r3, r5
 80015f4:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 80015f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80015fe:	b21b      	sxth	r3, r3
 8001600:	17da      	asrs	r2, r3, #31
 8001602:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001606:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800160a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800160e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001612:	464a      	mov	r2, r9
 8001614:	fb02 f203 	mul.w	r2, r2, r3
 8001618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800161c:	4644      	mov	r4, r8
 800161e:	fb04 f303 	mul.w	r3, r4, r3
 8001622:	441a      	add	r2, r3
 8001624:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001628:	4644      	mov	r4, r8
 800162a:	fba3 4304 	umull	r4, r3, r3, r4
 800162e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001632:	4623      	mov	r3, r4
 8001634:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001638:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800163c:	18d3      	adds	r3, r2, r3
 800163e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800164e:	464c      	mov	r4, r9
 8001650:	0323      	lsls	r3, r4, #12
 8001652:	4644      	mov	r4, r8
 8001654:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001658:	4644      	mov	r4, r8
 800165a:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 800165c:	1884      	adds	r4, r0, r2
 800165e:	633c      	str	r4, [r7, #48]	; 0x30
 8001660:	eb41 0303 	adc.w	r3, r1, r3
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
 8001666:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800166a:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 800166e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001672:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001676:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 800167a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800167e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001682:	88db      	ldrh	r3, [r3, #6]
 8001684:	b29b      	uxth	r3, r3
 8001686:	2200      	movs	r2, #0
 8001688:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800168c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001690:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001694:	462b      	mov	r3, r5
 8001696:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800169a:	4642      	mov	r2, r8
 800169c:	fb02 f203 	mul.w	r2, r2, r3
 80016a0:	464b      	mov	r3, r9
 80016a2:	4621      	mov	r1, r4
 80016a4:	fb01 f303 	mul.w	r3, r1, r3
 80016a8:	4413      	add	r3, r2
 80016aa:	4622      	mov	r2, r4
 80016ac:	4641      	mov	r1, r8
 80016ae:	fba2 1201 	umull	r1, r2, r2, r1
 80016b2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80016b6:	460a      	mov	r2, r1
 80016b8:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80016bc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80016c0:	4413      	add	r3, r2
 80016c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80016d2:	4629      	mov	r1, r5
 80016d4:	104a      	asrs	r2, r1, #1
 80016d6:	4629      	mov	r1, r5
 80016d8:	17cb      	asrs	r3, r1, #31
 80016da:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128

	if (var1 == 0) {
 80016de:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80016e2:	4313      	orrs	r3, r2
 80016e4:	d101      	bne.n	80016ea <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 80016e6:	2300      	movs	r3, #0
 80016e8:	e148      	b.n	800197c <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 80016ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016ee:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80016f2:	17da      	asrs	r2, r3, #31
 80016f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80016f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016f8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80016fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001700:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001704:	105b      	asrs	r3, r3, #1
 8001706:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800170a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800170e:	07db      	lsls	r3, r3, #31
 8001710:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001714:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001718:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800171c:	4621      	mov	r1, r4
 800171e:	1a89      	subs	r1, r1, r2
 8001720:	67b9      	str	r1, [r7, #120]	; 0x78
 8001722:	4629      	mov	r1, r5
 8001724:	eb61 0303 	sbc.w	r3, r1, r3
 8001728:	67fb      	str	r3, [r7, #124]	; 0x7c
 800172a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800172e:	4622      	mov	r2, r4
 8001730:	462b      	mov	r3, r5
 8001732:	1891      	adds	r1, r2, r2
 8001734:	6239      	str	r1, [r7, #32]
 8001736:	415b      	adcs	r3, r3
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
 800173a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800173e:	4621      	mov	r1, r4
 8001740:	1851      	adds	r1, r2, r1
 8001742:	61b9      	str	r1, [r7, #24]
 8001744:	4629      	mov	r1, r5
 8001746:	414b      	adcs	r3, r1
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001756:	4649      	mov	r1, r9
 8001758:	018b      	lsls	r3, r1, #6
 800175a:	4641      	mov	r1, r8
 800175c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001760:	4641      	mov	r1, r8
 8001762:	018a      	lsls	r2, r1, #6
 8001764:	4641      	mov	r1, r8
 8001766:	1889      	adds	r1, r1, r2
 8001768:	6139      	str	r1, [r7, #16]
 800176a:	4649      	mov	r1, r9
 800176c:	eb43 0101 	adc.w	r1, r3, r1
 8001770:	6179      	str	r1, [r7, #20]
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800177e:	4649      	mov	r1, r9
 8001780:	008b      	lsls	r3, r1, #2
 8001782:	4641      	mov	r1, r8
 8001784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001788:	4641      	mov	r1, r8
 800178a:	008a      	lsls	r2, r1, #2
 800178c:	4610      	mov	r0, r2
 800178e:	4619      	mov	r1, r3
 8001790:	4603      	mov	r3, r0
 8001792:	4622      	mov	r2, r4
 8001794:	189b      	adds	r3, r3, r2
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	460b      	mov	r3, r1
 800179a:	462a      	mov	r2, r5
 800179c:	eb42 0303 	adc.w	r3, r2, r3
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	f04f 0300 	mov.w	r3, #0
 80017aa:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80017ae:	4649      	mov	r1, r9
 80017b0:	008b      	lsls	r3, r1, #2
 80017b2:	4641      	mov	r1, r8
 80017b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017b8:	4641      	mov	r1, r8
 80017ba:	008a      	lsls	r2, r1, #2
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	4603      	mov	r3, r0
 80017c2:	4622      	mov	r2, r4
 80017c4:	189b      	adds	r3, r3, r2
 80017c6:	673b      	str	r3, [r7, #112]	; 0x70
 80017c8:	462b      	mov	r3, r5
 80017ca:	460a      	mov	r2, r1
 80017cc:	eb42 0303 	adc.w	r3, r2, r3
 80017d0:	677b      	str	r3, [r7, #116]	; 0x74
 80017d2:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 80017d6:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80017da:	f7ff f9e5 	bl	8000ba8 <__aeabi_ldivmod>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 80017e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80017ea:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	17da      	asrs	r2, r3, #31
 80017f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80017f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80017f6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017fa:	f04f 0000 	mov.w	r0, #0
 80017fe:	f04f 0100 	mov.w	r1, #0
 8001802:	0b50      	lsrs	r0, r2, #13
 8001804:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001808:	1359      	asrs	r1, r3, #13
 800180a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800180e:	462b      	mov	r3, r5
 8001810:	fb00 f203 	mul.w	r2, r0, r3
 8001814:	4623      	mov	r3, r4
 8001816:	fb03 f301 	mul.w	r3, r3, r1
 800181a:	4413      	add	r3, r2
 800181c:	4622      	mov	r2, r4
 800181e:	fba2 1200 	umull	r1, r2, r2, r0
 8001822:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001826:	460a      	mov	r2, r1
 8001828:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800182c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001830:	4413      	add	r3, r2
 8001832:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001836:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800183a:	f04f 0000 	mov.w	r0, #0
 800183e:	f04f 0100 	mov.w	r1, #0
 8001842:	0b50      	lsrs	r0, r2, #13
 8001844:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001848:	1359      	asrs	r1, r3, #13
 800184a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800184e:	462b      	mov	r3, r5
 8001850:	fb00 f203 	mul.w	r2, r0, r3
 8001854:	4623      	mov	r3, r4
 8001856:	fb03 f301 	mul.w	r3, r3, r1
 800185a:	4413      	add	r3, r2
 800185c:	4622      	mov	r2, r4
 800185e:	fba2 1200 	umull	r1, r2, r2, r0
 8001862:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001866:	460a      	mov	r2, r1
 8001868:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800186c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001870:	4413      	add	r3, r2
 8001872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	f04f 0300 	mov.w	r3, #0
 800187e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001882:	4621      	mov	r1, r4
 8001884:	0e4a      	lsrs	r2, r1, #25
 8001886:	4629      	mov	r1, r5
 8001888:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800188c:	4629      	mov	r1, r5
 800188e:	164b      	asrs	r3, r1, #25
 8001890:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001898:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800189c:	b21b      	sxth	r3, r3
 800189e:	17da      	asrs	r2, r3, #31
 80018a0:	663b      	str	r3, [r7, #96]	; 0x60
 80018a2:	667a      	str	r2, [r7, #100]	; 0x64
 80018a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80018a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80018ac:	462a      	mov	r2, r5
 80018ae:	fb02 f203 	mul.w	r2, r2, r3
 80018b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80018b6:	4621      	mov	r1, r4
 80018b8:	fb01 f303 	mul.w	r3, r1, r3
 80018bc:	4413      	add	r3, r2
 80018be:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018c2:	4621      	mov	r1, r4
 80018c4:	fba2 1201 	umull	r1, r2, r2, r1
 80018c8:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80018cc:	460a      	mov	r2, r1
 80018ce:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80018d2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80018d6:	4413      	add	r3, r2
 80018d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80018e8:	4621      	mov	r1, r4
 80018ea:	0cca      	lsrs	r2, r1, #19
 80018ec:	4629      	mov	r1, r5
 80018ee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80018f2:	4629      	mov	r1, r5
 80018f4:	14cb      	asrs	r3, r1, #19
 80018f6:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 80018fa:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 80018fe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001902:	1884      	adds	r4, r0, r2
 8001904:	65bc      	str	r4, [r7, #88]	; 0x58
 8001906:	eb41 0303 	adc.w	r3, r1, r3
 800190a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800190c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001910:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001914:	4621      	mov	r1, r4
 8001916:	1889      	adds	r1, r1, r2
 8001918:	6539      	str	r1, [r7, #80]	; 0x50
 800191a:	4629      	mov	r1, r5
 800191c:	eb43 0101 	adc.w	r1, r3, r1
 8001920:	6579      	str	r1, [r7, #84]	; 0x54
 8001922:	f04f 0000 	mov.w	r0, #0
 8001926:	f04f 0100 	mov.w	r1, #0
 800192a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800192e:	4623      	mov	r3, r4
 8001930:	0a18      	lsrs	r0, r3, #8
 8001932:	462b      	mov	r3, r5
 8001934:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001938:	462b      	mov	r3, r5
 800193a:	1219      	asrs	r1, r3, #8
 800193c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001940:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001944:	b21b      	sxth	r3, r3
 8001946:	17da      	asrs	r2, r3, #31
 8001948:	64bb      	str	r3, [r7, #72]	; 0x48
 800194a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800194c:	f04f 0200 	mov.w	r2, #0
 8001950:	f04f 0300 	mov.w	r3, #0
 8001954:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001958:	464c      	mov	r4, r9
 800195a:	0123      	lsls	r3, r4, #4
 800195c:	4644      	mov	r4, r8
 800195e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001962:	4644      	mov	r4, r8
 8001964:	0122      	lsls	r2, r4, #4
 8001966:	1884      	adds	r4, r0, r2
 8001968:	603c      	str	r4, [r7, #0]
 800196a:	eb41 0303 	adc.w	r3, r1, r3
 800196e:	607b      	str	r3, [r7, #4]
 8001970:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001974:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	return p;
 8001978:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
}
 800197c:	4618      	mov	r0, r3
 800197e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001982:	46bd      	mov	sp, r7
 8001984:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001988 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f5a3 3396 	sub.w	r3, r3, #76800	; 0x12c00
 800199a:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	039a      	lsls	r2, r3, #14
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80019a6:	051b      	lsls	r3, r3, #20
 80019a8:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80019b0:	4619      	mov	r1, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	fb01 f303 	mul.w	r3, r1, r3
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80019be:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	f992 2022 	ldrsb.w	r2, [r2, #34]	; 0x22
 80019c6:	4611      	mov	r1, r2
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	fb01 f202 	mul.w	r2, r1, r2
 80019ce:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019d0:	68f9      	ldr	r1, [r7, #12]
 80019d2:	7f09      	ldrb	r1, [r1, #28]
 80019d4:	4608      	mov	r0, r1
 80019d6:	6979      	ldr	r1, [r7, #20]
 80019d8:	fb00 f101 	mul.w	r1, r0, r1
 80019dc:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80019de:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 80019e2:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 80019e6:	1292      	asrs	r2, r2, #10
 80019e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 80019f2:	fb01 f202 	mul.w	r2, r1, r2
 80019f6:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80019fa:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	13db      	asrs	r3, r3, #15
 8001a06:	697a      	ldr	r2, [r7, #20]
 8001a08:	13d2      	asrs	r2, r2, #15
 8001a0a:	fb02 f303 	mul.w	r3, r2, r3
 8001a0e:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001a10:	68fa      	ldr	r2, [r7, #12]
 8001a12:	7e12      	ldrb	r2, [r2, #24]
 8001a14:	fb02 f303 	mul.w	r3, r2, r3
 8001a18:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a26:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
 8001a2e:	bfa8      	it	ge
 8001a30:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
 8001a34:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	131b      	asrs	r3, r3, #12
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	371c      	adds	r7, #28
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b08c      	sub	sp, #48	; 0x30
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	607a      	str	r2, [r7, #4]
 8001a52:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001a5a:	2b60      	cmp	r3, #96	; 0x60
 8001a5c:	d007      	beq.n	8001a6e <bmp280_read_fixed+0x28>
		if (humidity)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <bmp280_read_fixed+0x32>
 8001a74:	2308      	movs	r3, #8
 8001a76:	e000      	b.n	8001a7a <bmp280_read_fixed+0x34>
 8001a78:	2306      	movs	r3, #6
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f107 0218 	add.w	r2, r7, #24
 8001a84:	21f7      	movs	r1, #247	; 0xf7
 8001a86:	68f8      	ldr	r0, [r7, #12]
 8001a88:	f7ff faab 	bl	8000fe2 <read_data>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <bmp280_read_fixed+0x50>
		return false;
 8001a92:	2300      	movs	r3, #0
 8001a94:	e038      	b.n	8001b08 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001a96:	7e3b      	ldrb	r3, [r7, #24]
 8001a98:	031a      	lsls	r2, r3, #12
 8001a9a:	7e7b      	ldrb	r3, [r7, #25]
 8001a9c:	011b      	lsls	r3, r3, #4
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	7eba      	ldrb	r2, [r7, #26]
 8001aa2:	0912      	lsrs	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	62bb      	str	r3, [r7, #40]	; 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001aaa:	7efb      	ldrb	r3, [r7, #27]
 8001aac:	031a      	lsls	r2, r3, #12
 8001aae:	7f3b      	ldrb	r3, [r7, #28]
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	7f7a      	ldrb	r2, [r7, #29]
 8001ab6:	0912      	lsrs	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	4313      	orrs	r3, r2
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff fc67 	bl	800139a <compensate_temperature>
 8001acc:	4602      	mov	r2, r0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f7ff fc97 	bl	800140c <compensate_pressure>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00d      	beq.n	8001b06 <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001aea:	7fbb      	ldrb	r3, [r7, #30]
 8001aec:	021b      	lsls	r3, r3, #8
 8001aee:	7ffa      	ldrb	r2, [r7, #31]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	461a      	mov	r2, r3
 8001af8:	6a39      	ldr	r1, [r7, #32]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7ff ff44 	bl	8001988 <compensate_humidity>
 8001b00:	4602      	mov	r2, r0
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3730      	adds	r7, #48	; 0x30
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d002      	beq.n	8001b2a <bmp280_read_float+0x1a>
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	e000      	b.n	8001b2c <bmp280_read_float+0x1c>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	f107 0218 	add.w	r2, r7, #24
 8001b30:	f107 011c 	add.w	r1, r7, #28
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff ff86 	bl	8001a46 <bmp280_read_fixed>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d028      	beq.n	8001b92 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	ee07 3a90 	vmov	s15, r3
 8001b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b4a:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001b9c <bmp280_read_float+0x8c>
 8001b4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	ee07 3a90 	vmov	s15, r3
 8001b5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b62:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8001ba0 <bmp280_read_float+0x90>
 8001b66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b80:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001ba4 <bmp280_read_float+0x94>
 8001b84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <bmp280_read_float+0x84>
	}

	return false;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3720      	adds	r7, #32
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	42c80000 	.word	0x42c80000
 8001ba0:	43800000 	.word	0x43800000
 8001ba4:	44800000 	.word	0x44800000

08001ba8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart1, Rx_data, 10);
 8001bb0:	220a      	movs	r2, #10
 8001bb2:	4904      	ldr	r1, [pc, #16]	; (8001bc4 <HAL_UART_RxCpltCallback+0x1c>)
 8001bb4:	4804      	ldr	r0, [pc, #16]	; (8001bc8 <HAL_UART_RxCpltCallback+0x20>)
 8001bb6:	f002 fd70 	bl	800469a <HAL_UART_Receive_IT>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	200003d8 	.word	0x200003d8
 8001bc8:	2000024c 	.word	0x2000024c

08001bcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bcc:	b5b0      	push	{r4, r5, r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bd2:	f000 fc31 	bl	8002438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bd6:	f000 f913 	bl	8001e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bda:	f000 f9d3 	bl	8001f84 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bde:	f000 f979 	bl	8001ed4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001be2:	f000 f9a5 	bl	8001f30 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, Rx_data, 10);
 8001be6:	220a      	movs	r2, #10
 8001be8:	4971      	ldr	r1, [pc, #452]	; (8001db0 <main+0x1e4>)
 8001bea:	4872      	ldr	r0, [pc, #456]	; (8001db4 <main+0x1e8>)
 8001bec:	f002 fd55 	bl	800469a <HAL_UART_Receive_IT>

  	bmp280_init_default_params(&bmp280.params);
 8001bf0:	4871      	ldr	r0, [pc, #452]	; (8001db8 <main+0x1ec>)
 8001bf2:	f7ff f9ab 	bl	8000f4c <bmp280_init_default_params>
  	bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001bf6:	4b71      	ldr	r3, [pc, #452]	; (8001dbc <main+0x1f0>)
 8001bf8:	2276      	movs	r2, #118	; 0x76
 8001bfa:	849a      	strh	r2, [r3, #36]	; 0x24
  	bmp280.i2c = &hi2c1;
 8001bfc:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <main+0x1f0>)
 8001bfe:	4a70      	ldr	r2, [pc, #448]	; (8001dc0 <main+0x1f4>)
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28

  	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001c02:	e013      	b.n	8001c2c <main+0x60>
  		size = sprintf((char *)Data, "BMP280 initialization failed\n\r");
 8001c04:	496f      	ldr	r1, [pc, #444]	; (8001dc4 <main+0x1f8>)
 8001c06:	4870      	ldr	r0, [pc, #448]	; (8001dc8 <main+0x1fc>)
 8001c08:	f004 f97c 	bl	8005f04 <siprintf>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	4b6e      	ldr	r3, [pc, #440]	; (8001dcc <main+0x200>)
 8001c12:	801a      	strh	r2, [r3, #0]
  		HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001c14:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <main+0x200>)
 8001c16:	881a      	ldrh	r2, [r3, #0]
 8001c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1c:	496a      	ldr	r1, [pc, #424]	; (8001dc8 <main+0x1fc>)
 8001c1e:	4865      	ldr	r0, [pc, #404]	; (8001db4 <main+0x1e8>)
 8001c20:	f002 fca9 	bl	8004576 <HAL_UART_Transmit>
  		HAL_Delay(2000);
 8001c24:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c28:	f000 fc78 	bl	800251c <HAL_Delay>
  	while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001c2c:	4962      	ldr	r1, [pc, #392]	; (8001db8 <main+0x1ec>)
 8001c2e:	4863      	ldr	r0, [pc, #396]	; (8001dbc <main+0x1f0>)
 8001c30:	f7ff fb06 	bl	8001240 <bmp280_init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f083 0301 	eor.w	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1e1      	bne.n	8001c04 <main+0x38>
  	}
  	bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001c40:	4b5e      	ldr	r3, [pc, #376]	; (8001dbc <main+0x1f0>)
 8001c42:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001c46:	2b60      	cmp	r3, #96	; 0x60
 8001c48:	bf0c      	ite	eq
 8001c4a:	2301      	moveq	r3, #1
 8001c4c:	2300      	movne	r3, #0
 8001c4e:	71fb      	strb	r3, [r7, #7]
  	size = sprintf((char *)Data, "BMP280: found %s\n\r", bme280p ? "BME280\r" : "BMP280\r");
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <main+0x8e>
 8001c56:	4b5e      	ldr	r3, [pc, #376]	; (8001dd0 <main+0x204>)
 8001c58:	e000      	b.n	8001c5c <main+0x90>
 8001c5a:	4b5e      	ldr	r3, [pc, #376]	; (8001dd4 <main+0x208>)
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	495e      	ldr	r1, [pc, #376]	; (8001dd8 <main+0x20c>)
 8001c60:	4859      	ldr	r0, [pc, #356]	; (8001dc8 <main+0x1fc>)
 8001c62:	f004 f94f 	bl	8005f04 <siprintf>
 8001c66:	4603      	mov	r3, r0
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	4b58      	ldr	r3, [pc, #352]	; (8001dcc <main+0x200>)
 8001c6c:	801a      	strh	r2, [r3, #0]
  	HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001c6e:	4b57      	ldr	r3, [pc, #348]	; (8001dcc <main+0x200>)
 8001c70:	881a      	ldrh	r2, [r3, #0]
 8001c72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c76:	4954      	ldr	r1, [pc, #336]	; (8001dc8 <main+0x1fc>)
 8001c78:	484e      	ldr	r0, [pc, #312]	; (8001db4 <main+0x1e8>)
 8001c7a:	f002 fc7c 	bl	8004576 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(!uart_receiver_mode){
 8001c7e:	4b57      	ldr	r3, [pc, #348]	; (8001ddc <main+0x210>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d172      	bne.n	8001d6e <main+0x1a2>
	  	  	  HAL_Delay(2000);
 8001c88:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001c8c:	f000 fc46 	bl	800251c <HAL_Delay>
	  	  	  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001c90:	e013      	b.n	8001cba <main+0xee>
	  	  	  			size = sprintf((char *)Data,"Temperature/pressure reading failed\n");
 8001c92:	4953      	ldr	r1, [pc, #332]	; (8001de0 <main+0x214>)
 8001c94:	484c      	ldr	r0, [pc, #304]	; (8001dc8 <main+0x1fc>)
 8001c96:	f004 f935 	bl	8005f04 <siprintf>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b4b      	ldr	r3, [pc, #300]	; (8001dcc <main+0x200>)
 8001ca0:	801a      	strh	r2, [r3, #0]
	  	  	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001ca2:	4b4a      	ldr	r3, [pc, #296]	; (8001dcc <main+0x200>)
 8001ca4:	881a      	ldrh	r2, [r3, #0]
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	4947      	ldr	r1, [pc, #284]	; (8001dc8 <main+0x1fc>)
 8001cac:	4841      	ldr	r0, [pc, #260]	; (8001db4 <main+0x1e8>)
 8001cae:	f002 fc62 	bl	8004576 <HAL_UART_Transmit>
	  	  	  			HAL_Delay(2000);
 8001cb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001cb6:	f000 fc31 	bl	800251c <HAL_Delay>
	  	  	  		while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001cba:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <main+0x218>)
 8001cbc:	4a4a      	ldr	r2, [pc, #296]	; (8001de8 <main+0x21c>)
 8001cbe:	494b      	ldr	r1, [pc, #300]	; (8001dec <main+0x220>)
 8001cc0:	483e      	ldr	r0, [pc, #248]	; (8001dbc <main+0x1f0>)
 8001cc2:	f7ff ff25 	bl	8001b10 <bmp280_read_float>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f083 0301 	eor.w	r3, r3, #1
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1df      	bne.n	8001c92 <main+0xc6>
	  	  	  		}

	  	  			size = sprintf((char *)Data,"Pressure: %.2f Pa, Temperature: %.2f C\r",pressure, temperature);
 8001cd2:	4b45      	ldr	r3, [pc, #276]	; (8001de8 <main+0x21c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f7fe fc36 	bl	8000548 <__aeabi_f2d>
 8001cdc:	4604      	mov	r4, r0
 8001cde:	460d      	mov	r5, r1
 8001ce0:	4b42      	ldr	r3, [pc, #264]	; (8001dec <main+0x220>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7fe fc2f 	bl	8000548 <__aeabi_f2d>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	e9cd 2300 	strd	r2, r3, [sp]
 8001cf2:	4622      	mov	r2, r4
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	493e      	ldr	r1, [pc, #248]	; (8001df0 <main+0x224>)
 8001cf8:	4833      	ldr	r0, [pc, #204]	; (8001dc8 <main+0x1fc>)
 8001cfa:	f004 f903 	bl	8005f04 <siprintf>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	4b32      	ldr	r3, [pc, #200]	; (8001dcc <main+0x200>)
 8001d04:	801a      	strh	r2, [r3, #0]
	  	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001d06:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <main+0x200>)
 8001d08:	881a      	ldrh	r2, [r3, #0]
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	492e      	ldr	r1, [pc, #184]	; (8001dc8 <main+0x1fc>)
 8001d10:	4828      	ldr	r0, [pc, #160]	; (8001db4 <main+0x1e8>)
 8001d12:	f002 fc30 	bl	8004576 <HAL_UART_Transmit>

	  	  	  		if (bme280p) {
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d017      	beq.n	8001d4c <main+0x180>
	  	  	  			size = sprintf((char *)Data,", Humidity: %.2f\n\r", humidity);
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <main+0x218>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7fe fc11 	bl	8000548 <__aeabi_f2d>
 8001d26:	4602      	mov	r2, r0
 8001d28:	460b      	mov	r3, r1
 8001d2a:	4932      	ldr	r1, [pc, #200]	; (8001df4 <main+0x228>)
 8001d2c:	4826      	ldr	r0, [pc, #152]	; (8001dc8 <main+0x1fc>)
 8001d2e:	f004 f8e9 	bl	8005f04 <siprintf>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <main+0x200>)
 8001d38:	801a      	strh	r2, [r3, #0]
	  	  	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <main+0x200>)
 8001d3c:	881a      	ldrh	r2, [r3, #0]
 8001d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d42:	4921      	ldr	r1, [pc, #132]	; (8001dc8 <main+0x1fc>)
 8001d44:	481b      	ldr	r0, [pc, #108]	; (8001db4 <main+0x1e8>)
 8001d46:	f002 fc16 	bl	8004576 <HAL_UART_Transmit>
 8001d4a:	e798      	b.n	8001c7e <main+0xb2>
	  	  	  		}

	  	  	  		else {
	  	  	  			size = sprintf((char *)Data, "\n");
 8001d4c:	492a      	ldr	r1, [pc, #168]	; (8001df8 <main+0x22c>)
 8001d4e:	481e      	ldr	r0, [pc, #120]	; (8001dc8 <main+0x1fc>)
 8001d50:	f004 f8d8 	bl	8005f04 <siprintf>
 8001d54:	4603      	mov	r3, r0
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <main+0x200>)
 8001d5a:	801a      	strh	r2, [r3, #0]
	  	  	  			HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001d5c:	4b1b      	ldr	r3, [pc, #108]	; (8001dcc <main+0x200>)
 8001d5e:	881a      	ldrh	r2, [r3, #0]
 8001d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d64:	4918      	ldr	r1, [pc, #96]	; (8001dc8 <main+0x1fc>)
 8001d66:	4813      	ldr	r0, [pc, #76]	; (8001db4 <main+0x1e8>)
 8001d68:	f002 fc05 	bl	8004576 <HAL_UART_Transmit>
 8001d6c:	e787      	b.n	8001c7e <main+0xb2>
	  	  	  		}
	  	  	  }

	  	  	  else {
	  	  		  	  size = sprintf((char *)Data, "uart receiver \n");
 8001d6e:	4923      	ldr	r1, [pc, #140]	; (8001dfc <main+0x230>)
 8001d70:	4815      	ldr	r0, [pc, #84]	; (8001dc8 <main+0x1fc>)
 8001d72:	f004 f8c7 	bl	8005f04 <siprintf>
 8001d76:	4603      	mov	r3, r0
 8001d78:	b29a      	uxth	r2, r3
 8001d7a:	4b14      	ldr	r3, [pc, #80]	; (8001dcc <main+0x200>)
 8001d7c:	801a      	strh	r2, [r3, #0]
					  HAL_UART_Transmit(&huart1, Data, size, 1000);
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <main+0x200>)
 8001d80:	881a      	ldrh	r2, [r3, #0]
 8001d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d86:	4910      	ldr	r1, [pc, #64]	; (8001dc8 <main+0x1fc>)
 8001d88:	480a      	ldr	r0, [pc, #40]	; (8001db4 <main+0x1e8>)
 8001d8a:	f002 fbf4 	bl	8004576 <HAL_UART_Transmit>

				  while(1){
	  	  			  HAL_UART_Receive_IT(&huart1, Rx_data, 10);
 8001d8e:	220a      	movs	r2, #10
 8001d90:	4907      	ldr	r1, [pc, #28]	; (8001db0 <main+0x1e4>)
 8001d92:	4808      	ldr	r0, [pc, #32]	; (8001db4 <main+0x1e8>)
 8001d94:	f002 fc81 	bl	800469a <HAL_UART_Receive_IT>
	  	  			  HAL_UART_Transmit(&huart1, Rx_data, 10, 1000);
 8001d98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9c:	220a      	movs	r2, #10
 8001d9e:	4904      	ldr	r1, [pc, #16]	; (8001db0 <main+0x1e4>)
 8001da0:	4804      	ldr	r0, [pc, #16]	; (8001db4 <main+0x1e8>)
 8001da2:	f002 fbe8 	bl	8004576 <HAL_UART_Transmit>
	  	  			  HAL_Delay(100);
 8001da6:	2064      	movs	r0, #100	; 0x64
 8001da8:	f000 fbb8 	bl	800251c <HAL_Delay>
	  	  			  HAL_UART_Receive_IT(&huart1, Rx_data, 10);
 8001dac:	e7ef      	b.n	8001d8e <main+0x1c2>
 8001dae:	bf00      	nop
 8001db0:	200003d8 	.word	0x200003d8
 8001db4:	2000024c 	.word	0x2000024c
 8001db8:	200002bc 	.word	0x200002bc
 8001dbc:	20000290 	.word	0x20000290
 8001dc0:	200001f8 	.word	0x200001f8
 8001dc4:	08008410 	.word	0x08008410
 8001dc8:	200002d4 	.word	0x200002d4
 8001dcc:	200002d0 	.word	0x200002d0
 8001dd0:	08008430 	.word	0x08008430
 8001dd4:	08008438 	.word	0x08008438
 8001dd8:	08008440 	.word	0x08008440
 8001ddc:	200003d4 	.word	0x200003d4
 8001de0:	08008454 	.word	0x08008454
 8001de4:	200002cc 	.word	0x200002cc
 8001de8:	200002c4 	.word	0x200002c4
 8001dec:	200002c8 	.word	0x200002c8
 8001df0:	0800847c 	.word	0x0800847c
 8001df4:	080084a4 	.word	0x080084a4
 8001df8:	080084b8 	.word	0x080084b8
 8001dfc:	080084bc 	.word	0x080084bc

08001e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b094      	sub	sp, #80	; 0x50
 8001e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e06:	f107 0320 	add.w	r3, r7, #32
 8001e0a:	2230      	movs	r2, #48	; 0x30
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f003 fc06 	bl	8005620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <SystemClock_Config+0xcc>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <SystemClock_Config+0xcc>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	; 0x40
 8001e34:	4b25      	ldr	r3, [pc, #148]	; (8001ecc <SystemClock_Config+0xcc>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	4b22      	ldr	r3, [pc, #136]	; (8001ed0 <SystemClock_Config+0xd0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a21      	ldr	r2, [pc, #132]	; (8001ed0 <SystemClock_Config+0xd0>)
 8001e4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4e:	6013      	str	r3, [r2, #0]
 8001e50:	4b1f      	ldr	r3, [pc, #124]	; (8001ed0 <SystemClock_Config+0xd0>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e58:	607b      	str	r3, [r7, #4]
 8001e5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e66:	2302      	movs	r3, #2
 8001e68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e70:	2308      	movs	r3, #8
 8001e72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001e74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001e78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e7e:	2307      	movs	r3, #7
 8001e80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e82:	f107 0320 	add.w	r3, r7, #32
 8001e86:	4618      	mov	r0, r3
 8001e88:	f001 fe90 	bl	8003bac <HAL_RCC_OscConfig>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001e92:	f000 f8c9 	bl	8002028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e96:	230f      	movs	r3, #15
 8001e98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ea2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ea6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	2105      	movs	r1, #5
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f002 f8f1 	bl	800409c <HAL_RCC_ClockConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ec0:	f000 f8b2 	bl	8002028 <Error_Handler>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3750      	adds	r7, #80	; 0x50
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000

08001ed4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <MX_I2C1_Init+0x54>)
 8001edc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <MX_I2C1_Init+0x58>)
 8001ee2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001ef2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ef6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001efe:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f04:	4b07      	ldr	r3, [pc, #28]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <MX_I2C1_Init+0x50>)
 8001f12:	f000 fe8b 	bl	8002c2c <HAL_I2C_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f1c:	f000 f884 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200001f8 	.word	0x200001f8
 8001f28:	40005400 	.word	0x40005400
 8001f2c:	000186a0 	.word	0x000186a0

08001f30 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f34:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <MX_USART1_UART_Init+0x50>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f4e:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f54:	4b09      	ldr	r3, [pc, #36]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f56:	220c      	movs	r2, #12
 8001f58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f66:	4805      	ldr	r0, [pc, #20]	; (8001f7c <MX_USART1_UART_Init+0x4c>)
 8001f68:	f002 fab8 	bl	80044dc <HAL_UART_Init>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f72:	f000 f859 	bl	8002028 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	2000024c 	.word	0x2000024c
 8001f80:	40011000 	.word	0x40011000

08001f84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b088      	sub	sp, #32
 8001f88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8a:	f107 030c 	add.w	r3, r7, #12
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <MX_GPIO_Init+0x9c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a1f      	ldr	r2, [pc, #124]	; (8002020 <MX_GPIO_Init+0x9c>)
 8001fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <MX_GPIO_Init+0x9c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	4b19      	ldr	r3, [pc, #100]	; (8002020 <MX_GPIO_Init+0x9c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a18      	ldr	r2, [pc, #96]	; (8002020 <MX_GPIO_Init+0x9c>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b16      	ldr	r3, [pc, #88]	; (8002020 <MX_GPIO_Init+0x9c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	4b12      	ldr	r3, [pc, #72]	; (8002020 <MX_GPIO_Init+0x9c>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a11      	ldr	r2, [pc, #68]	; (8002020 <MX_GPIO_Init+0x9c>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b0f      	ldr	r3, [pc, #60]	; (8002020 <MX_GPIO_Init+0x9c>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ff2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ff6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	4619      	mov	r1, r3
 8002002:	4808      	ldr	r0, [pc, #32]	; (8002024 <MX_GPIO_Init+0xa0>)
 8002004:	f000 fc52 	bl	80028ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002008:	2200      	movs	r2, #0
 800200a:	2100      	movs	r1, #0
 800200c:	2006      	movs	r0, #6
 800200e:	f000 fb84 	bl	800271a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002012:	2006      	movs	r0, #6
 8002014:	f000 fb9d 	bl	8002752 <HAL_NVIC_EnableIRQ>

}
 8002018:	bf00      	nop
 800201a:	3720      	adds	r7, #32
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000

08002028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800202c:	b672      	cpsid	i
}
 800202e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002030:	e7fe      	b.n	8002030 <Error_Handler+0x8>
	...

08002034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_MspInit+0x4c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	4a0f      	ldr	r2, [pc, #60]	; (8002080 <HAL_MspInit+0x4c>)
 8002044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002048:	6453      	str	r3, [r2, #68]	; 0x44
 800204a:	4b0d      	ldr	r3, [pc, #52]	; (8002080 <HAL_MspInit+0x4c>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002052:	607b      	str	r3, [r7, #4]
 8002054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	603b      	str	r3, [r7, #0]
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_MspInit+0x4c>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205e:	4a08      	ldr	r2, [pc, #32]	; (8002080 <HAL_MspInit+0x4c>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002064:	6413      	str	r3, [r2, #64]	; 0x40
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_MspInit+0x4c>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002072:	2007      	movs	r0, #7
 8002074:	f000 fb46 	bl	8002704 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40023800 	.word	0x40023800

08002084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	; 0x28
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0314 	add.w	r3, r7, #20
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a19      	ldr	r2, [pc, #100]	; (8002108 <HAL_I2C_MspInit+0x84>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d12c      	bne.n	8002100 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <HAL_I2C_MspInit+0x88>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a17      	ldr	r2, [pc, #92]	; (800210c <HAL_I2C_MspInit+0x88>)
 80020b0:	f043 0302 	orr.w	r3, r3, #2
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <HAL_I2C_MspInit+0x88>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c8:	2312      	movs	r3, #18
 80020ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d0:	2303      	movs	r3, #3
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d4:	2304      	movs	r3, #4
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	480c      	ldr	r0, [pc, #48]	; (8002110 <HAL_I2C_MspInit+0x8c>)
 80020e0:	f000 fbe4 	bl	80028ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_I2C_MspInit+0x88>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	4a07      	ldr	r2, [pc, #28]	; (800210c <HAL_I2C_MspInit+0x88>)
 80020ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020f2:	6413      	str	r3, [r2, #64]	; 0x40
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <HAL_I2C_MspInit+0x88>)
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002100:	bf00      	nop
 8002102:	3728      	adds	r7, #40	; 0x28
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}
 8002108:	40005400 	.word	0x40005400
 800210c:	40023800 	.word	0x40023800
 8002110:	40020400 	.word	0x40020400

08002114 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b08a      	sub	sp, #40	; 0x28
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800211c:	f107 0314 	add.w	r3, r7, #20
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a1d      	ldr	r2, [pc, #116]	; (80021a8 <HAL_UART_MspInit+0x94>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d133      	bne.n	800219e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b1c      	ldr	r3, [pc, #112]	; (80021ac <HAL_UART_MspInit+0x98>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <HAL_UART_MspInit+0x98>)
 8002140:	f043 0310 	orr.w	r3, r3, #16
 8002144:	6453      	str	r3, [r2, #68]	; 0x44
 8002146:	4b19      	ldr	r3, [pc, #100]	; (80021ac <HAL_UART_MspInit+0x98>)
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	f003 0310 	and.w	r3, r3, #16
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_UART_MspInit+0x98>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a14      	ldr	r2, [pc, #80]	; (80021ac <HAL_UART_MspInit+0x98>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b12      	ldr	r3, [pc, #72]	; (80021ac <HAL_UART_MspInit+0x98>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800216e:	23c0      	movs	r3, #192	; 0xc0
 8002170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002172:	2302      	movs	r3, #2
 8002174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217a:	2303      	movs	r3, #3
 800217c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800217e:	2307      	movs	r3, #7
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4809      	ldr	r0, [pc, #36]	; (80021b0 <HAL_UART_MspInit+0x9c>)
 800218a:	f000 fb8f 	bl	80028ac <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800218e:	2200      	movs	r2, #0
 8002190:	2100      	movs	r1, #0
 8002192:	2025      	movs	r0, #37	; 0x25
 8002194:	f000 fac1 	bl	800271a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002198:	2025      	movs	r0, #37	; 0x25
 800219a:	f000 fada 	bl	8002752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800219e:	bf00      	nop
 80021a0:	3728      	adds	r7, #40	; 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40011000 	.word	0x40011000
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40020400 	.word	0x40020400

080021b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b8:	e7fe      	b.n	80021b8 <NMI_Handler+0x4>

080021ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ba:	b480      	push	{r7}
 80021bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021be:	e7fe      	b.n	80021be <HardFault_Handler+0x4>

080021c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <MemManage_Handler+0x4>

080021c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <BusFault_Handler+0x4>

080021cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <UsageFault_Handler+0x4>

080021d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002200:	f000 f96c 	bl	80024dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	bd80      	pop	{r7, pc}

08002208 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	uart_receiver_mode = 1;
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <EXTI0_IRQHandler+0x14>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002212:	2001      	movs	r0, #1
 8002214:	f000 fce6 	bl	8002be4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002218:	bf00      	nop
 800221a:	bd80      	pop	{r7, pc}
 800221c:	200003d4 	.word	0x200003d4

08002220 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002224:	4802      	ldr	r0, [pc, #8]	; (8002230 <USART1_IRQHandler+0x10>)
 8002226:	f002 fa69 	bl	80046fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	2000024c 	.word	0x2000024c

08002234 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
	return 1;
 8002238:	2301      	movs	r3, #1
}
 800223a:	4618      	mov	r0, r3
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <_kill>:

int _kill(int pid, int sig)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800224e:	f003 f9bd 	bl	80055cc <__errno>
 8002252:	4603      	mov	r3, r0
 8002254:	2216      	movs	r2, #22
 8002256:	601a      	str	r2, [r3, #0]
	return -1;
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <_exit>:

void _exit (int status)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800226c:	f04f 31ff 	mov.w	r1, #4294967295
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ffe7 	bl	8002244 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002276:	e7fe      	b.n	8002276 <_exit+0x12>

08002278 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	e00a      	b.n	80022a0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800228a:	f3af 8000 	nop.w
 800228e:	4601      	mov	r1, r0
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	b2ca      	uxtb	r2, r1
 8002298:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	3301      	adds	r3, #1
 800229e:	617b      	str	r3, [r7, #20]
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	dbf0      	blt.n	800228a <_read+0x12>
	}

return len;
 80022a8:	687b      	ldr	r3, [r7, #4]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	60f8      	str	r0, [r7, #12]
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	e009      	b.n	80022d8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	60ba      	str	r2, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	429a      	cmp	r2, r3
 80022de:	dbf1      	blt.n	80022c4 <_write+0x12>
	}
	return len;
 80022e0:	687b      	ldr	r3, [r7, #4]
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <_close>:

int _close(int file)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
	return -1;
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002312:	605a      	str	r2, [r3, #4]
	return 0;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <_isatty>:

int _isatty(int file)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
	return 1;
 800232a:	2301      	movs	r3, #1
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
	return 0;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800235c:	4a14      	ldr	r2, [pc, #80]	; (80023b0 <_sbrk+0x5c>)
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <_sbrk+0x60>)
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <_sbrk+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d102      	bne.n	8002376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <_sbrk+0x64>)
 8002372:	4a12      	ldr	r2, [pc, #72]	; (80023bc <_sbrk+0x68>)
 8002374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <_sbrk+0x64>)
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	429a      	cmp	r2, r3
 8002382:	d207      	bcs.n	8002394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002384:	f003 f922 	bl	80055cc <__errno>
 8002388:	4603      	mov	r3, r0
 800238a:	220c      	movs	r2, #12
 800238c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800238e:	f04f 33ff 	mov.w	r3, #4294967295
 8002392:	e009      	b.n	80023a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002394:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <_sbrk+0x64>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800239a:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <_sbrk+0x64>)
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <_sbrk+0x64>)
 80023a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023a6:	68fb      	ldr	r3, [r7, #12]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	20020000 	.word	0x20020000
 80023b4:	00000400 	.word	0x00000400
 80023b8:	200003e4 	.word	0x200003e4
 80023bc:	20000400 	.word	0x20000400

080023c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <SystemInit+0x20>)
 80023c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ca:	4a05      	ldr	r2, [pc, #20]	; (80023e0 <SystemInit+0x20>)
 80023cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023d4:	bf00      	nop
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	e000ed00 	.word	0xe000ed00

080023e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800241c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e8:	480d      	ldr	r0, [pc, #52]	; (8002420 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023ea:	490e      	ldr	r1, [pc, #56]	; (8002424 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023ec:	4a0e      	ldr	r2, [pc, #56]	; (8002428 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a0b      	ldr	r2, [pc, #44]	; (800242c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002400:	4c0b      	ldr	r4, [pc, #44]	; (8002430 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800240e:	f7ff ffd7 	bl	80023c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002412:	f003 f8e1 	bl	80055d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002416:	f7ff fbd9 	bl	8001bcc <main>
  bx  lr    
 800241a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800241c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002424:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002428:	080088cc 	.word	0x080088cc
  ldr r2, =_sbss
 800242c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002430:	200003fc 	.word	0x200003fc

08002434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002434:	e7fe      	b.n	8002434 <ADC_IRQHandler>
	...

08002438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <HAL_Init+0x40>)
 8002442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002448:	4b0b      	ldr	r3, [pc, #44]	; (8002478 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_Init+0x40>)
 800244e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a07      	ldr	r2, [pc, #28]	; (8002478 <HAL_Init+0x40>)
 800245a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002460:	2003      	movs	r0, #3
 8002462:	f000 f94f 	bl	8002704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002466:	2000      	movs	r0, #0
 8002468:	f000 f808 	bl	800247c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800246c:	f7ff fde2 	bl	8002034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00

0800247c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x54>)
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_InitTick+0x58>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002492:	fbb3 f3f1 	udiv	r3, r3, r1
 8002496:	fbb2 f3f3 	udiv	r3, r2, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f967 	bl	800276e <HAL_SYSTICK_Config>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00e      	b.n	80024c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b0f      	cmp	r3, #15
 80024ae:	d80a      	bhi.n	80024c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b0:	2200      	movs	r2, #0
 80024b2:	6879      	ldr	r1, [r7, #4]
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f000 f92f 	bl	800271a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024bc:	4a06      	ldr	r2, [pc, #24]	; (80024d8 <HAL_InitTick+0x5c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000008 	.word	0x20000008
 80024d8:	20000004 	.word	0x20000004

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008
 8002500:	200003e8 	.word	0x200003e8

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200003e8 	.word	0x200003e8

0800251c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7ff ffee 	bl	8002504 <HAL_GetTick>
 8002528:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002534:	d005      	beq.n	8002542 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002536:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_Delay+0x44>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4413      	add	r3, r2
 8002540:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002542:	bf00      	nop
 8002544:	f7ff ffde 	bl	8002504 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	68fa      	ldr	r2, [r7, #12]
 8002550:	429a      	cmp	r2, r3
 8002552:	d8f7      	bhi.n	8002544 <HAL_Delay+0x28>
  {
  }
}
 8002554:	bf00      	nop
 8002556:	bf00      	nop
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000008 	.word	0x20000008

08002564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002574:	4b0c      	ldr	r3, [pc, #48]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002580:	4013      	ands	r3, r2
 8002582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800258c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002596:	4a04      	ldr	r2, [pc, #16]	; (80025a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	60d3      	str	r3, [r2, #12]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <__NVIC_GetPriorityGrouping+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	f003 0307 	and.w	r3, r3, #7
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00

080025c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	db0b      	blt.n	80025f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	f003 021f 	and.w	r2, r3, #31
 80025e0:	4907      	ldr	r1, [pc, #28]	; (8002600 <__NVIC_EnableIRQ+0x38>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	2001      	movs	r0, #1
 80025ea:	fa00 f202 	lsl.w	r2, r0, r2
 80025ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop
 8002600:	e000e100 	.word	0xe000e100

08002604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	6039      	str	r1, [r7, #0]
 800260e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002614:	2b00      	cmp	r3, #0
 8002616:	db0a      	blt.n	800262e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	490c      	ldr	r1, [pc, #48]	; (8002650 <__NVIC_SetPriority+0x4c>)
 800261e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002622:	0112      	lsls	r2, r2, #4
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	440b      	add	r3, r1
 8002628:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800262c:	e00a      	b.n	8002644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4908      	ldr	r1, [pc, #32]	; (8002654 <__NVIC_SetPriority+0x50>)
 8002634:	79fb      	ldrb	r3, [r7, #7]
 8002636:	f003 030f 	and.w	r3, r3, #15
 800263a:	3b04      	subs	r3, #4
 800263c:	0112      	lsls	r2, r2, #4
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	440b      	add	r3, r1
 8002642:	761a      	strb	r2, [r3, #24]
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000e100 	.word	0xe000e100
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002658:	b480      	push	{r7}
 800265a:	b089      	sub	sp, #36	; 0x24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	60b9      	str	r1, [r7, #8]
 8002662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f1c3 0307 	rsb	r3, r3, #7
 8002672:	2b04      	cmp	r3, #4
 8002674:	bf28      	it	cs
 8002676:	2304      	movcs	r3, #4
 8002678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3304      	adds	r3, #4
 800267e:	2b06      	cmp	r3, #6
 8002680:	d902      	bls.n	8002688 <NVIC_EncodePriority+0x30>
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3b03      	subs	r3, #3
 8002686:	e000      	b.n	800268a <NVIC_EncodePriority+0x32>
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800268c:	f04f 32ff 	mov.w	r2, #4294967295
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	43da      	mvns	r2, r3
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	401a      	ands	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026a0:	f04f 31ff 	mov.w	r1, #4294967295
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	fa01 f303 	lsl.w	r3, r1, r3
 80026aa:	43d9      	mvns	r1, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	4313      	orrs	r3, r2
         );
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3724      	adds	r7, #36	; 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
	...

080026c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026d0:	d301      	bcc.n	80026d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026d2:	2301      	movs	r3, #1
 80026d4:	e00f      	b.n	80026f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <SysTick_Config+0x40>)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3b01      	subs	r3, #1
 80026dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026de:	210f      	movs	r1, #15
 80026e0:	f04f 30ff 	mov.w	r0, #4294967295
 80026e4:	f7ff ff8e 	bl	8002604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e8:	4b05      	ldr	r3, [pc, #20]	; (8002700 <SysTick_Config+0x40>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <SysTick_Config+0x40>)
 80026f0:	2207      	movs	r2, #7
 80026f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	e000e010 	.word	0xe000e010

08002704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff ff29 	bl	8002564 <__NVIC_SetPriorityGrouping>
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800271a:	b580      	push	{r7, lr}
 800271c:	b086      	sub	sp, #24
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800272c:	f7ff ff3e 	bl	80025ac <__NVIC_GetPriorityGrouping>
 8002730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68b9      	ldr	r1, [r7, #8]
 8002736:	6978      	ldr	r0, [r7, #20]
 8002738:	f7ff ff8e 	bl	8002658 <NVIC_EncodePriority>
 800273c:	4602      	mov	r2, r0
 800273e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff5d 	bl	8002604 <__NVIC_SetPriority>
}
 800274a:	bf00      	nop
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800275c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002760:	4618      	mov	r0, r3
 8002762:	f7ff ff31 	bl	80025c8 <__NVIC_EnableIRQ>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ffa2 	bl	80026c0 <SysTick_Config>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b084      	sub	sp, #16
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002794:	f7ff feb6 	bl	8002504 <HAL_GetTick>
 8002798:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d008      	beq.n	80027b8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2280      	movs	r2, #128	; 0x80
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e052      	b.n	800285e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0216 	bic.w	r2, r2, #22
 80027c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	695a      	ldr	r2, [r3, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d103      	bne.n	80027e8 <HAL_DMA_Abort+0x62>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0208 	bic.w	r2, r2, #8
 80027f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0201 	bic.w	r2, r2, #1
 8002806:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002808:	e013      	b.n	8002832 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800280a:	f7ff fe7b 	bl	8002504 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b05      	cmp	r3, #5
 8002816:	d90c      	bls.n	8002832 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2203      	movs	r2, #3
 8002822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e015      	b.n	800285e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1e4      	bne.n	800280a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	223f      	movs	r2, #63	; 0x3f
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d004      	beq.n	8002884 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e00c      	b.n	800289e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2205      	movs	r2, #5
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f022 0201 	bic.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e16b      	b.n	8002ba0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c8:	2201      	movs	r2, #1
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	f040 815a 	bne.w	8002b9a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d005      	beq.n	80028fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d130      	bne.n	8002960 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	005b      	lsls	r3, r3, #1
 8002908:	2203      	movs	r2, #3
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002934:	2201      	movs	r2, #1
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	69ba      	ldr	r2, [r7, #24]
 8002940:	4013      	ands	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	091b      	lsrs	r3, r3, #4
 800294a:	f003 0201 	and.w	r2, r3, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b03      	cmp	r3, #3
 800296a:	d017      	beq.n	800299c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d123      	bne.n	80029f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	08da      	lsrs	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3208      	adds	r2, #8
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	08da      	lsrs	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3208      	adds	r2, #8
 80029ea:	69b9      	ldr	r1, [r7, #24]
 80029ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80b4 	beq.w	8002b9a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b60      	ldr	r3, [pc, #384]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a5f      	ldr	r2, [pc, #380]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b5d      	ldr	r3, [pc, #372]	; (8002bb8 <HAL_GPIO_Init+0x30c>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a4e:	4a5b      	ldr	r2, [pc, #364]	; (8002bbc <HAL_GPIO_Init+0x310>)
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	089b      	lsrs	r3, r3, #2
 8002a54:	3302      	adds	r3, #2
 8002a56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a52      	ldr	r2, [pc, #328]	; (8002bc0 <HAL_GPIO_Init+0x314>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02b      	beq.n	8002ad2 <HAL_GPIO_Init+0x226>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a51      	ldr	r2, [pc, #324]	; (8002bc4 <HAL_GPIO_Init+0x318>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d025      	beq.n	8002ace <HAL_GPIO_Init+0x222>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a50      	ldr	r2, [pc, #320]	; (8002bc8 <HAL_GPIO_Init+0x31c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01f      	beq.n	8002aca <HAL_GPIO_Init+0x21e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4f      	ldr	r2, [pc, #316]	; (8002bcc <HAL_GPIO_Init+0x320>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d019      	beq.n	8002ac6 <HAL_GPIO_Init+0x21a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4e      	ldr	r2, [pc, #312]	; (8002bd0 <HAL_GPIO_Init+0x324>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <HAL_GPIO_Init+0x216>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <HAL_GPIO_Init+0x328>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00d      	beq.n	8002abe <HAL_GPIO_Init+0x212>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a4c      	ldr	r2, [pc, #304]	; (8002bd8 <HAL_GPIO_Init+0x32c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <HAL_GPIO_Init+0x20e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a4b      	ldr	r2, [pc, #300]	; (8002bdc <HAL_GPIO_Init+0x330>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d101      	bne.n	8002ab6 <HAL_GPIO_Init+0x20a>
 8002ab2:	2307      	movs	r3, #7
 8002ab4:	e00e      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ab6:	2308      	movs	r3, #8
 8002ab8:	e00c      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002aba:	2306      	movs	r3, #6
 8002abc:	e00a      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002abe:	2305      	movs	r3, #5
 8002ac0:	e008      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ac2:	2304      	movs	r3, #4
 8002ac4:	e006      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e004      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002aca:	2302      	movs	r3, #2
 8002acc:	e002      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <HAL_GPIO_Init+0x228>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	69fa      	ldr	r2, [r7, #28]
 8002ad6:	f002 0203 	and.w	r2, r2, #3
 8002ada:	0092      	lsls	r2, r2, #2
 8002adc:	4093      	lsls	r3, r2
 8002ade:	69ba      	ldr	r2, [r7, #24]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ae4:	4935      	ldr	r1, [pc, #212]	; (8002bbc <HAL_GPIO_Init+0x310>)
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	089b      	lsrs	r3, r3, #2
 8002aea:	3302      	adds	r3, #2
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002af2:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	43db      	mvns	r3, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4013      	ands	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b16:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b1c:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	69ba      	ldr	r2, [r7, #24]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d003      	beq.n	8002b40 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b40:	4a27      	ldr	r2, [pc, #156]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b6a:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b70:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	43db      	mvns	r3, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b94:	4a12      	ldr	r2, [pc, #72]	; (8002be0 <HAL_GPIO_Init+0x334>)
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b0f      	cmp	r3, #15
 8002ba4:	f67f ae90 	bls.w	80028c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ba8:	bf00      	nop
 8002baa:	bf00      	nop
 8002bac:	3724      	adds	r7, #36	; 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40013800 	.word	0x40013800
 8002bc0:	40020000 	.word	0x40020000
 8002bc4:	40020400 	.word	0x40020400
 8002bc8:	40020800 	.word	0x40020800
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	40021400 	.word	0x40021400
 8002bd8:	40021800 	.word	0x40021800
 8002bdc:	40021c00 	.word	0x40021c00
 8002be0:	40013c00 	.word	0x40013c00

08002be4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	88fb      	ldrh	r3, [r7, #6]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d006      	beq.n	8002c08 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bfa:	4a05      	ldr	r2, [pc, #20]	; (8002c10 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bfc:	88fb      	ldrh	r3, [r7, #6]
 8002bfe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 f806 	bl	8002c14 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40013c00 	.word	0x40013c00

08002c14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e12b      	b.n	8002e96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff fa16 	bl	8002084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	; 0x24
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 0201 	bic.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c90:	f001 fbfc 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8002c94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4a81      	ldr	r2, [pc, #516]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d807      	bhi.n	8002cb0 <HAL_I2C_Init+0x84>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a80      	ldr	r2, [pc, #512]	; (8002ea4 <HAL_I2C_Init+0x278>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	bf94      	ite	ls
 8002ca8:	2301      	movls	r3, #1
 8002caa:	2300      	movhi	r3, #0
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	e006      	b.n	8002cbe <HAL_I2C_Init+0x92>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4a7d      	ldr	r2, [pc, #500]	; (8002ea8 <HAL_I2C_Init+0x27c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	bf94      	ite	ls
 8002cb8:	2301      	movls	r3, #1
 8002cba:	2300      	movhi	r3, #0
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e0e7      	b.n	8002e96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4a78      	ldr	r2, [pc, #480]	; (8002eac <HAL_I2C_Init+0x280>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	0c9b      	lsrs	r3, r3, #18
 8002cd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	6a1b      	ldr	r3, [r3, #32]
 8002cec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	4a6a      	ldr	r2, [pc, #424]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d802      	bhi.n	8002d00 <HAL_I2C_Init+0xd4>
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	e009      	b.n	8002d14 <HAL_I2C_Init+0xe8>
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	4a69      	ldr	r2, [pc, #420]	; (8002eb0 <HAL_I2C_Init+0x284>)
 8002d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d10:	099b      	lsrs	r3, r3, #6
 8002d12:	3301      	adds	r3, #1
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6812      	ldr	r2, [r2, #0]
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	495c      	ldr	r1, [pc, #368]	; (8002ea0 <HAL_I2C_Init+0x274>)
 8002d30:	428b      	cmp	r3, r1
 8002d32:	d819      	bhi.n	8002d68 <HAL_I2C_Init+0x13c>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e59      	subs	r1, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d42:	1c59      	adds	r1, r3, #1
 8002d44:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d48:	400b      	ands	r3, r1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_I2C_Init+0x138>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1e59      	subs	r1, r3, #1
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d62:	e051      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002d64:	2304      	movs	r3, #4
 8002d66:	e04f      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d111      	bne.n	8002d94 <HAL_I2C_Init+0x168>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	1e58      	subs	r0, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6859      	ldr	r1, [r3, #4]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	440b      	add	r3, r1
 8002d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d82:	3301      	adds	r3, #1
 8002d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	bf0c      	ite	eq
 8002d8c:	2301      	moveq	r3, #1
 8002d8e:	2300      	movne	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	e012      	b.n	8002dba <HAL_I2C_Init+0x18e>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1e58      	subs	r0, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6859      	ldr	r1, [r3, #4]
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	440b      	add	r3, r1
 8002da2:	0099      	lsls	r1, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002daa:	3301      	adds	r3, #1
 8002dac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_I2C_Init+0x196>
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e022      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10e      	bne.n	8002de8 <HAL_I2C_Init+0x1bc>
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1e58      	subs	r0, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	005b      	lsls	r3, r3, #1
 8002dd6:	440b      	add	r3, r1
 8002dd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de6:	e00f      	b.n	8002e08 <HAL_I2C_Init+0x1dc>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e58      	subs	r0, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	0099      	lsls	r1, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	6809      	ldr	r1, [r1, #0]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	69da      	ldr	r2, [r3, #28]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6911      	ldr	r1, [r2, #16]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	68d2      	ldr	r2, [r2, #12]
 8002e42:	4311      	orrs	r1, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f042 0201 	orr.w	r2, r2, #1
 8002e76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	000186a0 	.word	0x000186a0
 8002ea4:	001e847f 	.word	0x001e847f
 8002ea8:	003d08ff 	.word	0x003d08ff
 8002eac:	431bde83 	.word	0x431bde83
 8002eb0:	10624dd3 	.word	0x10624dd3

08002eb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	4608      	mov	r0, r1
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	817b      	strh	r3, [r7, #10]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	813b      	strh	r3, [r7, #8]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ece:	f7ff fb19 	bl	8002504 <HAL_GetTick>
 8002ed2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	f040 80d9 	bne.w	8003094 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2319      	movs	r3, #25
 8002ee8:	2201      	movs	r2, #1
 8002eea:	496d      	ldr	r1, [pc, #436]	; (80030a0 <HAL_I2C_Mem_Write+0x1ec>)
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fc7f 	bl	80037f0 <I2C_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ef8:	2302      	movs	r3, #2
 8002efa:	e0cc      	b.n	8003096 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_I2C_Mem_Write+0x56>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e0c5      	b.n	8003096 <HAL_I2C_Mem_Write+0x1e2>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d007      	beq.n	8002f30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2221      	movs	r2, #33	; 0x21
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	6a3a      	ldr	r2, [r7, #32]
 8002f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4a4d      	ldr	r2, [pc, #308]	; (80030a4 <HAL_I2C_Mem_Write+0x1f0>)
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f72:	88f8      	ldrh	r0, [r7, #6]
 8002f74:	893a      	ldrh	r2, [r7, #8]
 8002f76:	8979      	ldrh	r1, [r7, #10]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	4603      	mov	r3, r0
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fab6 	bl	80034f4 <I2C_RequestMemoryWrite>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d052      	beq.n	8003034 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e081      	b.n	8003096 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 fd00 	bl	800399c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00d      	beq.n	8002fbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2b04      	cmp	r3, #4
 8002fa8:	d107      	bne.n	8002fba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e06b      	b.n	8003096 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	f003 0304 	and.w	r3, r3, #4
 8002ff8:	2b04      	cmp	r3, #4
 8002ffa:	d11b      	bne.n	8003034 <HAL_I2C_Mem_Write+0x180>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d017      	beq.n	8003034 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302a:	b29b      	uxth	r3, r3
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1aa      	bne.n	8002f92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fcec 	bl	8003a1e <I2C_WaitOnBTFFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00d      	beq.n	8003068 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	2b04      	cmp	r3, #4
 8003052:	d107      	bne.n	8003064 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003062:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e016      	b.n	8003096 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3718      	adds	r7, #24
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	00100002 	.word	0x00100002
 80030a4:	ffff0000 	.word	0xffff0000

080030a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08c      	sub	sp, #48	; 0x30
 80030ac:	af02      	add	r7, sp, #8
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	4608      	mov	r0, r1
 80030b2:	4611      	mov	r1, r2
 80030b4:	461a      	mov	r2, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	817b      	strh	r3, [r7, #10]
 80030ba:	460b      	mov	r3, r1
 80030bc:	813b      	strh	r3, [r7, #8]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030c2:	f7ff fa1f 	bl	8002504 <HAL_GetTick>
 80030c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	f040 8208 	bne.w	80034e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2319      	movs	r3, #25
 80030dc:	2201      	movs	r2, #1
 80030de:	497b      	ldr	r1, [pc, #492]	; (80032cc <HAL_I2C_Mem_Read+0x224>)
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fb85 	bl	80037f0 <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
 80030ee:	e1fb      	b.n	80034e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_I2C_Mem_Read+0x56>
 80030fa:	2302      	movs	r3, #2
 80030fc:	e1f4      	b.n	80034e8 <HAL_I2C_Mem_Read+0x440>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b01      	cmp	r3, #1
 8003112:	d007      	beq.n	8003124 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f042 0201 	orr.w	r2, r2, #1
 8003122:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003132:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2222      	movs	r2, #34	; 0x22
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2240      	movs	r2, #64	; 0x40
 8003140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003154:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4a5b      	ldr	r2, [pc, #364]	; (80032d0 <HAL_I2C_Mem_Read+0x228>)
 8003164:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003166:	88f8      	ldrh	r0, [r7, #6]
 8003168:	893a      	ldrh	r2, [r7, #8]
 800316a:	8979      	ldrh	r1, [r7, #10]
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	9300      	str	r3, [sp, #0]
 8003174:	4603      	mov	r3, r0
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f000 fa52 	bl	8003620 <I2C_RequestMemoryRead>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e1b0      	b.n	80034e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318a:	2b00      	cmp	r3, #0
 800318c:	d113      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318e:	2300      	movs	r3, #0
 8003190:	623b      	str	r3, [r7, #32]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	623b      	str	r3, [r7, #32]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	623b      	str	r3, [r7, #32]
 80031a2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e184      	b.n	80034c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d11b      	bne.n	80031f6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	61fb      	str	r3, [r7, #28]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	e164      	b.n	80034c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d11b      	bne.n	8003236 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	61bb      	str	r3, [r7, #24]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	e144      	b.n	80034c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003236:	2300      	movs	r3, #0
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800324c:	e138      	b.n	80034c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003252:	2b03      	cmp	r3, #3
 8003254:	f200 80f1 	bhi.w	800343a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325c:	2b01      	cmp	r3, #1
 800325e:	d123      	bne.n	80032a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003262:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003264:	68f8      	ldr	r0, [r7, #12]
 8003266:	f000 fc1b 	bl	8003aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e139      	b.n	80034e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	691a      	ldr	r2, [r3, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	3b01      	subs	r3, #1
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032a6:	e10b      	b.n	80034c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d14e      	bne.n	800334e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032b6:	2200      	movs	r2, #0
 80032b8:	4906      	ldr	r1, [pc, #24]	; (80032d4 <HAL_I2C_Mem_Read+0x22c>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 fa98 	bl	80037f0 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d008      	beq.n	80032d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e10e      	b.n	80034e8 <HAL_I2C_Mem_Read+0x440>
 80032ca:	bf00      	nop
 80032cc:	00100002 	.word	0x00100002
 80032d0:	ffff0000 	.word	0xffff0000
 80032d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	1c5a      	adds	r2, r3, #1
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	3b01      	subs	r3, #1
 8003314:	b29a      	uxth	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	1c5a      	adds	r2, r3, #1
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003336:	3b01      	subs	r3, #1
 8003338:	b29a      	uxth	r2, r3
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003342:	b29b      	uxth	r3, r3
 8003344:	3b01      	subs	r3, #1
 8003346:	b29a      	uxth	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800334c:	e0b8      	b.n	80034c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800334e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003354:	2200      	movs	r2, #0
 8003356:	4966      	ldr	r1, [pc, #408]	; (80034f0 <HAL_I2C_Mem_Read+0x448>)
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fa49 	bl	80037f0 <I2C_WaitOnFlagUntilTimeout>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e0bf      	b.n	80034e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003376:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691a      	ldr	r2, [r3, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b0:	2200      	movs	r2, #0
 80033b2:	494f      	ldr	r1, [pc, #316]	; (80034f0 <HAL_I2C_Mem_Read+0x448>)
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fa1b 	bl	80037f0 <I2C_WaitOnFlagUntilTimeout>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e091      	b.n	80034e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691a      	ldr	r2, [r3, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	3b01      	subs	r3, #1
 8003400:	b29a      	uxth	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	691a      	ldr	r2, [r3, #16]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	b2d2      	uxtb	r2, r2
 8003412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	1c5a      	adds	r2, r3, #1
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342e:	b29b      	uxth	r3, r3
 8003430:	3b01      	subs	r3, #1
 8003432:	b29a      	uxth	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003438:	e042      	b.n	80034c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fb2e 	bl	8003aa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e04c      	b.n	80034e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	691a      	ldr	r2, [r3, #16]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d118      	bne.n	80034c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	691a      	ldr	r2, [r3, #16]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	b2d2      	uxtb	r2, r2
 800349a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	1c5a      	adds	r2, r3, #1
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	3b01      	subs	r3, #1
 80034ba:	b29a      	uxth	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f47f aec2 	bne.w	800324e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034e2:	2300      	movs	r3, #0
 80034e4:	e000      	b.n	80034e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034e6:	2302      	movs	r3, #2
  }
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3728      	adds	r7, #40	; 0x28
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	00010004 	.word	0x00010004

080034f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	4608      	mov	r0, r1
 80034fe:	4611      	mov	r1, r2
 8003500:	461a      	mov	r2, r3
 8003502:	4603      	mov	r3, r0
 8003504:	817b      	strh	r3, [r7, #10]
 8003506:	460b      	mov	r3, r1
 8003508:	813b      	strh	r3, [r7, #8]
 800350a:	4613      	mov	r3, r2
 800350c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800351c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	2200      	movs	r2, #0
 8003526:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 f960 	bl	80037f0 <I2C_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00d      	beq.n	8003552 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003544:	d103      	bne.n	800354e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800354c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e05f      	b.n	8003612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	6a3a      	ldr	r2, [r7, #32]
 8003566:	492d      	ldr	r1, [pc, #180]	; (800361c <I2C_RequestMemoryWrite+0x128>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f998 	bl	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e04c      	b.n	8003612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	617b      	str	r3, [r7, #20]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	617b      	str	r3, [r7, #20]
 800358c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003590:	6a39      	ldr	r1, [r7, #32]
 8003592:	68f8      	ldr	r0, [r7, #12]
 8003594:	f000 fa02 	bl	800399c <I2C_WaitOnTXEFlagUntilTimeout>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00d      	beq.n	80035ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d107      	bne.n	80035b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e02b      	b.n	8003612 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d105      	bne.n	80035cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035c0:	893b      	ldrh	r3, [r7, #8]
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	e021      	b.n	8003610 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035cc:	893b      	ldrh	r3, [r7, #8]
 80035ce:	0a1b      	lsrs	r3, r3, #8
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	6a39      	ldr	r1, [r7, #32]
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 f9dc 	bl	800399c <I2C_WaitOnTXEFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00d      	beq.n	8003606 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d107      	bne.n	8003602 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e005      	b.n	8003612 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003606:	893b      	ldrh	r3, [r7, #8]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	00010002 	.word	0x00010002

08003620 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b088      	sub	sp, #32
 8003624:	af02      	add	r7, sp, #8
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	4608      	mov	r0, r1
 800362a:	4611      	mov	r1, r2
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	817b      	strh	r3, [r7, #10]
 8003632:	460b      	mov	r3, r1
 8003634:	813b      	strh	r3, [r7, #8]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003648:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003658:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	2200      	movs	r2, #0
 8003662:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f000 f8c2 	bl	80037f0 <I2C_WaitOnFlagUntilTimeout>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00d      	beq.n	800368e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003680:	d103      	bne.n	800368a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003688:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e0aa      	b.n	80037e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800368e:	897b      	ldrh	r3, [r7, #10]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800369c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	6a3a      	ldr	r2, [r7, #32]
 80036a2:	4952      	ldr	r1, [pc, #328]	; (80037ec <I2C_RequestMemoryRead+0x1cc>)
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 f8fa 	bl	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e097      	b.n	80037e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036cc:	6a39      	ldr	r1, [r7, #32]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f964 	bl	800399c <I2C_WaitOnTXEFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00d      	beq.n	80036f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	2b04      	cmp	r3, #4
 80036e0:	d107      	bne.n	80036f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e076      	b.n	80037e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d105      	bne.n	8003708 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036fc:	893b      	ldrh	r3, [r7, #8]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	611a      	str	r2, [r3, #16]
 8003706:	e021      	b.n	800374c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003708:	893b      	ldrh	r3, [r7, #8]
 800370a:	0a1b      	lsrs	r3, r3, #8
 800370c:	b29b      	uxth	r3, r3
 800370e:	b2da      	uxtb	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003718:	6a39      	ldr	r1, [r7, #32]
 800371a:	68f8      	ldr	r0, [r7, #12]
 800371c:	f000 f93e 	bl	800399c <I2C_WaitOnTXEFlagUntilTimeout>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00d      	beq.n	8003742 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	2b04      	cmp	r3, #4
 800372c:	d107      	bne.n	800373e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e050      	b.n	80037e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003742:	893b      	ldrh	r3, [r7, #8]
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	6a39      	ldr	r1, [r7, #32]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f923 	bl	800399c <I2C_WaitOnTXEFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00d      	beq.n	8003778 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	2b04      	cmp	r3, #4
 8003762:	d107      	bne.n	8003774 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e035      	b.n	80037e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003786:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	2200      	movs	r2, #0
 8003790:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f82b 	bl	80037f0 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00d      	beq.n	80037bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ae:	d103      	bne.n	80037b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e013      	b.n	80037e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037bc:	897b      	ldrh	r3, [r7, #10]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	b2da      	uxtb	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ce:	6a3a      	ldr	r2, [r7, #32]
 80037d0:	4906      	ldr	r1, [pc, #24]	; (80037ec <I2C_RequestMemoryRead+0x1cc>)
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f000 f863 	bl	800389e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e000      	b.n	80037e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	00010002 	.word	0x00010002

080037f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	4613      	mov	r3, r2
 80037fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003800:	e025      	b.n	800384e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d021      	beq.n	800384e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fe fe7b 	bl	8002504 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnFlagUntilTimeout+0x30>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d116      	bne.n	800384e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	f043 0220 	orr.w	r2, r3, #32
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e023      	b.n	8003896 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d10d      	bne.n	8003874 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	43da      	mvns	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4013      	ands	r3, r2
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	bf0c      	ite	eq
 800386a:	2301      	moveq	r3, #1
 800386c:	2300      	movne	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	e00c      	b.n	800388e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699b      	ldr	r3, [r3, #24]
 800387a:	43da      	mvns	r2, r3
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4013      	ands	r3, r2
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	b2db      	uxtb	r3, r3
 800388c:	461a      	mov	r2, r3
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	429a      	cmp	r2, r3
 8003892:	d0b6      	beq.n	8003802 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3710      	adds	r7, #16
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	607a      	str	r2, [r7, #4]
 80038aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038ac:	e051      	b.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038bc:	d123      	bne.n	8003906 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	f043 0204 	orr.w	r2, r3, #4
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e046      	b.n	8003994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d021      	beq.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800390e:	f7fe fdf9 	bl	8002504 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d116      	bne.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	f043 0220 	orr.w	r2, r3, #32
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e020      	b.n	8003994 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b01      	cmp	r3, #1
 800395a:	d10c      	bne.n	8003976 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	43da      	mvns	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	4013      	ands	r3, r2
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	bf14      	ite	ne
 800396e:	2301      	movne	r3, #1
 8003970:	2300      	moveq	r3, #0
 8003972:	b2db      	uxtb	r3, r3
 8003974:	e00b      	b.n	800398e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	43da      	mvns	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4013      	ands	r3, r2
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d18d      	bne.n	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a8:	e02d      	b.n	8003a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f8ce 	bl	8003b4c <I2C_IsAcknowledgeFailed>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e02d      	b.n	8003a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d021      	beq.n	8003a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c2:	f7fe fd9f 	bl	8002504 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d302      	bcc.n	80039d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d116      	bne.n	8003a06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2220      	movs	r2, #32
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	f043 0220 	orr.w	r2, r3, #32
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e007      	b.n	8003a16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a10:	2b80      	cmp	r3, #128	; 0x80
 8003a12:	d1ca      	bne.n	80039aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	60b9      	str	r1, [r7, #8]
 8003a28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a2a:	e02d      	b.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f88d 	bl	8003b4c <I2C_IsAcknowledgeFailed>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e02d      	b.n	8003a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a42:	d021      	beq.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a44:	f7fe fd5e 	bl	8002504 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d302      	bcc.n	8003a5a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d116      	bne.n	8003a88 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e007      	b.n	8003a98 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d1ca      	bne.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aac:	e042      	b.n	8003b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f003 0310 	and.w	r3, r3, #16
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d119      	bne.n	8003af0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f06f 0210 	mvn.w	r2, #16
 8003ac4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e029      	b.n	8003b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af0:	f7fe fd08 	bl	8002504 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d302      	bcc.n	8003b06 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d116      	bne.n	8003b34 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e007      	b.n	8003b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b3e:	2b40      	cmp	r3, #64	; 0x40
 8003b40:	d1b5      	bne.n	8003aae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b62:	d11b      	bne.n	8003b9c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b6c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f043 0204 	orr.w	r2, r3, #4
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e267      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d075      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bca:	4b88      	ldr	r3, [pc, #544]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d00c      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bd6:	4b85      	ldr	r3, [pc, #532]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d112      	bne.n	8003c08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003be2:	4b82      	ldr	r3, [pc, #520]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bee:	d10b      	bne.n	8003c08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf0:	4b7e      	ldr	r3, [pc, #504]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d05b      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x108>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d157      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e242      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c10:	d106      	bne.n	8003c20 <HAL_RCC_OscConfig+0x74>
 8003c12:	4b76      	ldr	r3, [pc, #472]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a75      	ldr	r2, [pc, #468]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e01d      	b.n	8003c5c <HAL_RCC_OscConfig+0xb0>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c28:	d10c      	bne.n	8003c44 <HAL_RCC_OscConfig+0x98>
 8003c2a:	4b70      	ldr	r3, [pc, #448]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a6f      	ldr	r2, [pc, #444]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	4b6d      	ldr	r3, [pc, #436]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a6c      	ldr	r2, [pc, #432]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c40:	6013      	str	r3, [r2, #0]
 8003c42:	e00b      	b.n	8003c5c <HAL_RCC_OscConfig+0xb0>
 8003c44:	4b69      	ldr	r3, [pc, #420]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a68      	ldr	r2, [pc, #416]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	4b66      	ldr	r3, [pc, #408]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a65      	ldr	r2, [pc, #404]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7fe fc4e 	bl	8002504 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fc4a 	bl	8002504 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b64      	cmp	r3, #100	; 0x64
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e207      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c7e:	4b5b      	ldr	r3, [pc, #364]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0xc0>
 8003c8a:	e014      	b.n	8003cb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8c:	f7fe fc3a 	bl	8002504 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c92:	e008      	b.n	8003ca6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c94:	f7fe fc36 	bl	8002504 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	2b64      	cmp	r3, #100	; 0x64
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e1f3      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ca6:	4b51      	ldr	r3, [pc, #324]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1f0      	bne.n	8003c94 <HAL_RCC_OscConfig+0xe8>
 8003cb2:	e000      	b.n	8003cb6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d063      	beq.n	8003d8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cc2:	4b4a      	ldr	r3, [pc, #296]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f003 030c 	and.w	r3, r3, #12
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cce:	4b47      	ldr	r3, [pc, #284]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cd6:	2b08      	cmp	r3, #8
 8003cd8:	d11c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cda:	4b44      	ldr	r3, [pc, #272]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d116      	bne.n	8003d14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ce6:	4b41      	ldr	r3, [pc, #260]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d005      	beq.n	8003cfe <HAL_RCC_OscConfig+0x152>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e1c7      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfe:	4b3b      	ldr	r3, [pc, #236]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	00db      	lsls	r3, r3, #3
 8003d0c:	4937      	ldr	r1, [pc, #220]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	e03a      	b.n	8003d8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d020      	beq.n	8003d5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d1c:	4b34      	ldr	r3, [pc, #208]	; (8003df0 <HAL_RCC_OscConfig+0x244>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fe fbef 	bl	8002504 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d28:	e008      	b.n	8003d3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2a:	f7fe fbeb 	bl	8002504 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d901      	bls.n	8003d3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e1a8      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d3c:	4b2b      	ldr	r3, [pc, #172]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f0      	beq.n	8003d2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d48:	4b28      	ldr	r3, [pc, #160]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4925      	ldr	r1, [pc, #148]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	600b      	str	r3, [r1, #0]
 8003d5c:	e015      	b.n	8003d8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d5e:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_RCC_OscConfig+0x244>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fe fbce 	bl	8002504 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fbca 	bl	8002504 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e187      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d7e:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d036      	beq.n	8003e04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d016      	beq.n	8003dcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <HAL_RCC_OscConfig+0x248>)
 8003da0:	2201      	movs	r2, #1
 8003da2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da4:	f7fe fbae 	bl	8002504 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dac:	f7fe fbaa 	bl	8002504 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e167      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCC_OscConfig+0x240>)
 8003dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d0f0      	beq.n	8003dac <HAL_RCC_OscConfig+0x200>
 8003dca:	e01b      	b.n	8003e04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dcc:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_OscConfig+0x248>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd2:	f7fe fb97 	bl	8002504 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	e00e      	b.n	8003df8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dda:	f7fe fb93 	bl	8002504 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d907      	bls.n	8003df8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e150      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
 8003dec:	40023800 	.word	0x40023800
 8003df0:	42470000 	.word	0x42470000
 8003df4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df8:	4b88      	ldr	r3, [pc, #544]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1ea      	bne.n	8003dda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8097 	beq.w	8003f40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e12:	2300      	movs	r3, #0
 8003e14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e16:	4b81      	ldr	r3, [pc, #516]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10f      	bne.n	8003e42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b7d      	ldr	r3, [pc, #500]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	4a7c      	ldr	r2, [pc, #496]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e30:	6413      	str	r3, [r2, #64]	; 0x40
 8003e32:	4b7a      	ldr	r3, [pc, #488]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e42:	4b77      	ldr	r3, [pc, #476]	; (8004020 <HAL_RCC_OscConfig+0x474>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d118      	bne.n	8003e80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e4e:	4b74      	ldr	r3, [pc, #464]	; (8004020 <HAL_RCC_OscConfig+0x474>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a73      	ldr	r2, [pc, #460]	; (8004020 <HAL_RCC_OscConfig+0x474>)
 8003e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e5a:	f7fe fb53 	bl	8002504 <HAL_GetTick>
 8003e5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e60:	e008      	b.n	8003e74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e62:	f7fe fb4f 	bl	8002504 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d901      	bls.n	8003e74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e10c      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e74:	4b6a      	ldr	r3, [pc, #424]	; (8004020 <HAL_RCC_OscConfig+0x474>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d0f0      	beq.n	8003e62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d106      	bne.n	8003e96 <HAL_RCC_OscConfig+0x2ea>
 8003e88:	4b64      	ldr	r3, [pc, #400]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8c:	4a63      	ldr	r2, [pc, #396]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	6713      	str	r3, [r2, #112]	; 0x70
 8003e94:	e01c      	b.n	8003ed0 <HAL_RCC_OscConfig+0x324>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b05      	cmp	r3, #5
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x30c>
 8003e9e:	4b5f      	ldr	r3, [pc, #380]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea2:	4a5e      	ldr	r2, [pc, #376]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003ea4:	f043 0304 	orr.w	r3, r3, #4
 8003ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eaa:	4b5c      	ldr	r3, [pc, #368]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eae:	4a5b      	ldr	r2, [pc, #364]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCC_OscConfig+0x324>
 8003eb8:	4b58      	ldr	r3, [pc, #352]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a57      	ldr	r2, [pc, #348]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec4:	4b55      	ldr	r3, [pc, #340]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec8:	4a54      	ldr	r2, [pc, #336]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003eca:	f023 0304 	bic.w	r3, r3, #4
 8003ece:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d015      	beq.n	8003f04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed8:	f7fe fb14 	bl	8002504 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ede:	e00a      	b.n	8003ef6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ee0:	f7fe fb10 	bl	8002504 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d901      	bls.n	8003ef6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ef2:	2303      	movs	r3, #3
 8003ef4:	e0cb      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef6:	4b49      	ldr	r3, [pc, #292]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0ee      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x334>
 8003f02:	e014      	b.n	8003f2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f04:	f7fe fafe 	bl	8002504 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0c:	f7fe fafa 	bl	8002504 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e0b5      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f22:	4b3e      	ldr	r3, [pc, #248]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1ee      	bne.n	8003f0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f2e:	7dfb      	ldrb	r3, [r7, #23]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f34:	4b39      	ldr	r3, [pc, #228]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	4a38      	ldr	r2, [pc, #224]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80a1 	beq.w	800408c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f4a:	4b34      	ldr	r3, [pc, #208]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d05c      	beq.n	8004010 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d141      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f5e:	4b31      	ldr	r3, [pc, #196]	; (8004024 <HAL_RCC_OscConfig+0x478>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f64:	f7fe face 	bl	8002504 <HAL_GetTick>
 8003f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f6a:	e008      	b.n	8003f7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f6c:	f7fe faca 	bl	8002504 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d901      	bls.n	8003f7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e087      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7e:	4b27      	ldr	r3, [pc, #156]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69da      	ldr	r2, [r3, #28]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	019b      	lsls	r3, r3, #6
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	041b      	lsls	r3, r3, #16
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fac:	061b      	lsls	r3, r3, #24
 8003fae:	491b      	ldr	r1, [pc, #108]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x478>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fe faa3 	bl	8002504 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fe fa9f 	bl	8002504 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e05c      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x416>
 8003fe0:	e054      	b.n	800408c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b10      	ldr	r3, [pc, #64]	; (8004024 <HAL_RCC_OscConfig+0x478>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7fe fa8c 	bl	8002504 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fe fa88 	bl	8002504 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e045      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	4b06      	ldr	r3, [pc, #24]	; (800401c <HAL_RCC_OscConfig+0x470>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x444>
 800400e:	e03d      	b.n	800408c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e038      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
 800401c:	40023800 	.word	0x40023800
 8004020:	40007000 	.word	0x40007000
 8004024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004028:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_RCC_OscConfig+0x4ec>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d028      	beq.n	8004088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d121      	bne.n	8004088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d11a      	bne.n	8004088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800405e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004060:	4293      	cmp	r3, r2
 8004062:	d111      	bne.n	8004088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	3b01      	subs	r3, #1
 8004072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d107      	bne.n	8004088 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d001      	beq.n	800408c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e000      	b.n	800408e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800

0800409c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e0cc      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040b0:	4b68      	ldr	r3, [pc, #416]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d90c      	bls.n	80040d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040be:	4b65      	ldr	r3, [pc, #404]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040c6:	4b63      	ldr	r3, [pc, #396]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e0b8      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0304 	and.w	r3, r3, #4
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d005      	beq.n	80040fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f0:	4b59      	ldr	r3, [pc, #356]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4a58      	ldr	r2, [pc, #352]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0308 	and.w	r3, r3, #8
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004108:	4b53      	ldr	r3, [pc, #332]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a52      	ldr	r2, [pc, #328]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004112:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004114:	4b50      	ldr	r3, [pc, #320]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	494d      	ldr	r1, [pc, #308]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b00      	cmp	r3, #0
 8004130:	d044      	beq.n	80041bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413a:	4b47      	ldr	r3, [pc, #284]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d119      	bne.n	800417a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e07f      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d003      	beq.n	800415a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004156:	2b03      	cmp	r3, #3
 8004158:	d107      	bne.n	800416a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415a:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004162:	2b00      	cmp	r3, #0
 8004164:	d109      	bne.n	800417a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e06f      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800416a:	4b3b      	ldr	r3, [pc, #236]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d101      	bne.n	800417a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e067      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800417a:	4b37      	ldr	r3, [pc, #220]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f023 0203 	bic.w	r2, r3, #3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4934      	ldr	r1, [pc, #208]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800418c:	f7fe f9ba 	bl	8002504 <HAL_GetTick>
 8004190:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004192:	e00a      	b.n	80041aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004194:	f7fe f9b6 	bl	8002504 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e04f      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041aa:	4b2b      	ldr	r3, [pc, #172]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 020c 	and.w	r2, r3, #12
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d1eb      	bne.n	8004194 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041bc:	4b25      	ldr	r3, [pc, #148]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d20c      	bcs.n	80041e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ca:	4b22      	ldr	r3, [pc, #136]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b20      	ldr	r3, [pc, #128]	; (8004254 <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e032      	b.n	800424a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0304 	and.w	r3, r3, #4
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4916      	ldr	r1, [pc, #88]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d009      	beq.n	8004222 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800420e:	4b12      	ldr	r3, [pc, #72]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	490e      	ldr	r1, [pc, #56]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	4313      	orrs	r3, r2
 8004220:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004222:	f000 f821 	bl	8004268 <HAL_RCC_GetSysClockFreq>
 8004226:	4602      	mov	r2, r0
 8004228:	4b0b      	ldr	r3, [pc, #44]	; (8004258 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	091b      	lsrs	r3, r3, #4
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	490a      	ldr	r1, [pc, #40]	; (800425c <HAL_RCC_ClockConfig+0x1c0>)
 8004234:	5ccb      	ldrb	r3, [r1, r3]
 8004236:	fa22 f303 	lsr.w	r3, r2, r3
 800423a:	4a09      	ldr	r2, [pc, #36]	; (8004260 <HAL_RCC_ClockConfig+0x1c4>)
 800423c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCC_ClockConfig+0x1c8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f7fe f91a 	bl	800247c <HAL_InitTick>

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40023c00 	.word	0x40023c00
 8004258:	40023800 	.word	0x40023800
 800425c:	080084cc 	.word	0x080084cc
 8004260:	20000000 	.word	0x20000000
 8004264:	20000004 	.word	0x20000004

08004268 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800426c:	b094      	sub	sp, #80	; 0x50
 800426e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004270:	2300      	movs	r3, #0
 8004272:	647b      	str	r3, [r7, #68]	; 0x44
 8004274:	2300      	movs	r3, #0
 8004276:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004278:	2300      	movs	r3, #0
 800427a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004280:	4b79      	ldr	r3, [pc, #484]	; (8004468 <HAL_RCC_GetSysClockFreq+0x200>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 030c 	and.w	r3, r3, #12
 8004288:	2b08      	cmp	r3, #8
 800428a:	d00d      	beq.n	80042a8 <HAL_RCC_GetSysClockFreq+0x40>
 800428c:	2b08      	cmp	r3, #8
 800428e:	f200 80e1 	bhi.w	8004454 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d002      	beq.n	800429c <HAL_RCC_GetSysClockFreq+0x34>
 8004296:	2b04      	cmp	r3, #4
 8004298:	d003      	beq.n	80042a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800429a:	e0db      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800429c:	4b73      	ldr	r3, [pc, #460]	; (800446c <HAL_RCC_GetSysClockFreq+0x204>)
 800429e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042a0:	e0db      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042a2:	4b73      	ldr	r3, [pc, #460]	; (8004470 <HAL_RCC_GetSysClockFreq+0x208>)
 80042a4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042a6:	e0d8      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042a8:	4b6f      	ldr	r3, [pc, #444]	; (8004468 <HAL_RCC_GetSysClockFreq+0x200>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042b2:	4b6d      	ldr	r3, [pc, #436]	; (8004468 <HAL_RCC_GetSysClockFreq+0x200>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d063      	beq.n	8004386 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042be:	4b6a      	ldr	r3, [pc, #424]	; (8004468 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	099b      	lsrs	r3, r3, #6
 80042c4:	2200      	movs	r2, #0
 80042c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80042c8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d0:	633b      	str	r3, [r7, #48]	; 0x30
 80042d2:	2300      	movs	r3, #0
 80042d4:	637b      	str	r3, [r7, #52]	; 0x34
 80042d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042da:	4622      	mov	r2, r4
 80042dc:	462b      	mov	r3, r5
 80042de:	f04f 0000 	mov.w	r0, #0
 80042e2:	f04f 0100 	mov.w	r1, #0
 80042e6:	0159      	lsls	r1, r3, #5
 80042e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042ec:	0150      	lsls	r0, r2, #5
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4621      	mov	r1, r4
 80042f4:	1a51      	subs	r1, r2, r1
 80042f6:	6139      	str	r1, [r7, #16]
 80042f8:	4629      	mov	r1, r5
 80042fa:	eb63 0301 	sbc.w	r3, r3, r1
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800430c:	4659      	mov	r1, fp
 800430e:	018b      	lsls	r3, r1, #6
 8004310:	4651      	mov	r1, sl
 8004312:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004316:	4651      	mov	r1, sl
 8004318:	018a      	lsls	r2, r1, #6
 800431a:	4651      	mov	r1, sl
 800431c:	ebb2 0801 	subs.w	r8, r2, r1
 8004320:	4659      	mov	r1, fp
 8004322:	eb63 0901 	sbc.w	r9, r3, r1
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800433a:	4690      	mov	r8, r2
 800433c:	4699      	mov	r9, r3
 800433e:	4623      	mov	r3, r4
 8004340:	eb18 0303 	adds.w	r3, r8, r3
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	462b      	mov	r3, r5
 8004348:	eb49 0303 	adc.w	r3, r9, r3
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800435a:	4629      	mov	r1, r5
 800435c:	024b      	lsls	r3, r1, #9
 800435e:	4621      	mov	r1, r4
 8004360:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004364:	4621      	mov	r1, r4
 8004366:	024a      	lsls	r2, r1, #9
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436e:	2200      	movs	r2, #0
 8004370:	62bb      	str	r3, [r7, #40]	; 0x28
 8004372:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004374:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004378:	f7fc fc66 	bl	8000c48 <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4613      	mov	r3, r2
 8004382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004384:	e058      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004386:	4b38      	ldr	r3, [pc, #224]	; (8004468 <HAL_RCC_GetSysClockFreq+0x200>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	099b      	lsrs	r3, r3, #6
 800438c:	2200      	movs	r2, #0
 800438e:	4618      	mov	r0, r3
 8004390:	4611      	mov	r1, r2
 8004392:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004396:	623b      	str	r3, [r7, #32]
 8004398:	2300      	movs	r3, #0
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
 800439c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043a0:	4642      	mov	r2, r8
 80043a2:	464b      	mov	r3, r9
 80043a4:	f04f 0000 	mov.w	r0, #0
 80043a8:	f04f 0100 	mov.w	r1, #0
 80043ac:	0159      	lsls	r1, r3, #5
 80043ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043b2:	0150      	lsls	r0, r2, #5
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4641      	mov	r1, r8
 80043ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80043be:	4649      	mov	r1, r9
 80043c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043d8:	ebb2 040a 	subs.w	r4, r2, sl
 80043dc:	eb63 050b 	sbc.w	r5, r3, fp
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	00eb      	lsls	r3, r5, #3
 80043ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043ee:	00e2      	lsls	r2, r4, #3
 80043f0:	4614      	mov	r4, r2
 80043f2:	461d      	mov	r5, r3
 80043f4:	4643      	mov	r3, r8
 80043f6:	18e3      	adds	r3, r4, r3
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	464b      	mov	r3, r9
 80043fc:	eb45 0303 	adc.w	r3, r5, r3
 8004400:	607b      	str	r3, [r7, #4]
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800440e:	4629      	mov	r1, r5
 8004410:	028b      	lsls	r3, r1, #10
 8004412:	4621      	mov	r1, r4
 8004414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004418:	4621      	mov	r1, r4
 800441a:	028a      	lsls	r2, r1, #10
 800441c:	4610      	mov	r0, r2
 800441e:	4619      	mov	r1, r3
 8004420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004422:	2200      	movs	r2, #0
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	61fa      	str	r2, [r7, #28]
 8004428:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800442c:	f7fc fc0c 	bl	8000c48 <__aeabi_uldivmod>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4613      	mov	r3, r2
 8004436:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004438:	4b0b      	ldr	r3, [pc, #44]	; (8004468 <HAL_RCC_GetSysClockFreq+0x200>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	0c1b      	lsrs	r3, r3, #16
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	3301      	adds	r3, #1
 8004444:	005b      	lsls	r3, r3, #1
 8004446:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004448:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800444a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800444c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004450:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004452:	e002      	b.n	800445a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetSysClockFreq+0x204>)
 8004456:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800445a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800445c:	4618      	mov	r0, r3
 800445e:	3750      	adds	r7, #80	; 0x50
 8004460:	46bd      	mov	sp, r7
 8004462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004466:	bf00      	nop
 8004468:	40023800 	.word	0x40023800
 800446c:	00f42400 	.word	0x00f42400
 8004470:	007a1200 	.word	0x007a1200

08004474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004478:	4b03      	ldr	r3, [pc, #12]	; (8004488 <HAL_RCC_GetHCLKFreq+0x14>)
 800447a:	681b      	ldr	r3, [r3, #0]
}
 800447c:	4618      	mov	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	20000000 	.word	0x20000000

0800448c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004490:	f7ff fff0 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 8004494:	4602      	mov	r2, r0
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	0a9b      	lsrs	r3, r3, #10
 800449c:	f003 0307 	and.w	r3, r3, #7
 80044a0:	4903      	ldr	r1, [pc, #12]	; (80044b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044a2:	5ccb      	ldrb	r3, [r1, r3]
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40023800 	.word	0x40023800
 80044b0:	080084dc 	.word	0x080084dc

080044b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044b8:	f7ff ffdc 	bl	8004474 <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b05      	ldr	r3, [pc, #20]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0b5b      	lsrs	r3, r3, #13
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4903      	ldr	r1, [pc, #12]	; (80044d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40023800 	.word	0x40023800
 80044d8:	080084dc 	.word	0x080084dc

080044dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e03f      	b.n	800456e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fd fe06 	bl	8002114 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800451e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 fddf 	bl	80050e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004534:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004544:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004554:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3708      	adds	r7, #8
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}

08004576 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b08a      	sub	sp, #40	; 0x28
 800457a:	af02      	add	r7, sp, #8
 800457c:	60f8      	str	r0, [r7, #12]
 800457e:	60b9      	str	r1, [r7, #8]
 8004580:	603b      	str	r3, [r7, #0]
 8004582:	4613      	mov	r3, r2
 8004584:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b20      	cmp	r3, #32
 8004594:	d17c      	bne.n	8004690 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d002      	beq.n	80045a2 <HAL_UART_Transmit+0x2c>
 800459c:	88fb      	ldrh	r3, [r7, #6]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e075      	b.n	8004692 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d101      	bne.n	80045b4 <HAL_UART_Transmit+0x3e>
 80045b0:	2302      	movs	r3, #2
 80045b2:	e06e      	b.n	8004692 <HAL_UART_Transmit+0x11c>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2221      	movs	r2, #33	; 0x21
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ca:	f7fd ff9b 	bl	8002504 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	88fa      	ldrh	r2, [r7, #6]
 80045da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e4:	d108      	bne.n	80045f8 <HAL_UART_Transmit+0x82>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d104      	bne.n	80045f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	e003      	b.n	8004600 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004608:	e02a      	b.n	8004660 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	2180      	movs	r1, #128	; 0x80
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 fb1f 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d001      	beq.n	8004624 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e036      	b.n	8004692 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	881b      	ldrh	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004638:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	3302      	adds	r3, #2
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e007      	b.n	8004652 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	3301      	adds	r3, #1
 8004650:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1cf      	bne.n	800460a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2200      	movs	r2, #0
 8004672:	2140      	movs	r1, #64	; 0x40
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 faef 	bl	8004c58 <UART_WaitOnFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e006      	b.n	8004692 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	e000      	b.n	8004692 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004690:	2302      	movs	r3, #2
  }
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b084      	sub	sp, #16
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	4613      	mov	r3, r2
 80046a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d11d      	bne.n	80046f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_UART_Receive_IT+0x26>
 80046ba:	88fb      	ldrh	r3, [r7, #6]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e016      	b.n	80046f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d101      	bne.n	80046d2 <HAL_UART_Receive_IT+0x38>
 80046ce:	2302      	movs	r3, #2
 80046d0:	e00f      	b.n	80046f2 <HAL_UART_Receive_IT+0x58>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80046e0:	88fb      	ldrh	r3, [r7, #6]
 80046e2:	461a      	mov	r2, r3
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fb24 	bl	8004d34 <UART_Start_Receive_IT>
 80046ec:	4603      	mov	r3, r0
 80046ee:	e000      	b.n	80046f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b0ba      	sub	sp, #232	; 0xe8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004722:	2300      	movs	r3, #0
 8004724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004728:	2300      	movs	r3, #0
 800472a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800472e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800473a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10f      	bne.n	8004762 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d009      	beq.n	8004762 <HAL_UART_IRQHandler+0x66>
 800474e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004752:	f003 0320 	and.w	r3, r3, #32
 8004756:	2b00      	cmp	r3, #0
 8004758:	d003      	beq.n	8004762 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fc07 	bl	8004f6e <UART_Receive_IT>
      return;
 8004760:	e256      	b.n	8004c10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 80de 	beq.w	8004928 <HAL_UART_IRQHandler+0x22c>
 800476c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b00      	cmp	r3, #0
 8004776:	d106      	bne.n	8004786 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800477c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004780:	2b00      	cmp	r3, #0
 8004782:	f000 80d1 	beq.w	8004928 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <HAL_UART_IRQHandler+0xae>
 8004792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d005      	beq.n	80047aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f043 0201 	orr.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ae:	f003 0304 	and.w	r3, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_UART_IRQHandler+0xd2>
 80047b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c6:	f043 0202 	orr.w	r2, r3, #2
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <HAL_UART_IRQHandler+0xf6>
 80047da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f043 0204 	orr.w	r2, r3, #4
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80047f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d011      	beq.n	8004822 <HAL_UART_IRQHandler+0x126>
 80047fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d105      	bne.n	8004816 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800480a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d005      	beq.n	8004822 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	f043 0208 	orr.w	r2, r3, #8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 81ed 	beq.w	8004c06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800482c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004830:	f003 0320 	and.w	r3, r3, #32
 8004834:	2b00      	cmp	r3, #0
 8004836:	d008      	beq.n	800484a <HAL_UART_IRQHandler+0x14e>
 8004838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d002      	beq.n	800484a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fb92 	bl	8004f6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004854:	2b40      	cmp	r3, #64	; 0x40
 8004856:	bf0c      	ite	eq
 8004858:	2301      	moveq	r3, #1
 800485a:	2300      	movne	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d103      	bne.n	8004876 <HAL_UART_IRQHandler+0x17a>
 800486e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d04f      	beq.n	8004916 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa9a 	bl	8004db0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004886:	2b40      	cmp	r3, #64	; 0x40
 8004888:	d141      	bne.n	800490e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3314      	adds	r3, #20
 80048b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80048ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80048c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80048ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1d9      	bne.n	800488a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d013      	beq.n	8004906 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e2:	4a7d      	ldr	r2, [pc, #500]	; (8004ad8 <HAL_UART_IRQHandler+0x3dc>)
 80048e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fd ffbb 	bl	8002866 <HAL_DMA_Abort_IT>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d016      	beq.n	8004924 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004900:	4610      	mov	r0, r2
 8004902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004904:	e00e      	b.n	8004924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f990 	bl	8004c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800490c:	e00a      	b.n	8004924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f98c 	bl	8004c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004914:	e006      	b.n	8004924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f988 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004922:	e170      	b.n	8004c06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004924:	bf00      	nop
    return;
 8004926:	e16e      	b.n	8004c06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492c:	2b01      	cmp	r3, #1
 800492e:	f040 814a 	bne.w	8004bc6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004936:	f003 0310 	and.w	r3, r3, #16
 800493a:	2b00      	cmp	r3, #0
 800493c:	f000 8143 	beq.w	8004bc6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004944:	f003 0310 	and.w	r3, r3, #16
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 813c 	beq.w	8004bc6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800494e:	2300      	movs	r3, #0
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	60bb      	str	r3, [r7, #8]
 8004962:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	f040 80b4 	bne.w	8004adc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8140 	beq.w	8004c0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800498e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004992:	429a      	cmp	r2, r3
 8004994:	f080 8139 	bcs.w	8004c0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800499e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049aa:	f000 8088 	beq.w	8004abe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80049c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80049c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	330c      	adds	r3, #12
 80049d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80049da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1d9      	bne.n	80049ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3314      	adds	r3, #20
 8004a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a0c:	f023 0301 	bic.w	r3, r3, #1
 8004a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	3314      	adds	r3, #20
 8004a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a2a:	e841 2300 	strex	r3, r2, [r1]
 8004a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1e1      	bne.n	80049fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3314      	adds	r3, #20
 8004a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a40:	e853 3f00 	ldrex	r3, [r3]
 8004a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	3314      	adds	r3, #20
 8004a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a62:	e841 2300 	strex	r3, r2, [r1]
 8004a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1e3      	bne.n	8004a36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	330c      	adds	r3, #12
 8004a82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8e:	f023 0310 	bic.w	r3, r3, #16
 8004a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004aa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004aa2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e3      	bne.n	8004a7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fd fe64 	bl	8002786 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	4619      	mov	r1, r3
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8b6 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ad4:	e099      	b.n	8004c0a <HAL_UART_IRQHandler+0x50e>
 8004ad6:	bf00      	nop
 8004ad8:	08004e77 	.word	0x08004e77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ae4:	b29b      	uxth	r3, r3
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f000 808b 	beq.w	8004c0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	f000 8086 	beq.w	8004c0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	330c      	adds	r3, #12
 8004b08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	330c      	adds	r3, #12
 8004b22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b26:	647a      	str	r2, [r7, #68]	; 0x44
 8004b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e3      	bne.n	8004b02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3314      	adds	r3, #20
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	623b      	str	r3, [r7, #32]
   return(result);
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	3314      	adds	r3, #20
 8004b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8004b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b66:	e841 2300 	strex	r3, r2, [r1]
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1e3      	bne.n	8004b3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 0310 	bic.w	r3, r3, #16
 8004b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	330c      	adds	r3, #12
 8004ba0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004ba4:	61fa      	str	r2, [r7, #28]
 8004ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba8:	69b9      	ldr	r1, [r7, #24]
 8004baa:	69fa      	ldr	r2, [r7, #28]
 8004bac:	e841 2300 	strex	r3, r2, [r1]
 8004bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e3      	bne.n	8004b80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f83e 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bc4:	e023      	b.n	8004c0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d009      	beq.n	8004be6 <HAL_UART_IRQHandler+0x4ea>
 8004bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d003      	beq.n	8004be6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f95d 	bl	8004e9e <UART_Transmit_IT>
    return;
 8004be4:	e014      	b.n	8004c10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00e      	beq.n	8004c10 <HAL_UART_IRQHandler+0x514>
 8004bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f99d 	bl	8004f3e <UART_EndTransmit_IT>
    return;
 8004c04:	e004      	b.n	8004c10 <HAL_UART_IRQHandler+0x514>
    return;
 8004c06:	bf00      	nop
 8004c08:	e002      	b.n	8004c10 <HAL_UART_IRQHandler+0x514>
      return;
 8004c0a:	bf00      	nop
 8004c0c:	e000      	b.n	8004c10 <HAL_UART_IRQHandler+0x514>
      return;
 8004c0e:	bf00      	nop
  }
}
 8004c10:	37e8      	adds	r7, #232	; 0xe8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop

08004c18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b083      	sub	sp, #12
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	460b      	mov	r3, r1
 8004c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b090      	sub	sp, #64	; 0x40
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	603b      	str	r3, [r7, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c68:	e050      	b.n	8004d0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c70:	d04c      	beq.n	8004d0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d007      	beq.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c78:	f7fd fc44 	bl	8002504 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d241      	bcs.n	8004d0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ca8:	637a      	str	r2, [r7, #52]	; 0x34
 8004caa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3314      	adds	r3, #20
 8004cc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	f023 0301 	bic.w	r3, r3, #1
 8004cd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3314      	adds	r3, #20
 8004cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cdc:	623a      	str	r2, [r7, #32]
 8004cde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce0:	69f9      	ldr	r1, [r7, #28]
 8004ce2:	6a3a      	ldr	r2, [r7, #32]
 8004ce4:	e841 2300 	strex	r3, r2, [r1]
 8004ce8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d1e5      	bne.n	8004cbc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e00f      	b.n	8004d2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	4013      	ands	r3, r2
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2301      	moveq	r3, #1
 8004d1e:	2300      	movne	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	461a      	mov	r2, r3
 8004d24:	79fb      	ldrb	r3, [r7, #7]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d09f      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3740      	adds	r7, #64	; 0x40
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	88fa      	ldrh	r2, [r7, #6]
 8004d4c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	88fa      	ldrh	r2, [r7, #6]
 8004d52:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2222      	movs	r2, #34	; 0x22
 8004d5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d80:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	695a      	ldr	r2, [r3, #20]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0220 	orr.w	r2, r2, #32
 8004da0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b095      	sub	sp, #84	; 0x54
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	330c      	adds	r3, #12
 8004dbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc2:	e853 3f00 	ldrex	r3, [r3]
 8004dc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dd8:	643a      	str	r2, [r7, #64]	; 0x40
 8004dda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ddc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004de0:	e841 2300 	strex	r3, r2, [r1]
 8004de4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d1e5      	bne.n	8004db8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3314      	adds	r3, #20
 8004df2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	e853 3f00 	ldrex	r3, [r3]
 8004dfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
 8004e02:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3314      	adds	r3, #20
 8004e0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e14:	e841 2300 	strex	r3, r2, [r1]
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1e5      	bne.n	8004dec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d119      	bne.n	8004e5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f023 0310 	bic.w	r3, r3, #16
 8004e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e48:	61ba      	str	r2, [r7, #24]
 8004e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6979      	ldr	r1, [r7, #20]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	613b      	str	r3, [r7, #16]
   return(result);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e5      	bne.n	8004e28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e6a:	bf00      	nop
 8004e6c:	3754      	adds	r7, #84	; 0x54
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b084      	sub	sp, #16
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e90:	68f8      	ldr	r0, [r7, #12]
 8004e92:	f7ff fecb 	bl	8004c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e96:	bf00      	nop
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b21      	cmp	r3, #33	; 0x21
 8004eb0:	d13e      	bne.n	8004f30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eba:	d114      	bne.n	8004ee6 <UART_Transmit_IT+0x48>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d110      	bne.n	8004ee6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	1c9a      	adds	r2, r3, #2
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]
 8004ee4:	e008      	b.n	8004ef8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	1c59      	adds	r1, r3, #1
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6211      	str	r1, [r2, #32]
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	3b01      	subs	r3, #1
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	4619      	mov	r1, r3
 8004f06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10f      	bne.n	8004f2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr

08004f3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2220      	movs	r2, #32
 8004f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff fe5a 	bl	8004c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3708      	adds	r7, #8
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b08c      	sub	sp, #48	; 0x30
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b22      	cmp	r3, #34	; 0x22
 8004f80:	f040 80ab 	bne.w	80050da <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8c:	d117      	bne.n	8004fbe <UART_Receive_IT+0x50>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d113      	bne.n	8004fbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fac:	b29a      	uxth	r2, r3
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb6:	1c9a      	adds	r2, r3, #2
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	629a      	str	r2, [r3, #40]	; 0x28
 8004fbc:	e026      	b.n	800500c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd0:	d007      	beq.n	8004fe2 <UART_Receive_IT+0x74>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <UART_Receive_IT+0x82>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d106      	bne.n	8004ff0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e008      	b.n	8005002 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005010:	b29b      	uxth	r3, r3
 8005012:	3b01      	subs	r3, #1
 8005014:	b29b      	uxth	r3, r3
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	4619      	mov	r1, r3
 800501a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800501c:	2b00      	cmp	r3, #0
 800501e:	d15a      	bne.n	80050d6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68da      	ldr	r2, [r3, #12]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0220 	bic.w	r2, r2, #32
 800502e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68da      	ldr	r2, [r3, #12]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800503e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	695a      	ldr	r2, [r3, #20]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f022 0201 	bic.w	r2, r2, #1
 800504e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505c:	2b01      	cmp	r3, #1
 800505e:	d135      	bne.n	80050cc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	330c      	adds	r3, #12
 800506c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	e853 3f00 	ldrex	r3, [r3]
 8005074:	613b      	str	r3, [r7, #16]
   return(result);
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	f023 0310 	bic.w	r3, r3, #16
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005086:	623a      	str	r2, [r7, #32]
 8005088:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	69f9      	ldr	r1, [r7, #28]
 800508c:	6a3a      	ldr	r2, [r7, #32]
 800508e:	e841 2300 	strex	r3, r2, [r1]
 8005092:	61bb      	str	r3, [r7, #24]
   return(result);
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1e5      	bne.n	8005066 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0310 	and.w	r3, r3, #16
 80050a4:	2b10      	cmp	r3, #16
 80050a6:	d10a      	bne.n	80050be <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff fdbb 	bl	8004c40 <HAL_UARTEx_RxEventCallback>
 80050ca:	e002      	b.n	80050d2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f7fc fd6b 	bl	8001ba8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e002      	b.n	80050dc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e000      	b.n	80050dc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3730      	adds	r7, #48	; 0x30
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e8:	b0c0      	sub	sp, #256	; 0x100
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005100:	68d9      	ldr	r1, [r3, #12]
 8005102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	ea40 0301 	orr.w	r3, r0, r1
 800510c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800510e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005112:	689a      	ldr	r2, [r3, #8]
 8005114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	431a      	orrs	r2, r3
 800511c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	431a      	orrs	r2, r3
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800513c:	f021 010c 	bic.w	r1, r1, #12
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800514a:	430b      	orrs	r3, r1
 800514c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515e:	6999      	ldr	r1, [r3, #24]
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	ea40 0301 	orr.w	r3, r0, r1
 800516a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	4b8f      	ldr	r3, [pc, #572]	; (80053b0 <UART_SetConfig+0x2cc>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d005      	beq.n	8005184 <UART_SetConfig+0xa0>
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	4b8d      	ldr	r3, [pc, #564]	; (80053b4 <UART_SetConfig+0x2d0>)
 8005180:	429a      	cmp	r2, r3
 8005182:	d104      	bne.n	800518e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7ff f996 	bl	80044b4 <HAL_RCC_GetPCLK2Freq>
 8005188:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800518c:	e003      	b.n	8005196 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800518e:	f7ff f97d 	bl	800448c <HAL_RCC_GetPCLK1Freq>
 8005192:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a0:	f040 810c 	bne.w	80053bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a8:	2200      	movs	r2, #0
 80051aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051b6:	4622      	mov	r2, r4
 80051b8:	462b      	mov	r3, r5
 80051ba:	1891      	adds	r1, r2, r2
 80051bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80051be:	415b      	adcs	r3, r3
 80051c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051c6:	4621      	mov	r1, r4
 80051c8:	eb12 0801 	adds.w	r8, r2, r1
 80051cc:	4629      	mov	r1, r5
 80051ce:	eb43 0901 	adc.w	r9, r3, r1
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051e6:	4690      	mov	r8, r2
 80051e8:	4699      	mov	r9, r3
 80051ea:	4623      	mov	r3, r4
 80051ec:	eb18 0303 	adds.w	r3, r8, r3
 80051f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051f4:	462b      	mov	r3, r5
 80051f6:	eb49 0303 	adc.w	r3, r9, r3
 80051fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800520a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800520e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005212:	460b      	mov	r3, r1
 8005214:	18db      	adds	r3, r3, r3
 8005216:	653b      	str	r3, [r7, #80]	; 0x50
 8005218:	4613      	mov	r3, r2
 800521a:	eb42 0303 	adc.w	r3, r2, r3
 800521e:	657b      	str	r3, [r7, #84]	; 0x54
 8005220:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005224:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005228:	f7fb fd0e 	bl	8000c48 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4b61      	ldr	r3, [pc, #388]	; (80053b8 <UART_SetConfig+0x2d4>)
 8005232:	fba3 2302 	umull	r2, r3, r3, r2
 8005236:	095b      	lsrs	r3, r3, #5
 8005238:	011c      	lsls	r4, r3, #4
 800523a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523e:	2200      	movs	r2, #0
 8005240:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005244:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005248:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800524c:	4642      	mov	r2, r8
 800524e:	464b      	mov	r3, r9
 8005250:	1891      	adds	r1, r2, r2
 8005252:	64b9      	str	r1, [r7, #72]	; 0x48
 8005254:	415b      	adcs	r3, r3
 8005256:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005258:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800525c:	4641      	mov	r1, r8
 800525e:	eb12 0a01 	adds.w	sl, r2, r1
 8005262:	4649      	mov	r1, r9
 8005264:	eb43 0b01 	adc.w	fp, r3, r1
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005274:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005278:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800527c:	4692      	mov	sl, r2
 800527e:	469b      	mov	fp, r3
 8005280:	4643      	mov	r3, r8
 8005282:	eb1a 0303 	adds.w	r3, sl, r3
 8005286:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800528a:	464b      	mov	r3, r9
 800528c:	eb4b 0303 	adc.w	r3, fp, r3
 8005290:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052a8:	460b      	mov	r3, r1
 80052aa:	18db      	adds	r3, r3, r3
 80052ac:	643b      	str	r3, [r7, #64]	; 0x40
 80052ae:	4613      	mov	r3, r2
 80052b0:	eb42 0303 	adc.w	r3, r2, r3
 80052b4:	647b      	str	r3, [r7, #68]	; 0x44
 80052b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052be:	f7fb fcc3 	bl	8000c48 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4611      	mov	r1, r2
 80052c8:	4b3b      	ldr	r3, [pc, #236]	; (80053b8 <UART_SetConfig+0x2d4>)
 80052ca:	fba3 2301 	umull	r2, r3, r3, r1
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	2264      	movs	r2, #100	; 0x64
 80052d2:	fb02 f303 	mul.w	r3, r2, r3
 80052d6:	1acb      	subs	r3, r1, r3
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052de:	4b36      	ldr	r3, [pc, #216]	; (80053b8 <UART_SetConfig+0x2d4>)
 80052e0:	fba3 2302 	umull	r2, r3, r3, r2
 80052e4:	095b      	lsrs	r3, r3, #5
 80052e6:	005b      	lsls	r3, r3, #1
 80052e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052ec:	441c      	add	r4, r3
 80052ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005300:	4642      	mov	r2, r8
 8005302:	464b      	mov	r3, r9
 8005304:	1891      	adds	r1, r2, r2
 8005306:	63b9      	str	r1, [r7, #56]	; 0x38
 8005308:	415b      	adcs	r3, r3
 800530a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800530c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005310:	4641      	mov	r1, r8
 8005312:	1851      	adds	r1, r2, r1
 8005314:	6339      	str	r1, [r7, #48]	; 0x30
 8005316:	4649      	mov	r1, r9
 8005318:	414b      	adcs	r3, r1
 800531a:	637b      	str	r3, [r7, #52]	; 0x34
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005328:	4659      	mov	r1, fp
 800532a:	00cb      	lsls	r3, r1, #3
 800532c:	4651      	mov	r1, sl
 800532e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005332:	4651      	mov	r1, sl
 8005334:	00ca      	lsls	r2, r1, #3
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	4603      	mov	r3, r0
 800533c:	4642      	mov	r2, r8
 800533e:	189b      	adds	r3, r3, r2
 8005340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005344:	464b      	mov	r3, r9
 8005346:	460a      	mov	r2, r1
 8005348:	eb42 0303 	adc.w	r3, r2, r3
 800534c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800535c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005360:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005364:	460b      	mov	r3, r1
 8005366:	18db      	adds	r3, r3, r3
 8005368:	62bb      	str	r3, [r7, #40]	; 0x28
 800536a:	4613      	mov	r3, r2
 800536c:	eb42 0303 	adc.w	r3, r2, r3
 8005370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005372:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005376:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800537a:	f7fb fc65 	bl	8000c48 <__aeabi_uldivmod>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4b0d      	ldr	r3, [pc, #52]	; (80053b8 <UART_SetConfig+0x2d4>)
 8005384:	fba3 1302 	umull	r1, r3, r3, r2
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	2164      	movs	r1, #100	; 0x64
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	00db      	lsls	r3, r3, #3
 8005394:	3332      	adds	r3, #50	; 0x32
 8005396:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <UART_SetConfig+0x2d4>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	f003 0207 	and.w	r2, r3, #7
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4422      	add	r2, r4
 80053aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053ac:	e105      	b.n	80055ba <UART_SetConfig+0x4d6>
 80053ae:	bf00      	nop
 80053b0:	40011000 	.word	0x40011000
 80053b4:	40011400 	.word	0x40011400
 80053b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053ce:	4642      	mov	r2, r8
 80053d0:	464b      	mov	r3, r9
 80053d2:	1891      	adds	r1, r2, r2
 80053d4:	6239      	str	r1, [r7, #32]
 80053d6:	415b      	adcs	r3, r3
 80053d8:	627b      	str	r3, [r7, #36]	; 0x24
 80053da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053de:	4641      	mov	r1, r8
 80053e0:	1854      	adds	r4, r2, r1
 80053e2:	4649      	mov	r1, r9
 80053e4:	eb43 0501 	adc.w	r5, r3, r1
 80053e8:	f04f 0200 	mov.w	r2, #0
 80053ec:	f04f 0300 	mov.w	r3, #0
 80053f0:	00eb      	lsls	r3, r5, #3
 80053f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053f6:	00e2      	lsls	r2, r4, #3
 80053f8:	4614      	mov	r4, r2
 80053fa:	461d      	mov	r5, r3
 80053fc:	4643      	mov	r3, r8
 80053fe:	18e3      	adds	r3, r4, r3
 8005400:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005404:	464b      	mov	r3, r9
 8005406:	eb45 0303 	adc.w	r3, r5, r3
 800540a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800540e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800541a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800541e:	f04f 0200 	mov.w	r2, #0
 8005422:	f04f 0300 	mov.w	r3, #0
 8005426:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800542a:	4629      	mov	r1, r5
 800542c:	008b      	lsls	r3, r1, #2
 800542e:	4621      	mov	r1, r4
 8005430:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005434:	4621      	mov	r1, r4
 8005436:	008a      	lsls	r2, r1, #2
 8005438:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800543c:	f7fb fc04 	bl	8000c48 <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4b60      	ldr	r3, [pc, #384]	; (80055c8 <UART_SetConfig+0x4e4>)
 8005446:	fba3 2302 	umull	r2, r3, r3, r2
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	011c      	lsls	r4, r3, #4
 800544e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005452:	2200      	movs	r2, #0
 8005454:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005458:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800545c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005460:	4642      	mov	r2, r8
 8005462:	464b      	mov	r3, r9
 8005464:	1891      	adds	r1, r2, r2
 8005466:	61b9      	str	r1, [r7, #24]
 8005468:	415b      	adcs	r3, r3
 800546a:	61fb      	str	r3, [r7, #28]
 800546c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005470:	4641      	mov	r1, r8
 8005472:	1851      	adds	r1, r2, r1
 8005474:	6139      	str	r1, [r7, #16]
 8005476:	4649      	mov	r1, r9
 8005478:	414b      	adcs	r3, r1
 800547a:	617b      	str	r3, [r7, #20]
 800547c:	f04f 0200 	mov.w	r2, #0
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005488:	4659      	mov	r1, fp
 800548a:	00cb      	lsls	r3, r1, #3
 800548c:	4651      	mov	r1, sl
 800548e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005492:	4651      	mov	r1, sl
 8005494:	00ca      	lsls	r2, r1, #3
 8005496:	4610      	mov	r0, r2
 8005498:	4619      	mov	r1, r3
 800549a:	4603      	mov	r3, r0
 800549c:	4642      	mov	r2, r8
 800549e:	189b      	adds	r3, r3, r2
 80054a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054a4:	464b      	mov	r3, r9
 80054a6:	460a      	mov	r2, r1
 80054a8:	eb42 0303 	adc.w	r3, r2, r3
 80054ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80054ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054c8:	4649      	mov	r1, r9
 80054ca:	008b      	lsls	r3, r1, #2
 80054cc:	4641      	mov	r1, r8
 80054ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d2:	4641      	mov	r1, r8
 80054d4:	008a      	lsls	r2, r1, #2
 80054d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054da:	f7fb fbb5 	bl	8000c48 <__aeabi_uldivmod>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4b39      	ldr	r3, [pc, #228]	; (80055c8 <UART_SetConfig+0x4e4>)
 80054e4:	fba3 1302 	umull	r1, r3, r3, r2
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	2164      	movs	r1, #100	; 0x64
 80054ec:	fb01 f303 	mul.w	r3, r1, r3
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	3332      	adds	r3, #50	; 0x32
 80054f6:	4a34      	ldr	r2, [pc, #208]	; (80055c8 <UART_SetConfig+0x4e4>)
 80054f8:	fba2 2303 	umull	r2, r3, r2, r3
 80054fc:	095b      	lsrs	r3, r3, #5
 80054fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005502:	441c      	add	r4, r3
 8005504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005508:	2200      	movs	r2, #0
 800550a:	673b      	str	r3, [r7, #112]	; 0x70
 800550c:	677a      	str	r2, [r7, #116]	; 0x74
 800550e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005512:	4642      	mov	r2, r8
 8005514:	464b      	mov	r3, r9
 8005516:	1891      	adds	r1, r2, r2
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	415b      	adcs	r3, r3
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005522:	4641      	mov	r1, r8
 8005524:	1851      	adds	r1, r2, r1
 8005526:	6039      	str	r1, [r7, #0]
 8005528:	4649      	mov	r1, r9
 800552a:	414b      	adcs	r3, r1
 800552c:	607b      	str	r3, [r7, #4]
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800553a:	4659      	mov	r1, fp
 800553c:	00cb      	lsls	r3, r1, #3
 800553e:	4651      	mov	r1, sl
 8005540:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005544:	4651      	mov	r1, sl
 8005546:	00ca      	lsls	r2, r1, #3
 8005548:	4610      	mov	r0, r2
 800554a:	4619      	mov	r1, r3
 800554c:	4603      	mov	r3, r0
 800554e:	4642      	mov	r2, r8
 8005550:	189b      	adds	r3, r3, r2
 8005552:	66bb      	str	r3, [r7, #104]	; 0x68
 8005554:	464b      	mov	r3, r9
 8005556:	460a      	mov	r2, r1
 8005558:	eb42 0303 	adc.w	r3, r2, r3
 800555c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	663b      	str	r3, [r7, #96]	; 0x60
 8005568:	667a      	str	r2, [r7, #100]	; 0x64
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005576:	4649      	mov	r1, r9
 8005578:	008b      	lsls	r3, r1, #2
 800557a:	4641      	mov	r1, r8
 800557c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005580:	4641      	mov	r1, r8
 8005582:	008a      	lsls	r2, r1, #2
 8005584:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005588:	f7fb fb5e 	bl	8000c48 <__aeabi_uldivmod>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <UART_SetConfig+0x4e4>)
 8005592:	fba3 1302 	umull	r1, r3, r3, r2
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	2164      	movs	r1, #100	; 0x64
 800559a:	fb01 f303 	mul.w	r3, r1, r3
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	011b      	lsls	r3, r3, #4
 80055a2:	3332      	adds	r3, #50	; 0x32
 80055a4:	4a08      	ldr	r2, [pc, #32]	; (80055c8 <UART_SetConfig+0x4e4>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	f003 020f 	and.w	r2, r3, #15
 80055b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4422      	add	r2, r4
 80055b8:	609a      	str	r2, [r3, #8]
}
 80055ba:	bf00      	nop
 80055bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055c0:	46bd      	mov	sp, r7
 80055c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c6:	bf00      	nop
 80055c8:	51eb851f 	.word	0x51eb851f

080055cc <__errno>:
 80055cc:	4b01      	ldr	r3, [pc, #4]	; (80055d4 <__errno+0x8>)
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	4770      	bx	lr
 80055d2:	bf00      	nop
 80055d4:	2000000c 	.word	0x2000000c

080055d8 <__libc_init_array>:
 80055d8:	b570      	push	{r4, r5, r6, lr}
 80055da:	4d0d      	ldr	r5, [pc, #52]	; (8005610 <__libc_init_array+0x38>)
 80055dc:	4c0d      	ldr	r4, [pc, #52]	; (8005614 <__libc_init_array+0x3c>)
 80055de:	1b64      	subs	r4, r4, r5
 80055e0:	10a4      	asrs	r4, r4, #2
 80055e2:	2600      	movs	r6, #0
 80055e4:	42a6      	cmp	r6, r4
 80055e6:	d109      	bne.n	80055fc <__libc_init_array+0x24>
 80055e8:	4d0b      	ldr	r5, [pc, #44]	; (8005618 <__libc_init_array+0x40>)
 80055ea:	4c0c      	ldr	r4, [pc, #48]	; (800561c <__libc_init_array+0x44>)
 80055ec:	f002 ff04 	bl	80083f8 <_init>
 80055f0:	1b64      	subs	r4, r4, r5
 80055f2:	10a4      	asrs	r4, r4, #2
 80055f4:	2600      	movs	r6, #0
 80055f6:	42a6      	cmp	r6, r4
 80055f8:	d105      	bne.n	8005606 <__libc_init_array+0x2e>
 80055fa:	bd70      	pop	{r4, r5, r6, pc}
 80055fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005600:	4798      	blx	r3
 8005602:	3601      	adds	r6, #1
 8005604:	e7ee      	b.n	80055e4 <__libc_init_array+0xc>
 8005606:	f855 3b04 	ldr.w	r3, [r5], #4
 800560a:	4798      	blx	r3
 800560c:	3601      	adds	r6, #1
 800560e:	e7f2      	b.n	80055f6 <__libc_init_array+0x1e>
 8005610:	080088c4 	.word	0x080088c4
 8005614:	080088c4 	.word	0x080088c4
 8005618:	080088c4 	.word	0x080088c4
 800561c:	080088c8 	.word	0x080088c8

08005620 <memset>:
 8005620:	4402      	add	r2, r0
 8005622:	4603      	mov	r3, r0
 8005624:	4293      	cmp	r3, r2
 8005626:	d100      	bne.n	800562a <memset+0xa>
 8005628:	4770      	bx	lr
 800562a:	f803 1b01 	strb.w	r1, [r3], #1
 800562e:	e7f9      	b.n	8005624 <memset+0x4>

08005630 <__cvt>:
 8005630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005634:	ec55 4b10 	vmov	r4, r5, d0
 8005638:	2d00      	cmp	r5, #0
 800563a:	460e      	mov	r6, r1
 800563c:	4619      	mov	r1, r3
 800563e:	462b      	mov	r3, r5
 8005640:	bfbb      	ittet	lt
 8005642:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005646:	461d      	movlt	r5, r3
 8005648:	2300      	movge	r3, #0
 800564a:	232d      	movlt	r3, #45	; 0x2d
 800564c:	700b      	strb	r3, [r1, #0]
 800564e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005650:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005654:	4691      	mov	r9, r2
 8005656:	f023 0820 	bic.w	r8, r3, #32
 800565a:	bfbc      	itt	lt
 800565c:	4622      	movlt	r2, r4
 800565e:	4614      	movlt	r4, r2
 8005660:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005664:	d005      	beq.n	8005672 <__cvt+0x42>
 8005666:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800566a:	d100      	bne.n	800566e <__cvt+0x3e>
 800566c:	3601      	adds	r6, #1
 800566e:	2102      	movs	r1, #2
 8005670:	e000      	b.n	8005674 <__cvt+0x44>
 8005672:	2103      	movs	r1, #3
 8005674:	ab03      	add	r3, sp, #12
 8005676:	9301      	str	r3, [sp, #4]
 8005678:	ab02      	add	r3, sp, #8
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	ec45 4b10 	vmov	d0, r4, r5
 8005680:	4653      	mov	r3, sl
 8005682:	4632      	mov	r2, r6
 8005684:	f000 fcec 	bl	8006060 <_dtoa_r>
 8005688:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800568c:	4607      	mov	r7, r0
 800568e:	d102      	bne.n	8005696 <__cvt+0x66>
 8005690:	f019 0f01 	tst.w	r9, #1
 8005694:	d022      	beq.n	80056dc <__cvt+0xac>
 8005696:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800569a:	eb07 0906 	add.w	r9, r7, r6
 800569e:	d110      	bne.n	80056c2 <__cvt+0x92>
 80056a0:	783b      	ldrb	r3, [r7, #0]
 80056a2:	2b30      	cmp	r3, #48	; 0x30
 80056a4:	d10a      	bne.n	80056bc <__cvt+0x8c>
 80056a6:	2200      	movs	r2, #0
 80056a8:	2300      	movs	r3, #0
 80056aa:	4620      	mov	r0, r4
 80056ac:	4629      	mov	r1, r5
 80056ae:	f7fb fa0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80056b2:	b918      	cbnz	r0, 80056bc <__cvt+0x8c>
 80056b4:	f1c6 0601 	rsb	r6, r6, #1
 80056b8:	f8ca 6000 	str.w	r6, [sl]
 80056bc:	f8da 3000 	ldr.w	r3, [sl]
 80056c0:	4499      	add	r9, r3
 80056c2:	2200      	movs	r2, #0
 80056c4:	2300      	movs	r3, #0
 80056c6:	4620      	mov	r0, r4
 80056c8:	4629      	mov	r1, r5
 80056ca:	f7fb f9fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80056ce:	b108      	cbz	r0, 80056d4 <__cvt+0xa4>
 80056d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80056d4:	2230      	movs	r2, #48	; 0x30
 80056d6:	9b03      	ldr	r3, [sp, #12]
 80056d8:	454b      	cmp	r3, r9
 80056da:	d307      	bcc.n	80056ec <__cvt+0xbc>
 80056dc:	9b03      	ldr	r3, [sp, #12]
 80056de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056e0:	1bdb      	subs	r3, r3, r7
 80056e2:	4638      	mov	r0, r7
 80056e4:	6013      	str	r3, [r2, #0]
 80056e6:	b004      	add	sp, #16
 80056e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056ec:	1c59      	adds	r1, r3, #1
 80056ee:	9103      	str	r1, [sp, #12]
 80056f0:	701a      	strb	r2, [r3, #0]
 80056f2:	e7f0      	b.n	80056d6 <__cvt+0xa6>

080056f4 <__exponent>:
 80056f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056f6:	4603      	mov	r3, r0
 80056f8:	2900      	cmp	r1, #0
 80056fa:	bfb8      	it	lt
 80056fc:	4249      	neglt	r1, r1
 80056fe:	f803 2b02 	strb.w	r2, [r3], #2
 8005702:	bfb4      	ite	lt
 8005704:	222d      	movlt	r2, #45	; 0x2d
 8005706:	222b      	movge	r2, #43	; 0x2b
 8005708:	2909      	cmp	r1, #9
 800570a:	7042      	strb	r2, [r0, #1]
 800570c:	dd2a      	ble.n	8005764 <__exponent+0x70>
 800570e:	f10d 0407 	add.w	r4, sp, #7
 8005712:	46a4      	mov	ip, r4
 8005714:	270a      	movs	r7, #10
 8005716:	46a6      	mov	lr, r4
 8005718:	460a      	mov	r2, r1
 800571a:	fb91 f6f7 	sdiv	r6, r1, r7
 800571e:	fb07 1516 	mls	r5, r7, r6, r1
 8005722:	3530      	adds	r5, #48	; 0x30
 8005724:	2a63      	cmp	r2, #99	; 0x63
 8005726:	f104 34ff 	add.w	r4, r4, #4294967295
 800572a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800572e:	4631      	mov	r1, r6
 8005730:	dcf1      	bgt.n	8005716 <__exponent+0x22>
 8005732:	3130      	adds	r1, #48	; 0x30
 8005734:	f1ae 0502 	sub.w	r5, lr, #2
 8005738:	f804 1c01 	strb.w	r1, [r4, #-1]
 800573c:	1c44      	adds	r4, r0, #1
 800573e:	4629      	mov	r1, r5
 8005740:	4561      	cmp	r1, ip
 8005742:	d30a      	bcc.n	800575a <__exponent+0x66>
 8005744:	f10d 0209 	add.w	r2, sp, #9
 8005748:	eba2 020e 	sub.w	r2, r2, lr
 800574c:	4565      	cmp	r5, ip
 800574e:	bf88      	it	hi
 8005750:	2200      	movhi	r2, #0
 8005752:	4413      	add	r3, r2
 8005754:	1a18      	subs	r0, r3, r0
 8005756:	b003      	add	sp, #12
 8005758:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800575a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800575e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005762:	e7ed      	b.n	8005740 <__exponent+0x4c>
 8005764:	2330      	movs	r3, #48	; 0x30
 8005766:	3130      	adds	r1, #48	; 0x30
 8005768:	7083      	strb	r3, [r0, #2]
 800576a:	70c1      	strb	r1, [r0, #3]
 800576c:	1d03      	adds	r3, r0, #4
 800576e:	e7f1      	b.n	8005754 <__exponent+0x60>

08005770 <_printf_float>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	ed2d 8b02 	vpush	{d8}
 8005778:	b08d      	sub	sp, #52	; 0x34
 800577a:	460c      	mov	r4, r1
 800577c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005780:	4616      	mov	r6, r2
 8005782:	461f      	mov	r7, r3
 8005784:	4605      	mov	r5, r0
 8005786:	f001 fa59 	bl	8006c3c <_localeconv_r>
 800578a:	f8d0 a000 	ldr.w	sl, [r0]
 800578e:	4650      	mov	r0, sl
 8005790:	f7fa fd1e 	bl	80001d0 <strlen>
 8005794:	2300      	movs	r3, #0
 8005796:	930a      	str	r3, [sp, #40]	; 0x28
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	9305      	str	r3, [sp, #20]
 800579c:	f8d8 3000 	ldr.w	r3, [r8]
 80057a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80057a4:	3307      	adds	r3, #7
 80057a6:	f023 0307 	bic.w	r3, r3, #7
 80057aa:	f103 0208 	add.w	r2, r3, #8
 80057ae:	f8c8 2000 	str.w	r2, [r8]
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80057ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80057be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80057c2:	9307      	str	r3, [sp, #28]
 80057c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80057c8:	ee08 0a10 	vmov	s16, r0
 80057cc:	4b9f      	ldr	r3, [pc, #636]	; (8005a4c <_printf_float+0x2dc>)
 80057ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057d2:	f04f 32ff 	mov.w	r2, #4294967295
 80057d6:	f7fb f9a9 	bl	8000b2c <__aeabi_dcmpun>
 80057da:	bb88      	cbnz	r0, 8005840 <_printf_float+0xd0>
 80057dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057e0:	4b9a      	ldr	r3, [pc, #616]	; (8005a4c <_printf_float+0x2dc>)
 80057e2:	f04f 32ff 	mov.w	r2, #4294967295
 80057e6:	f7fb f983 	bl	8000af0 <__aeabi_dcmple>
 80057ea:	bb48      	cbnz	r0, 8005840 <_printf_float+0xd0>
 80057ec:	2200      	movs	r2, #0
 80057ee:	2300      	movs	r3, #0
 80057f0:	4640      	mov	r0, r8
 80057f2:	4649      	mov	r1, r9
 80057f4:	f7fb f972 	bl	8000adc <__aeabi_dcmplt>
 80057f8:	b110      	cbz	r0, 8005800 <_printf_float+0x90>
 80057fa:	232d      	movs	r3, #45	; 0x2d
 80057fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005800:	4b93      	ldr	r3, [pc, #588]	; (8005a50 <_printf_float+0x2e0>)
 8005802:	4894      	ldr	r0, [pc, #592]	; (8005a54 <_printf_float+0x2e4>)
 8005804:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005808:	bf94      	ite	ls
 800580a:	4698      	movls	r8, r3
 800580c:	4680      	movhi	r8, r0
 800580e:	2303      	movs	r3, #3
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	9b05      	ldr	r3, [sp, #20]
 8005814:	f023 0204 	bic.w	r2, r3, #4
 8005818:	6022      	str	r2, [r4, #0]
 800581a:	f04f 0900 	mov.w	r9, #0
 800581e:	9700      	str	r7, [sp, #0]
 8005820:	4633      	mov	r3, r6
 8005822:	aa0b      	add	r2, sp, #44	; 0x2c
 8005824:	4621      	mov	r1, r4
 8005826:	4628      	mov	r0, r5
 8005828:	f000 f9d8 	bl	8005bdc <_printf_common>
 800582c:	3001      	adds	r0, #1
 800582e:	f040 8090 	bne.w	8005952 <_printf_float+0x1e2>
 8005832:	f04f 30ff 	mov.w	r0, #4294967295
 8005836:	b00d      	add	sp, #52	; 0x34
 8005838:	ecbd 8b02 	vpop	{d8}
 800583c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005840:	4642      	mov	r2, r8
 8005842:	464b      	mov	r3, r9
 8005844:	4640      	mov	r0, r8
 8005846:	4649      	mov	r1, r9
 8005848:	f7fb f970 	bl	8000b2c <__aeabi_dcmpun>
 800584c:	b140      	cbz	r0, 8005860 <_printf_float+0xf0>
 800584e:	464b      	mov	r3, r9
 8005850:	2b00      	cmp	r3, #0
 8005852:	bfbc      	itt	lt
 8005854:	232d      	movlt	r3, #45	; 0x2d
 8005856:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800585a:	487f      	ldr	r0, [pc, #508]	; (8005a58 <_printf_float+0x2e8>)
 800585c:	4b7f      	ldr	r3, [pc, #508]	; (8005a5c <_printf_float+0x2ec>)
 800585e:	e7d1      	b.n	8005804 <_printf_float+0x94>
 8005860:	6863      	ldr	r3, [r4, #4]
 8005862:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005866:	9206      	str	r2, [sp, #24]
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	d13f      	bne.n	80058ec <_printf_float+0x17c>
 800586c:	2306      	movs	r3, #6
 800586e:	6063      	str	r3, [r4, #4]
 8005870:	9b05      	ldr	r3, [sp, #20]
 8005872:	6861      	ldr	r1, [r4, #4]
 8005874:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005878:	2300      	movs	r3, #0
 800587a:	9303      	str	r3, [sp, #12]
 800587c:	ab0a      	add	r3, sp, #40	; 0x28
 800587e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005882:	ab09      	add	r3, sp, #36	; 0x24
 8005884:	ec49 8b10 	vmov	d0, r8, r9
 8005888:	9300      	str	r3, [sp, #0]
 800588a:	6022      	str	r2, [r4, #0]
 800588c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005890:	4628      	mov	r0, r5
 8005892:	f7ff fecd 	bl	8005630 <__cvt>
 8005896:	9b06      	ldr	r3, [sp, #24]
 8005898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800589a:	2b47      	cmp	r3, #71	; 0x47
 800589c:	4680      	mov	r8, r0
 800589e:	d108      	bne.n	80058b2 <_printf_float+0x142>
 80058a0:	1cc8      	adds	r0, r1, #3
 80058a2:	db02      	blt.n	80058aa <_printf_float+0x13a>
 80058a4:	6863      	ldr	r3, [r4, #4]
 80058a6:	4299      	cmp	r1, r3
 80058a8:	dd41      	ble.n	800592e <_printf_float+0x1be>
 80058aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80058ae:	fa5f fb8b 	uxtb.w	fp, fp
 80058b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80058b6:	d820      	bhi.n	80058fa <_printf_float+0x18a>
 80058b8:	3901      	subs	r1, #1
 80058ba:	465a      	mov	r2, fp
 80058bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058c0:	9109      	str	r1, [sp, #36]	; 0x24
 80058c2:	f7ff ff17 	bl	80056f4 <__exponent>
 80058c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058c8:	1813      	adds	r3, r2, r0
 80058ca:	2a01      	cmp	r2, #1
 80058cc:	4681      	mov	r9, r0
 80058ce:	6123      	str	r3, [r4, #16]
 80058d0:	dc02      	bgt.n	80058d8 <_printf_float+0x168>
 80058d2:	6822      	ldr	r2, [r4, #0]
 80058d4:	07d2      	lsls	r2, r2, #31
 80058d6:	d501      	bpl.n	80058dc <_printf_float+0x16c>
 80058d8:	3301      	adds	r3, #1
 80058da:	6123      	str	r3, [r4, #16]
 80058dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d09c      	beq.n	800581e <_printf_float+0xae>
 80058e4:	232d      	movs	r3, #45	; 0x2d
 80058e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058ea:	e798      	b.n	800581e <_printf_float+0xae>
 80058ec:	9a06      	ldr	r2, [sp, #24]
 80058ee:	2a47      	cmp	r2, #71	; 0x47
 80058f0:	d1be      	bne.n	8005870 <_printf_float+0x100>
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1bc      	bne.n	8005870 <_printf_float+0x100>
 80058f6:	2301      	movs	r3, #1
 80058f8:	e7b9      	b.n	800586e <_printf_float+0xfe>
 80058fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80058fe:	d118      	bne.n	8005932 <_printf_float+0x1c2>
 8005900:	2900      	cmp	r1, #0
 8005902:	6863      	ldr	r3, [r4, #4]
 8005904:	dd0b      	ble.n	800591e <_printf_float+0x1ae>
 8005906:	6121      	str	r1, [r4, #16]
 8005908:	b913      	cbnz	r3, 8005910 <_printf_float+0x1a0>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	07d0      	lsls	r0, r2, #31
 800590e:	d502      	bpl.n	8005916 <_printf_float+0x1a6>
 8005910:	3301      	adds	r3, #1
 8005912:	440b      	add	r3, r1
 8005914:	6123      	str	r3, [r4, #16]
 8005916:	65a1      	str	r1, [r4, #88]	; 0x58
 8005918:	f04f 0900 	mov.w	r9, #0
 800591c:	e7de      	b.n	80058dc <_printf_float+0x16c>
 800591e:	b913      	cbnz	r3, 8005926 <_printf_float+0x1b6>
 8005920:	6822      	ldr	r2, [r4, #0]
 8005922:	07d2      	lsls	r2, r2, #31
 8005924:	d501      	bpl.n	800592a <_printf_float+0x1ba>
 8005926:	3302      	adds	r3, #2
 8005928:	e7f4      	b.n	8005914 <_printf_float+0x1a4>
 800592a:	2301      	movs	r3, #1
 800592c:	e7f2      	b.n	8005914 <_printf_float+0x1a4>
 800592e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005934:	4299      	cmp	r1, r3
 8005936:	db05      	blt.n	8005944 <_printf_float+0x1d4>
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	6121      	str	r1, [r4, #16]
 800593c:	07d8      	lsls	r0, r3, #31
 800593e:	d5ea      	bpl.n	8005916 <_printf_float+0x1a6>
 8005940:	1c4b      	adds	r3, r1, #1
 8005942:	e7e7      	b.n	8005914 <_printf_float+0x1a4>
 8005944:	2900      	cmp	r1, #0
 8005946:	bfd4      	ite	le
 8005948:	f1c1 0202 	rsble	r2, r1, #2
 800594c:	2201      	movgt	r2, #1
 800594e:	4413      	add	r3, r2
 8005950:	e7e0      	b.n	8005914 <_printf_float+0x1a4>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	055a      	lsls	r2, r3, #21
 8005956:	d407      	bmi.n	8005968 <_printf_float+0x1f8>
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	4642      	mov	r2, r8
 800595c:	4631      	mov	r1, r6
 800595e:	4628      	mov	r0, r5
 8005960:	47b8      	blx	r7
 8005962:	3001      	adds	r0, #1
 8005964:	d12c      	bne.n	80059c0 <_printf_float+0x250>
 8005966:	e764      	b.n	8005832 <_printf_float+0xc2>
 8005968:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800596c:	f240 80e0 	bls.w	8005b30 <_printf_float+0x3c0>
 8005970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005974:	2200      	movs	r2, #0
 8005976:	2300      	movs	r3, #0
 8005978:	f7fb f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800597c:	2800      	cmp	r0, #0
 800597e:	d034      	beq.n	80059ea <_printf_float+0x27a>
 8005980:	4a37      	ldr	r2, [pc, #220]	; (8005a60 <_printf_float+0x2f0>)
 8005982:	2301      	movs	r3, #1
 8005984:	4631      	mov	r1, r6
 8005986:	4628      	mov	r0, r5
 8005988:	47b8      	blx	r7
 800598a:	3001      	adds	r0, #1
 800598c:	f43f af51 	beq.w	8005832 <_printf_float+0xc2>
 8005990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005994:	429a      	cmp	r2, r3
 8005996:	db02      	blt.n	800599e <_printf_float+0x22e>
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	07d8      	lsls	r0, r3, #31
 800599c:	d510      	bpl.n	80059c0 <_printf_float+0x250>
 800599e:	ee18 3a10 	vmov	r3, s16
 80059a2:	4652      	mov	r2, sl
 80059a4:	4631      	mov	r1, r6
 80059a6:	4628      	mov	r0, r5
 80059a8:	47b8      	blx	r7
 80059aa:	3001      	adds	r0, #1
 80059ac:	f43f af41 	beq.w	8005832 <_printf_float+0xc2>
 80059b0:	f04f 0800 	mov.w	r8, #0
 80059b4:	f104 091a 	add.w	r9, r4, #26
 80059b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ba:	3b01      	subs	r3, #1
 80059bc:	4543      	cmp	r3, r8
 80059be:	dc09      	bgt.n	80059d4 <_printf_float+0x264>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	079b      	lsls	r3, r3, #30
 80059c4:	f100 8105 	bmi.w	8005bd2 <_printf_float+0x462>
 80059c8:	68e0      	ldr	r0, [r4, #12]
 80059ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059cc:	4298      	cmp	r0, r3
 80059ce:	bfb8      	it	lt
 80059d0:	4618      	movlt	r0, r3
 80059d2:	e730      	b.n	8005836 <_printf_float+0xc6>
 80059d4:	2301      	movs	r3, #1
 80059d6:	464a      	mov	r2, r9
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f af27 	beq.w	8005832 <_printf_float+0xc2>
 80059e4:	f108 0801 	add.w	r8, r8, #1
 80059e8:	e7e6      	b.n	80059b8 <_printf_float+0x248>
 80059ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	dc39      	bgt.n	8005a64 <_printf_float+0x2f4>
 80059f0:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <_printf_float+0x2f0>)
 80059f2:	2301      	movs	r3, #1
 80059f4:	4631      	mov	r1, r6
 80059f6:	4628      	mov	r0, r5
 80059f8:	47b8      	blx	r7
 80059fa:	3001      	adds	r0, #1
 80059fc:	f43f af19 	beq.w	8005832 <_printf_float+0xc2>
 8005a00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d102      	bne.n	8005a0e <_printf_float+0x29e>
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	07d9      	lsls	r1, r3, #31
 8005a0c:	d5d8      	bpl.n	80059c0 <_printf_float+0x250>
 8005a0e:	ee18 3a10 	vmov	r3, s16
 8005a12:	4652      	mov	r2, sl
 8005a14:	4631      	mov	r1, r6
 8005a16:	4628      	mov	r0, r5
 8005a18:	47b8      	blx	r7
 8005a1a:	3001      	adds	r0, #1
 8005a1c:	f43f af09 	beq.w	8005832 <_printf_float+0xc2>
 8005a20:	f04f 0900 	mov.w	r9, #0
 8005a24:	f104 0a1a 	add.w	sl, r4, #26
 8005a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a2a:	425b      	negs	r3, r3
 8005a2c:	454b      	cmp	r3, r9
 8005a2e:	dc01      	bgt.n	8005a34 <_printf_float+0x2c4>
 8005a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a32:	e792      	b.n	800595a <_printf_float+0x1ea>
 8005a34:	2301      	movs	r3, #1
 8005a36:	4652      	mov	r2, sl
 8005a38:	4631      	mov	r1, r6
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	47b8      	blx	r7
 8005a3e:	3001      	adds	r0, #1
 8005a40:	f43f aef7 	beq.w	8005832 <_printf_float+0xc2>
 8005a44:	f109 0901 	add.w	r9, r9, #1
 8005a48:	e7ee      	b.n	8005a28 <_printf_float+0x2b8>
 8005a4a:	bf00      	nop
 8005a4c:	7fefffff 	.word	0x7fefffff
 8005a50:	080084e8 	.word	0x080084e8
 8005a54:	080084ec 	.word	0x080084ec
 8005a58:	080084f4 	.word	0x080084f4
 8005a5c:	080084f0 	.word	0x080084f0
 8005a60:	080084f8 	.word	0x080084f8
 8005a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	bfa8      	it	ge
 8005a6c:	461a      	movge	r2, r3
 8005a6e:	2a00      	cmp	r2, #0
 8005a70:	4691      	mov	r9, r2
 8005a72:	dc37      	bgt.n	8005ae4 <_printf_float+0x374>
 8005a74:	f04f 0b00 	mov.w	fp, #0
 8005a78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a7c:	f104 021a 	add.w	r2, r4, #26
 8005a80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a82:	9305      	str	r3, [sp, #20]
 8005a84:	eba3 0309 	sub.w	r3, r3, r9
 8005a88:	455b      	cmp	r3, fp
 8005a8a:	dc33      	bgt.n	8005af4 <_printf_float+0x384>
 8005a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a90:	429a      	cmp	r2, r3
 8005a92:	db3b      	blt.n	8005b0c <_printf_float+0x39c>
 8005a94:	6823      	ldr	r3, [r4, #0]
 8005a96:	07da      	lsls	r2, r3, #31
 8005a98:	d438      	bmi.n	8005b0c <_printf_float+0x39c>
 8005a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9c:	9a05      	ldr	r2, [sp, #20]
 8005a9e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005aa0:	1a9a      	subs	r2, r3, r2
 8005aa2:	eba3 0901 	sub.w	r9, r3, r1
 8005aa6:	4591      	cmp	r9, r2
 8005aa8:	bfa8      	it	ge
 8005aaa:	4691      	movge	r9, r2
 8005aac:	f1b9 0f00 	cmp.w	r9, #0
 8005ab0:	dc35      	bgt.n	8005b1e <_printf_float+0x3ae>
 8005ab2:	f04f 0800 	mov.w	r8, #0
 8005ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005aba:	f104 0a1a 	add.w	sl, r4, #26
 8005abe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ac2:	1a9b      	subs	r3, r3, r2
 8005ac4:	eba3 0309 	sub.w	r3, r3, r9
 8005ac8:	4543      	cmp	r3, r8
 8005aca:	f77f af79 	ble.w	80059c0 <_printf_float+0x250>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	4652      	mov	r2, sl
 8005ad2:	4631      	mov	r1, r6
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	47b8      	blx	r7
 8005ad8:	3001      	adds	r0, #1
 8005ada:	f43f aeaa 	beq.w	8005832 <_printf_float+0xc2>
 8005ade:	f108 0801 	add.w	r8, r8, #1
 8005ae2:	e7ec      	b.n	8005abe <_printf_float+0x34e>
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	4631      	mov	r1, r6
 8005ae8:	4642      	mov	r2, r8
 8005aea:	4628      	mov	r0, r5
 8005aec:	47b8      	blx	r7
 8005aee:	3001      	adds	r0, #1
 8005af0:	d1c0      	bne.n	8005a74 <_printf_float+0x304>
 8005af2:	e69e      	b.n	8005832 <_printf_float+0xc2>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4631      	mov	r1, r6
 8005af8:	4628      	mov	r0, r5
 8005afa:	9205      	str	r2, [sp, #20]
 8005afc:	47b8      	blx	r7
 8005afe:	3001      	adds	r0, #1
 8005b00:	f43f ae97 	beq.w	8005832 <_printf_float+0xc2>
 8005b04:	9a05      	ldr	r2, [sp, #20]
 8005b06:	f10b 0b01 	add.w	fp, fp, #1
 8005b0a:	e7b9      	b.n	8005a80 <_printf_float+0x310>
 8005b0c:	ee18 3a10 	vmov	r3, s16
 8005b10:	4652      	mov	r2, sl
 8005b12:	4631      	mov	r1, r6
 8005b14:	4628      	mov	r0, r5
 8005b16:	47b8      	blx	r7
 8005b18:	3001      	adds	r0, #1
 8005b1a:	d1be      	bne.n	8005a9a <_printf_float+0x32a>
 8005b1c:	e689      	b.n	8005832 <_printf_float+0xc2>
 8005b1e:	9a05      	ldr	r2, [sp, #20]
 8005b20:	464b      	mov	r3, r9
 8005b22:	4442      	add	r2, r8
 8005b24:	4631      	mov	r1, r6
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b8      	blx	r7
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d1c1      	bne.n	8005ab2 <_printf_float+0x342>
 8005b2e:	e680      	b.n	8005832 <_printf_float+0xc2>
 8005b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b32:	2a01      	cmp	r2, #1
 8005b34:	dc01      	bgt.n	8005b3a <_printf_float+0x3ca>
 8005b36:	07db      	lsls	r3, r3, #31
 8005b38:	d538      	bpl.n	8005bac <_printf_float+0x43c>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	f43f ae74 	beq.w	8005832 <_printf_float+0xc2>
 8005b4a:	ee18 3a10 	vmov	r3, s16
 8005b4e:	4652      	mov	r2, sl
 8005b50:	4631      	mov	r1, r6
 8005b52:	4628      	mov	r0, r5
 8005b54:	47b8      	blx	r7
 8005b56:	3001      	adds	r0, #1
 8005b58:	f43f ae6b 	beq.w	8005832 <_printf_float+0xc2>
 8005b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b60:	2200      	movs	r2, #0
 8005b62:	2300      	movs	r3, #0
 8005b64:	f7fa ffb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b68:	b9d8      	cbnz	r0, 8005ba2 <_printf_float+0x432>
 8005b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b6c:	f108 0201 	add.w	r2, r8, #1
 8005b70:	3b01      	subs	r3, #1
 8005b72:	4631      	mov	r1, r6
 8005b74:	4628      	mov	r0, r5
 8005b76:	47b8      	blx	r7
 8005b78:	3001      	adds	r0, #1
 8005b7a:	d10e      	bne.n	8005b9a <_printf_float+0x42a>
 8005b7c:	e659      	b.n	8005832 <_printf_float+0xc2>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	4652      	mov	r2, sl
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	f43f ae52 	beq.w	8005832 <_printf_float+0xc2>
 8005b8e:	f108 0801 	add.w	r8, r8, #1
 8005b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b94:	3b01      	subs	r3, #1
 8005b96:	4543      	cmp	r3, r8
 8005b98:	dcf1      	bgt.n	8005b7e <_printf_float+0x40e>
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005ba0:	e6dc      	b.n	800595c <_printf_float+0x1ec>
 8005ba2:	f04f 0800 	mov.w	r8, #0
 8005ba6:	f104 0a1a 	add.w	sl, r4, #26
 8005baa:	e7f2      	b.n	8005b92 <_printf_float+0x422>
 8005bac:	2301      	movs	r3, #1
 8005bae:	4642      	mov	r2, r8
 8005bb0:	e7df      	b.n	8005b72 <_printf_float+0x402>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	464a      	mov	r2, r9
 8005bb6:	4631      	mov	r1, r6
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b8      	blx	r7
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	f43f ae38 	beq.w	8005832 <_printf_float+0xc2>
 8005bc2:	f108 0801 	add.w	r8, r8, #1
 8005bc6:	68e3      	ldr	r3, [r4, #12]
 8005bc8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005bca:	1a5b      	subs	r3, r3, r1
 8005bcc:	4543      	cmp	r3, r8
 8005bce:	dcf0      	bgt.n	8005bb2 <_printf_float+0x442>
 8005bd0:	e6fa      	b.n	80059c8 <_printf_float+0x258>
 8005bd2:	f04f 0800 	mov.w	r8, #0
 8005bd6:	f104 0919 	add.w	r9, r4, #25
 8005bda:	e7f4      	b.n	8005bc6 <_printf_float+0x456>

08005bdc <_printf_common>:
 8005bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be0:	4616      	mov	r6, r2
 8005be2:	4699      	mov	r9, r3
 8005be4:	688a      	ldr	r2, [r1, #8]
 8005be6:	690b      	ldr	r3, [r1, #16]
 8005be8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005bec:	4293      	cmp	r3, r2
 8005bee:	bfb8      	it	lt
 8005bf0:	4613      	movlt	r3, r2
 8005bf2:	6033      	str	r3, [r6, #0]
 8005bf4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bf8:	4607      	mov	r7, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	b10a      	cbz	r2, 8005c02 <_printf_common+0x26>
 8005bfe:	3301      	adds	r3, #1
 8005c00:	6033      	str	r3, [r6, #0]
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	0699      	lsls	r1, r3, #26
 8005c06:	bf42      	ittt	mi
 8005c08:	6833      	ldrmi	r3, [r6, #0]
 8005c0a:	3302      	addmi	r3, #2
 8005c0c:	6033      	strmi	r3, [r6, #0]
 8005c0e:	6825      	ldr	r5, [r4, #0]
 8005c10:	f015 0506 	ands.w	r5, r5, #6
 8005c14:	d106      	bne.n	8005c24 <_printf_common+0x48>
 8005c16:	f104 0a19 	add.w	sl, r4, #25
 8005c1a:	68e3      	ldr	r3, [r4, #12]
 8005c1c:	6832      	ldr	r2, [r6, #0]
 8005c1e:	1a9b      	subs	r3, r3, r2
 8005c20:	42ab      	cmp	r3, r5
 8005c22:	dc26      	bgt.n	8005c72 <_printf_common+0x96>
 8005c24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c28:	1e13      	subs	r3, r2, #0
 8005c2a:	6822      	ldr	r2, [r4, #0]
 8005c2c:	bf18      	it	ne
 8005c2e:	2301      	movne	r3, #1
 8005c30:	0692      	lsls	r2, r2, #26
 8005c32:	d42b      	bmi.n	8005c8c <_printf_common+0xb0>
 8005c34:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	47c0      	blx	r8
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d01e      	beq.n	8005c80 <_printf_common+0xa4>
 8005c42:	6823      	ldr	r3, [r4, #0]
 8005c44:	68e5      	ldr	r5, [r4, #12]
 8005c46:	6832      	ldr	r2, [r6, #0]
 8005c48:	f003 0306 	and.w	r3, r3, #6
 8005c4c:	2b04      	cmp	r3, #4
 8005c4e:	bf08      	it	eq
 8005c50:	1aad      	subeq	r5, r5, r2
 8005c52:	68a3      	ldr	r3, [r4, #8]
 8005c54:	6922      	ldr	r2, [r4, #16]
 8005c56:	bf0c      	ite	eq
 8005c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c5c:	2500      	movne	r5, #0
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	bfc4      	itt	gt
 8005c62:	1a9b      	subgt	r3, r3, r2
 8005c64:	18ed      	addgt	r5, r5, r3
 8005c66:	2600      	movs	r6, #0
 8005c68:	341a      	adds	r4, #26
 8005c6a:	42b5      	cmp	r5, r6
 8005c6c:	d11a      	bne.n	8005ca4 <_printf_common+0xc8>
 8005c6e:	2000      	movs	r0, #0
 8005c70:	e008      	b.n	8005c84 <_printf_common+0xa8>
 8005c72:	2301      	movs	r3, #1
 8005c74:	4652      	mov	r2, sl
 8005c76:	4649      	mov	r1, r9
 8005c78:	4638      	mov	r0, r7
 8005c7a:	47c0      	blx	r8
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d103      	bne.n	8005c88 <_printf_common+0xac>
 8005c80:	f04f 30ff 	mov.w	r0, #4294967295
 8005c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c88:	3501      	adds	r5, #1
 8005c8a:	e7c6      	b.n	8005c1a <_printf_common+0x3e>
 8005c8c:	18e1      	adds	r1, r4, r3
 8005c8e:	1c5a      	adds	r2, r3, #1
 8005c90:	2030      	movs	r0, #48	; 0x30
 8005c92:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c96:	4422      	add	r2, r4
 8005c98:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ca0:	3302      	adds	r3, #2
 8005ca2:	e7c7      	b.n	8005c34 <_printf_common+0x58>
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	4649      	mov	r1, r9
 8005caa:	4638      	mov	r0, r7
 8005cac:	47c0      	blx	r8
 8005cae:	3001      	adds	r0, #1
 8005cb0:	d0e6      	beq.n	8005c80 <_printf_common+0xa4>
 8005cb2:	3601      	adds	r6, #1
 8005cb4:	e7d9      	b.n	8005c6a <_printf_common+0x8e>
	...

08005cb8 <_printf_i>:
 8005cb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cbc:	7e0f      	ldrb	r7, [r1, #24]
 8005cbe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cc0:	2f78      	cmp	r7, #120	; 0x78
 8005cc2:	4691      	mov	r9, r2
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	469a      	mov	sl, r3
 8005cca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cce:	d807      	bhi.n	8005ce0 <_printf_i+0x28>
 8005cd0:	2f62      	cmp	r7, #98	; 0x62
 8005cd2:	d80a      	bhi.n	8005cea <_printf_i+0x32>
 8005cd4:	2f00      	cmp	r7, #0
 8005cd6:	f000 80d8 	beq.w	8005e8a <_printf_i+0x1d2>
 8005cda:	2f58      	cmp	r7, #88	; 0x58
 8005cdc:	f000 80a3 	beq.w	8005e26 <_printf_i+0x16e>
 8005ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ce8:	e03a      	b.n	8005d60 <_printf_i+0xa8>
 8005cea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cee:	2b15      	cmp	r3, #21
 8005cf0:	d8f6      	bhi.n	8005ce0 <_printf_i+0x28>
 8005cf2:	a101      	add	r1, pc, #4	; (adr r1, 8005cf8 <_printf_i+0x40>)
 8005cf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cf8:	08005d51 	.word	0x08005d51
 8005cfc:	08005d65 	.word	0x08005d65
 8005d00:	08005ce1 	.word	0x08005ce1
 8005d04:	08005ce1 	.word	0x08005ce1
 8005d08:	08005ce1 	.word	0x08005ce1
 8005d0c:	08005ce1 	.word	0x08005ce1
 8005d10:	08005d65 	.word	0x08005d65
 8005d14:	08005ce1 	.word	0x08005ce1
 8005d18:	08005ce1 	.word	0x08005ce1
 8005d1c:	08005ce1 	.word	0x08005ce1
 8005d20:	08005ce1 	.word	0x08005ce1
 8005d24:	08005e71 	.word	0x08005e71
 8005d28:	08005d95 	.word	0x08005d95
 8005d2c:	08005e53 	.word	0x08005e53
 8005d30:	08005ce1 	.word	0x08005ce1
 8005d34:	08005ce1 	.word	0x08005ce1
 8005d38:	08005e93 	.word	0x08005e93
 8005d3c:	08005ce1 	.word	0x08005ce1
 8005d40:	08005d95 	.word	0x08005d95
 8005d44:	08005ce1 	.word	0x08005ce1
 8005d48:	08005ce1 	.word	0x08005ce1
 8005d4c:	08005e5b 	.word	0x08005e5b
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	1d1a      	adds	r2, r3, #4
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	602a      	str	r2, [r5, #0]
 8005d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d60:	2301      	movs	r3, #1
 8005d62:	e0a3      	b.n	8005eac <_printf_i+0x1f4>
 8005d64:	6820      	ldr	r0, [r4, #0]
 8005d66:	6829      	ldr	r1, [r5, #0]
 8005d68:	0606      	lsls	r6, r0, #24
 8005d6a:	f101 0304 	add.w	r3, r1, #4
 8005d6e:	d50a      	bpl.n	8005d86 <_printf_i+0xce>
 8005d70:	680e      	ldr	r6, [r1, #0]
 8005d72:	602b      	str	r3, [r5, #0]
 8005d74:	2e00      	cmp	r6, #0
 8005d76:	da03      	bge.n	8005d80 <_printf_i+0xc8>
 8005d78:	232d      	movs	r3, #45	; 0x2d
 8005d7a:	4276      	negs	r6, r6
 8005d7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d80:	485e      	ldr	r0, [pc, #376]	; (8005efc <_printf_i+0x244>)
 8005d82:	230a      	movs	r3, #10
 8005d84:	e019      	b.n	8005dba <_printf_i+0x102>
 8005d86:	680e      	ldr	r6, [r1, #0]
 8005d88:	602b      	str	r3, [r5, #0]
 8005d8a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d8e:	bf18      	it	ne
 8005d90:	b236      	sxthne	r6, r6
 8005d92:	e7ef      	b.n	8005d74 <_printf_i+0xbc>
 8005d94:	682b      	ldr	r3, [r5, #0]
 8005d96:	6820      	ldr	r0, [r4, #0]
 8005d98:	1d19      	adds	r1, r3, #4
 8005d9a:	6029      	str	r1, [r5, #0]
 8005d9c:	0601      	lsls	r1, r0, #24
 8005d9e:	d501      	bpl.n	8005da4 <_printf_i+0xec>
 8005da0:	681e      	ldr	r6, [r3, #0]
 8005da2:	e002      	b.n	8005daa <_printf_i+0xf2>
 8005da4:	0646      	lsls	r6, r0, #25
 8005da6:	d5fb      	bpl.n	8005da0 <_printf_i+0xe8>
 8005da8:	881e      	ldrh	r6, [r3, #0]
 8005daa:	4854      	ldr	r0, [pc, #336]	; (8005efc <_printf_i+0x244>)
 8005dac:	2f6f      	cmp	r7, #111	; 0x6f
 8005dae:	bf0c      	ite	eq
 8005db0:	2308      	moveq	r3, #8
 8005db2:	230a      	movne	r3, #10
 8005db4:	2100      	movs	r1, #0
 8005db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dba:	6865      	ldr	r5, [r4, #4]
 8005dbc:	60a5      	str	r5, [r4, #8]
 8005dbe:	2d00      	cmp	r5, #0
 8005dc0:	bfa2      	ittt	ge
 8005dc2:	6821      	ldrge	r1, [r4, #0]
 8005dc4:	f021 0104 	bicge.w	r1, r1, #4
 8005dc8:	6021      	strge	r1, [r4, #0]
 8005dca:	b90e      	cbnz	r6, 8005dd0 <_printf_i+0x118>
 8005dcc:	2d00      	cmp	r5, #0
 8005dce:	d04d      	beq.n	8005e6c <_printf_i+0x1b4>
 8005dd0:	4615      	mov	r5, r2
 8005dd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005dd6:	fb03 6711 	mls	r7, r3, r1, r6
 8005dda:	5dc7      	ldrb	r7, [r0, r7]
 8005ddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005de0:	4637      	mov	r7, r6
 8005de2:	42bb      	cmp	r3, r7
 8005de4:	460e      	mov	r6, r1
 8005de6:	d9f4      	bls.n	8005dd2 <_printf_i+0x11a>
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d10b      	bne.n	8005e04 <_printf_i+0x14c>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	07de      	lsls	r6, r3, #31
 8005df0:	d508      	bpl.n	8005e04 <_printf_i+0x14c>
 8005df2:	6923      	ldr	r3, [r4, #16]
 8005df4:	6861      	ldr	r1, [r4, #4]
 8005df6:	4299      	cmp	r1, r3
 8005df8:	bfde      	ittt	le
 8005dfa:	2330      	movle	r3, #48	; 0x30
 8005dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e04:	1b52      	subs	r2, r2, r5
 8005e06:	6122      	str	r2, [r4, #16]
 8005e08:	f8cd a000 	str.w	sl, [sp]
 8005e0c:	464b      	mov	r3, r9
 8005e0e:	aa03      	add	r2, sp, #12
 8005e10:	4621      	mov	r1, r4
 8005e12:	4640      	mov	r0, r8
 8005e14:	f7ff fee2 	bl	8005bdc <_printf_common>
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d14c      	bne.n	8005eb6 <_printf_i+0x1fe>
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	b004      	add	sp, #16
 8005e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e26:	4835      	ldr	r0, [pc, #212]	; (8005efc <_printf_i+0x244>)
 8005e28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e2c:	6829      	ldr	r1, [r5, #0]
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e34:	6029      	str	r1, [r5, #0]
 8005e36:	061d      	lsls	r5, r3, #24
 8005e38:	d514      	bpl.n	8005e64 <_printf_i+0x1ac>
 8005e3a:	07df      	lsls	r7, r3, #31
 8005e3c:	bf44      	itt	mi
 8005e3e:	f043 0320 	orrmi.w	r3, r3, #32
 8005e42:	6023      	strmi	r3, [r4, #0]
 8005e44:	b91e      	cbnz	r6, 8005e4e <_printf_i+0x196>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	f023 0320 	bic.w	r3, r3, #32
 8005e4c:	6023      	str	r3, [r4, #0]
 8005e4e:	2310      	movs	r3, #16
 8005e50:	e7b0      	b.n	8005db4 <_printf_i+0xfc>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	f043 0320 	orr.w	r3, r3, #32
 8005e58:	6023      	str	r3, [r4, #0]
 8005e5a:	2378      	movs	r3, #120	; 0x78
 8005e5c:	4828      	ldr	r0, [pc, #160]	; (8005f00 <_printf_i+0x248>)
 8005e5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e62:	e7e3      	b.n	8005e2c <_printf_i+0x174>
 8005e64:	0659      	lsls	r1, r3, #25
 8005e66:	bf48      	it	mi
 8005e68:	b2b6      	uxthmi	r6, r6
 8005e6a:	e7e6      	b.n	8005e3a <_printf_i+0x182>
 8005e6c:	4615      	mov	r5, r2
 8005e6e:	e7bb      	b.n	8005de8 <_printf_i+0x130>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	6826      	ldr	r6, [r4, #0]
 8005e74:	6961      	ldr	r1, [r4, #20]
 8005e76:	1d18      	adds	r0, r3, #4
 8005e78:	6028      	str	r0, [r5, #0]
 8005e7a:	0635      	lsls	r5, r6, #24
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	d501      	bpl.n	8005e84 <_printf_i+0x1cc>
 8005e80:	6019      	str	r1, [r3, #0]
 8005e82:	e002      	b.n	8005e8a <_printf_i+0x1d2>
 8005e84:	0670      	lsls	r0, r6, #25
 8005e86:	d5fb      	bpl.n	8005e80 <_printf_i+0x1c8>
 8005e88:	8019      	strh	r1, [r3, #0]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6123      	str	r3, [r4, #16]
 8005e8e:	4615      	mov	r5, r2
 8005e90:	e7ba      	b.n	8005e08 <_printf_i+0x150>
 8005e92:	682b      	ldr	r3, [r5, #0]
 8005e94:	1d1a      	adds	r2, r3, #4
 8005e96:	602a      	str	r2, [r5, #0]
 8005e98:	681d      	ldr	r5, [r3, #0]
 8005e9a:	6862      	ldr	r2, [r4, #4]
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	4628      	mov	r0, r5
 8005ea0:	f7fa f99e 	bl	80001e0 <memchr>
 8005ea4:	b108      	cbz	r0, 8005eaa <_printf_i+0x1f2>
 8005ea6:	1b40      	subs	r0, r0, r5
 8005ea8:	6060      	str	r0, [r4, #4]
 8005eaa:	6863      	ldr	r3, [r4, #4]
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	2300      	movs	r3, #0
 8005eb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eb4:	e7a8      	b.n	8005e08 <_printf_i+0x150>
 8005eb6:	6923      	ldr	r3, [r4, #16]
 8005eb8:	462a      	mov	r2, r5
 8005eba:	4649      	mov	r1, r9
 8005ebc:	4640      	mov	r0, r8
 8005ebe:	47d0      	blx	sl
 8005ec0:	3001      	adds	r0, #1
 8005ec2:	d0ab      	beq.n	8005e1c <_printf_i+0x164>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	079b      	lsls	r3, r3, #30
 8005ec8:	d413      	bmi.n	8005ef2 <_printf_i+0x23a>
 8005eca:	68e0      	ldr	r0, [r4, #12]
 8005ecc:	9b03      	ldr	r3, [sp, #12]
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	bfb8      	it	lt
 8005ed2:	4618      	movlt	r0, r3
 8005ed4:	e7a4      	b.n	8005e20 <_printf_i+0x168>
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4632      	mov	r2, r6
 8005eda:	4649      	mov	r1, r9
 8005edc:	4640      	mov	r0, r8
 8005ede:	47d0      	blx	sl
 8005ee0:	3001      	adds	r0, #1
 8005ee2:	d09b      	beq.n	8005e1c <_printf_i+0x164>
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	68e3      	ldr	r3, [r4, #12]
 8005ee8:	9903      	ldr	r1, [sp, #12]
 8005eea:	1a5b      	subs	r3, r3, r1
 8005eec:	42ab      	cmp	r3, r5
 8005eee:	dcf2      	bgt.n	8005ed6 <_printf_i+0x21e>
 8005ef0:	e7eb      	b.n	8005eca <_printf_i+0x212>
 8005ef2:	2500      	movs	r5, #0
 8005ef4:	f104 0619 	add.w	r6, r4, #25
 8005ef8:	e7f5      	b.n	8005ee6 <_printf_i+0x22e>
 8005efa:	bf00      	nop
 8005efc:	080084fa 	.word	0x080084fa
 8005f00:	0800850b 	.word	0x0800850b

08005f04 <siprintf>:
 8005f04:	b40e      	push	{r1, r2, r3}
 8005f06:	b500      	push	{lr}
 8005f08:	b09c      	sub	sp, #112	; 0x70
 8005f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8005f0c:	9002      	str	r0, [sp, #8]
 8005f0e:	9006      	str	r0, [sp, #24]
 8005f10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f14:	4809      	ldr	r0, [pc, #36]	; (8005f3c <siprintf+0x38>)
 8005f16:	9107      	str	r1, [sp, #28]
 8005f18:	9104      	str	r1, [sp, #16]
 8005f1a:	4909      	ldr	r1, [pc, #36]	; (8005f40 <siprintf+0x3c>)
 8005f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f20:	9105      	str	r1, [sp, #20]
 8005f22:	6800      	ldr	r0, [r0, #0]
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	a902      	add	r1, sp, #8
 8005f28:	f001 fb78 	bl	800761c <_svfiprintf_r>
 8005f2c:	9b02      	ldr	r3, [sp, #8]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	b01c      	add	sp, #112	; 0x70
 8005f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f38:	b003      	add	sp, #12
 8005f3a:	4770      	bx	lr
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	ffff0208 	.word	0xffff0208

08005f44 <quorem>:
 8005f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f48:	6903      	ldr	r3, [r0, #16]
 8005f4a:	690c      	ldr	r4, [r1, #16]
 8005f4c:	42a3      	cmp	r3, r4
 8005f4e:	4607      	mov	r7, r0
 8005f50:	f2c0 8081 	blt.w	8006056 <quorem+0x112>
 8005f54:	3c01      	subs	r4, #1
 8005f56:	f101 0814 	add.w	r8, r1, #20
 8005f5a:	f100 0514 	add.w	r5, r0, #20
 8005f5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f62:	9301      	str	r3, [sp, #4]
 8005f64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005f68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005f74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005f78:	fbb2 f6f3 	udiv	r6, r2, r3
 8005f7c:	d331      	bcc.n	8005fe2 <quorem+0x9e>
 8005f7e:	f04f 0e00 	mov.w	lr, #0
 8005f82:	4640      	mov	r0, r8
 8005f84:	46ac      	mov	ip, r5
 8005f86:	46f2      	mov	sl, lr
 8005f88:	f850 2b04 	ldr.w	r2, [r0], #4
 8005f8c:	b293      	uxth	r3, r2
 8005f8e:	fb06 e303 	mla	r3, r6, r3, lr
 8005f92:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	ebaa 0303 	sub.w	r3, sl, r3
 8005f9c:	f8dc a000 	ldr.w	sl, [ip]
 8005fa0:	0c12      	lsrs	r2, r2, #16
 8005fa2:	fa13 f38a 	uxtah	r3, r3, sl
 8005fa6:	fb06 e202 	mla	r2, r6, r2, lr
 8005faa:	9300      	str	r3, [sp, #0]
 8005fac:	9b00      	ldr	r3, [sp, #0]
 8005fae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005fb2:	b292      	uxth	r2, r2
 8005fb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005fb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005fbc:	f8bd 3000 	ldrh.w	r3, [sp]
 8005fc0:	4581      	cmp	r9, r0
 8005fc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fc6:	f84c 3b04 	str.w	r3, [ip], #4
 8005fca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005fce:	d2db      	bcs.n	8005f88 <quorem+0x44>
 8005fd0:	f855 300b 	ldr.w	r3, [r5, fp]
 8005fd4:	b92b      	cbnz	r3, 8005fe2 <quorem+0x9e>
 8005fd6:	9b01      	ldr	r3, [sp, #4]
 8005fd8:	3b04      	subs	r3, #4
 8005fda:	429d      	cmp	r5, r3
 8005fdc:	461a      	mov	r2, r3
 8005fde:	d32e      	bcc.n	800603e <quorem+0xfa>
 8005fe0:	613c      	str	r4, [r7, #16]
 8005fe2:	4638      	mov	r0, r7
 8005fe4:	f001 f8c6 	bl	8007174 <__mcmp>
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	db24      	blt.n	8006036 <quorem+0xf2>
 8005fec:	3601      	adds	r6, #1
 8005fee:	4628      	mov	r0, r5
 8005ff0:	f04f 0c00 	mov.w	ip, #0
 8005ff4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ff8:	f8d0 e000 	ldr.w	lr, [r0]
 8005ffc:	b293      	uxth	r3, r2
 8005ffe:	ebac 0303 	sub.w	r3, ip, r3
 8006002:	0c12      	lsrs	r2, r2, #16
 8006004:	fa13 f38e 	uxtah	r3, r3, lr
 8006008:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800600c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006010:	b29b      	uxth	r3, r3
 8006012:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006016:	45c1      	cmp	r9, r8
 8006018:	f840 3b04 	str.w	r3, [r0], #4
 800601c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006020:	d2e8      	bcs.n	8005ff4 <quorem+0xb0>
 8006022:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006026:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800602a:	b922      	cbnz	r2, 8006036 <quorem+0xf2>
 800602c:	3b04      	subs	r3, #4
 800602e:	429d      	cmp	r5, r3
 8006030:	461a      	mov	r2, r3
 8006032:	d30a      	bcc.n	800604a <quorem+0x106>
 8006034:	613c      	str	r4, [r7, #16]
 8006036:	4630      	mov	r0, r6
 8006038:	b003      	add	sp, #12
 800603a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	3b04      	subs	r3, #4
 8006042:	2a00      	cmp	r2, #0
 8006044:	d1cc      	bne.n	8005fe0 <quorem+0x9c>
 8006046:	3c01      	subs	r4, #1
 8006048:	e7c7      	b.n	8005fda <quorem+0x96>
 800604a:	6812      	ldr	r2, [r2, #0]
 800604c:	3b04      	subs	r3, #4
 800604e:	2a00      	cmp	r2, #0
 8006050:	d1f0      	bne.n	8006034 <quorem+0xf0>
 8006052:	3c01      	subs	r4, #1
 8006054:	e7eb      	b.n	800602e <quorem+0xea>
 8006056:	2000      	movs	r0, #0
 8006058:	e7ee      	b.n	8006038 <quorem+0xf4>
 800605a:	0000      	movs	r0, r0
 800605c:	0000      	movs	r0, r0
	...

08006060 <_dtoa_r>:
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	ed2d 8b04 	vpush	{d8-d9}
 8006068:	ec57 6b10 	vmov	r6, r7, d0
 800606c:	b093      	sub	sp, #76	; 0x4c
 800606e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006070:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006074:	9106      	str	r1, [sp, #24]
 8006076:	ee10 aa10 	vmov	sl, s0
 800607a:	4604      	mov	r4, r0
 800607c:	9209      	str	r2, [sp, #36]	; 0x24
 800607e:	930c      	str	r3, [sp, #48]	; 0x30
 8006080:	46bb      	mov	fp, r7
 8006082:	b975      	cbnz	r5, 80060a2 <_dtoa_r+0x42>
 8006084:	2010      	movs	r0, #16
 8006086:	f000 fddd 	bl	8006c44 <malloc>
 800608a:	4602      	mov	r2, r0
 800608c:	6260      	str	r0, [r4, #36]	; 0x24
 800608e:	b920      	cbnz	r0, 800609a <_dtoa_r+0x3a>
 8006090:	4ba7      	ldr	r3, [pc, #668]	; (8006330 <_dtoa_r+0x2d0>)
 8006092:	21ea      	movs	r1, #234	; 0xea
 8006094:	48a7      	ldr	r0, [pc, #668]	; (8006334 <_dtoa_r+0x2d4>)
 8006096:	f001 fbd1 	bl	800783c <__assert_func>
 800609a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800609e:	6005      	str	r5, [r0, #0]
 80060a0:	60c5      	str	r5, [r0, #12]
 80060a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060a4:	6819      	ldr	r1, [r3, #0]
 80060a6:	b151      	cbz	r1, 80060be <_dtoa_r+0x5e>
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	604a      	str	r2, [r1, #4]
 80060ac:	2301      	movs	r3, #1
 80060ae:	4093      	lsls	r3, r2
 80060b0:	608b      	str	r3, [r1, #8]
 80060b2:	4620      	mov	r0, r4
 80060b4:	f000 fe1c 	bl	8006cf0 <_Bfree>
 80060b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]
 80060be:	1e3b      	subs	r3, r7, #0
 80060c0:	bfaa      	itet	ge
 80060c2:	2300      	movge	r3, #0
 80060c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80060c8:	f8c8 3000 	strge.w	r3, [r8]
 80060cc:	4b9a      	ldr	r3, [pc, #616]	; (8006338 <_dtoa_r+0x2d8>)
 80060ce:	bfbc      	itt	lt
 80060d0:	2201      	movlt	r2, #1
 80060d2:	f8c8 2000 	strlt.w	r2, [r8]
 80060d6:	ea33 030b 	bics.w	r3, r3, fp
 80060da:	d11b      	bne.n	8006114 <_dtoa_r+0xb4>
 80060dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060de:	f242 730f 	movw	r3, #9999	; 0x270f
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80060e8:	4333      	orrs	r3, r6
 80060ea:	f000 8592 	beq.w	8006c12 <_dtoa_r+0xbb2>
 80060ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060f0:	b963      	cbnz	r3, 800610c <_dtoa_r+0xac>
 80060f2:	4b92      	ldr	r3, [pc, #584]	; (800633c <_dtoa_r+0x2dc>)
 80060f4:	e022      	b.n	800613c <_dtoa_r+0xdc>
 80060f6:	4b92      	ldr	r3, [pc, #584]	; (8006340 <_dtoa_r+0x2e0>)
 80060f8:	9301      	str	r3, [sp, #4]
 80060fa:	3308      	adds	r3, #8
 80060fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	9801      	ldr	r0, [sp, #4]
 8006102:	b013      	add	sp, #76	; 0x4c
 8006104:	ecbd 8b04 	vpop	{d8-d9}
 8006108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610c:	4b8b      	ldr	r3, [pc, #556]	; (800633c <_dtoa_r+0x2dc>)
 800610e:	9301      	str	r3, [sp, #4]
 8006110:	3303      	adds	r3, #3
 8006112:	e7f3      	b.n	80060fc <_dtoa_r+0x9c>
 8006114:	2200      	movs	r2, #0
 8006116:	2300      	movs	r3, #0
 8006118:	4650      	mov	r0, sl
 800611a:	4659      	mov	r1, fp
 800611c:	f7fa fcd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8006120:	ec4b ab19 	vmov	d9, sl, fp
 8006124:	4680      	mov	r8, r0
 8006126:	b158      	cbz	r0, 8006140 <_dtoa_r+0xe0>
 8006128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800612a:	2301      	movs	r3, #1
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 856b 	beq.w	8006c0c <_dtoa_r+0xbac>
 8006136:	4883      	ldr	r0, [pc, #524]	; (8006344 <_dtoa_r+0x2e4>)
 8006138:	6018      	str	r0, [r3, #0]
 800613a:	1e43      	subs	r3, r0, #1
 800613c:	9301      	str	r3, [sp, #4]
 800613e:	e7df      	b.n	8006100 <_dtoa_r+0xa0>
 8006140:	ec4b ab10 	vmov	d0, sl, fp
 8006144:	aa10      	add	r2, sp, #64	; 0x40
 8006146:	a911      	add	r1, sp, #68	; 0x44
 8006148:	4620      	mov	r0, r4
 800614a:	f001 f8b9 	bl	80072c0 <__d2b>
 800614e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006152:	ee08 0a10 	vmov	s16, r0
 8006156:	2d00      	cmp	r5, #0
 8006158:	f000 8084 	beq.w	8006264 <_dtoa_r+0x204>
 800615c:	ee19 3a90 	vmov	r3, s19
 8006160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006164:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006168:	4656      	mov	r6, sl
 800616a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800616e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006172:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006176:	4b74      	ldr	r3, [pc, #464]	; (8006348 <_dtoa_r+0x2e8>)
 8006178:	2200      	movs	r2, #0
 800617a:	4630      	mov	r0, r6
 800617c:	4639      	mov	r1, r7
 800617e:	f7fa f883 	bl	8000288 <__aeabi_dsub>
 8006182:	a365      	add	r3, pc, #404	; (adr r3, 8006318 <_dtoa_r+0x2b8>)
 8006184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006188:	f7fa fa36 	bl	80005f8 <__aeabi_dmul>
 800618c:	a364      	add	r3, pc, #400	; (adr r3, 8006320 <_dtoa_r+0x2c0>)
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f7fa f87b 	bl	800028c <__adddf3>
 8006196:	4606      	mov	r6, r0
 8006198:	4628      	mov	r0, r5
 800619a:	460f      	mov	r7, r1
 800619c:	f7fa f9c2 	bl	8000524 <__aeabi_i2d>
 80061a0:	a361      	add	r3, pc, #388	; (adr r3, 8006328 <_dtoa_r+0x2c8>)
 80061a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a6:	f7fa fa27 	bl	80005f8 <__aeabi_dmul>
 80061aa:	4602      	mov	r2, r0
 80061ac:	460b      	mov	r3, r1
 80061ae:	4630      	mov	r0, r6
 80061b0:	4639      	mov	r1, r7
 80061b2:	f7fa f86b 	bl	800028c <__adddf3>
 80061b6:	4606      	mov	r6, r0
 80061b8:	460f      	mov	r7, r1
 80061ba:	f7fa fccd 	bl	8000b58 <__aeabi_d2iz>
 80061be:	2200      	movs	r2, #0
 80061c0:	9000      	str	r0, [sp, #0]
 80061c2:	2300      	movs	r3, #0
 80061c4:	4630      	mov	r0, r6
 80061c6:	4639      	mov	r1, r7
 80061c8:	f7fa fc88 	bl	8000adc <__aeabi_dcmplt>
 80061cc:	b150      	cbz	r0, 80061e4 <_dtoa_r+0x184>
 80061ce:	9800      	ldr	r0, [sp, #0]
 80061d0:	f7fa f9a8 	bl	8000524 <__aeabi_i2d>
 80061d4:	4632      	mov	r2, r6
 80061d6:	463b      	mov	r3, r7
 80061d8:	f7fa fc76 	bl	8000ac8 <__aeabi_dcmpeq>
 80061dc:	b910      	cbnz	r0, 80061e4 <_dtoa_r+0x184>
 80061de:	9b00      	ldr	r3, [sp, #0]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	9b00      	ldr	r3, [sp, #0]
 80061e6:	2b16      	cmp	r3, #22
 80061e8:	d85a      	bhi.n	80062a0 <_dtoa_r+0x240>
 80061ea:	9a00      	ldr	r2, [sp, #0]
 80061ec:	4b57      	ldr	r3, [pc, #348]	; (800634c <_dtoa_r+0x2ec>)
 80061ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f6:	ec51 0b19 	vmov	r0, r1, d9
 80061fa:	f7fa fc6f 	bl	8000adc <__aeabi_dcmplt>
 80061fe:	2800      	cmp	r0, #0
 8006200:	d050      	beq.n	80062a4 <_dtoa_r+0x244>
 8006202:	9b00      	ldr	r3, [sp, #0]
 8006204:	3b01      	subs	r3, #1
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	2300      	movs	r3, #0
 800620a:	930b      	str	r3, [sp, #44]	; 0x2c
 800620c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800620e:	1b5d      	subs	r5, r3, r5
 8006210:	1e6b      	subs	r3, r5, #1
 8006212:	9305      	str	r3, [sp, #20]
 8006214:	bf45      	ittet	mi
 8006216:	f1c5 0301 	rsbmi	r3, r5, #1
 800621a:	9304      	strmi	r3, [sp, #16]
 800621c:	2300      	movpl	r3, #0
 800621e:	2300      	movmi	r3, #0
 8006220:	bf4c      	ite	mi
 8006222:	9305      	strmi	r3, [sp, #20]
 8006224:	9304      	strpl	r3, [sp, #16]
 8006226:	9b00      	ldr	r3, [sp, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	db3d      	blt.n	80062a8 <_dtoa_r+0x248>
 800622c:	9b05      	ldr	r3, [sp, #20]
 800622e:	9a00      	ldr	r2, [sp, #0]
 8006230:	920a      	str	r2, [sp, #40]	; 0x28
 8006232:	4413      	add	r3, r2
 8006234:	9305      	str	r3, [sp, #20]
 8006236:	2300      	movs	r3, #0
 8006238:	9307      	str	r3, [sp, #28]
 800623a:	9b06      	ldr	r3, [sp, #24]
 800623c:	2b09      	cmp	r3, #9
 800623e:	f200 8089 	bhi.w	8006354 <_dtoa_r+0x2f4>
 8006242:	2b05      	cmp	r3, #5
 8006244:	bfc4      	itt	gt
 8006246:	3b04      	subgt	r3, #4
 8006248:	9306      	strgt	r3, [sp, #24]
 800624a:	9b06      	ldr	r3, [sp, #24]
 800624c:	f1a3 0302 	sub.w	r3, r3, #2
 8006250:	bfcc      	ite	gt
 8006252:	2500      	movgt	r5, #0
 8006254:	2501      	movle	r5, #1
 8006256:	2b03      	cmp	r3, #3
 8006258:	f200 8087 	bhi.w	800636a <_dtoa_r+0x30a>
 800625c:	e8df f003 	tbb	[pc, r3]
 8006260:	59383a2d 	.word	0x59383a2d
 8006264:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006268:	441d      	add	r5, r3
 800626a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800626e:	2b20      	cmp	r3, #32
 8006270:	bfc1      	itttt	gt
 8006272:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006276:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800627a:	fa0b f303 	lslgt.w	r3, fp, r3
 800627e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006282:	bfda      	itte	le
 8006284:	f1c3 0320 	rsble	r3, r3, #32
 8006288:	fa06 f003 	lslle.w	r0, r6, r3
 800628c:	4318      	orrgt	r0, r3
 800628e:	f7fa f939 	bl	8000504 <__aeabi_ui2d>
 8006292:	2301      	movs	r3, #1
 8006294:	4606      	mov	r6, r0
 8006296:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800629a:	3d01      	subs	r5, #1
 800629c:	930e      	str	r3, [sp, #56]	; 0x38
 800629e:	e76a      	b.n	8006176 <_dtoa_r+0x116>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e7b2      	b.n	800620a <_dtoa_r+0x1aa>
 80062a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80062a6:	e7b1      	b.n	800620c <_dtoa_r+0x1ac>
 80062a8:	9b04      	ldr	r3, [sp, #16]
 80062aa:	9a00      	ldr	r2, [sp, #0]
 80062ac:	1a9b      	subs	r3, r3, r2
 80062ae:	9304      	str	r3, [sp, #16]
 80062b0:	4253      	negs	r3, r2
 80062b2:	9307      	str	r3, [sp, #28]
 80062b4:	2300      	movs	r3, #0
 80062b6:	930a      	str	r3, [sp, #40]	; 0x28
 80062b8:	e7bf      	b.n	800623a <_dtoa_r+0x1da>
 80062ba:	2300      	movs	r3, #0
 80062bc:	9308      	str	r3, [sp, #32]
 80062be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	dc55      	bgt.n	8006370 <_dtoa_r+0x310>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80062ca:	461a      	mov	r2, r3
 80062cc:	9209      	str	r2, [sp, #36]	; 0x24
 80062ce:	e00c      	b.n	80062ea <_dtoa_r+0x28a>
 80062d0:	2301      	movs	r3, #1
 80062d2:	e7f3      	b.n	80062bc <_dtoa_r+0x25c>
 80062d4:	2300      	movs	r3, #0
 80062d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062d8:	9308      	str	r3, [sp, #32]
 80062da:	9b00      	ldr	r3, [sp, #0]
 80062dc:	4413      	add	r3, r2
 80062de:	9302      	str	r3, [sp, #8]
 80062e0:	3301      	adds	r3, #1
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	9303      	str	r3, [sp, #12]
 80062e6:	bfb8      	it	lt
 80062e8:	2301      	movlt	r3, #1
 80062ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80062ec:	2200      	movs	r2, #0
 80062ee:	6042      	str	r2, [r0, #4]
 80062f0:	2204      	movs	r2, #4
 80062f2:	f102 0614 	add.w	r6, r2, #20
 80062f6:	429e      	cmp	r6, r3
 80062f8:	6841      	ldr	r1, [r0, #4]
 80062fa:	d93d      	bls.n	8006378 <_dtoa_r+0x318>
 80062fc:	4620      	mov	r0, r4
 80062fe:	f000 fcb7 	bl	8006c70 <_Balloc>
 8006302:	9001      	str	r0, [sp, #4]
 8006304:	2800      	cmp	r0, #0
 8006306:	d13b      	bne.n	8006380 <_dtoa_r+0x320>
 8006308:	4b11      	ldr	r3, [pc, #68]	; (8006350 <_dtoa_r+0x2f0>)
 800630a:	4602      	mov	r2, r0
 800630c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006310:	e6c0      	b.n	8006094 <_dtoa_r+0x34>
 8006312:	2301      	movs	r3, #1
 8006314:	e7df      	b.n	80062d6 <_dtoa_r+0x276>
 8006316:	bf00      	nop
 8006318:	636f4361 	.word	0x636f4361
 800631c:	3fd287a7 	.word	0x3fd287a7
 8006320:	8b60c8b3 	.word	0x8b60c8b3
 8006324:	3fc68a28 	.word	0x3fc68a28
 8006328:	509f79fb 	.word	0x509f79fb
 800632c:	3fd34413 	.word	0x3fd34413
 8006330:	08008529 	.word	0x08008529
 8006334:	08008540 	.word	0x08008540
 8006338:	7ff00000 	.word	0x7ff00000
 800633c:	08008525 	.word	0x08008525
 8006340:	0800851c 	.word	0x0800851c
 8006344:	080084f9 	.word	0x080084f9
 8006348:	3ff80000 	.word	0x3ff80000
 800634c:	08008630 	.word	0x08008630
 8006350:	0800859b 	.word	0x0800859b
 8006354:	2501      	movs	r5, #1
 8006356:	2300      	movs	r3, #0
 8006358:	9306      	str	r3, [sp, #24]
 800635a:	9508      	str	r5, [sp, #32]
 800635c:	f04f 33ff 	mov.w	r3, #4294967295
 8006360:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006364:	2200      	movs	r2, #0
 8006366:	2312      	movs	r3, #18
 8006368:	e7b0      	b.n	80062cc <_dtoa_r+0x26c>
 800636a:	2301      	movs	r3, #1
 800636c:	9308      	str	r3, [sp, #32]
 800636e:	e7f5      	b.n	800635c <_dtoa_r+0x2fc>
 8006370:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006372:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006376:	e7b8      	b.n	80062ea <_dtoa_r+0x28a>
 8006378:	3101      	adds	r1, #1
 800637a:	6041      	str	r1, [r0, #4]
 800637c:	0052      	lsls	r2, r2, #1
 800637e:	e7b8      	b.n	80062f2 <_dtoa_r+0x292>
 8006380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006382:	9a01      	ldr	r2, [sp, #4]
 8006384:	601a      	str	r2, [r3, #0]
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	2b0e      	cmp	r3, #14
 800638a:	f200 809d 	bhi.w	80064c8 <_dtoa_r+0x468>
 800638e:	2d00      	cmp	r5, #0
 8006390:	f000 809a 	beq.w	80064c8 <_dtoa_r+0x468>
 8006394:	9b00      	ldr	r3, [sp, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	dd32      	ble.n	8006400 <_dtoa_r+0x3a0>
 800639a:	4ab7      	ldr	r2, [pc, #732]	; (8006678 <_dtoa_r+0x618>)
 800639c:	f003 030f 	and.w	r3, r3, #15
 80063a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80063a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063a8:	9b00      	ldr	r3, [sp, #0]
 80063aa:	05d8      	lsls	r0, r3, #23
 80063ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80063b0:	d516      	bpl.n	80063e0 <_dtoa_r+0x380>
 80063b2:	4bb2      	ldr	r3, [pc, #712]	; (800667c <_dtoa_r+0x61c>)
 80063b4:	ec51 0b19 	vmov	r0, r1, d9
 80063b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80063bc:	f7fa fa46 	bl	800084c <__aeabi_ddiv>
 80063c0:	f007 070f 	and.w	r7, r7, #15
 80063c4:	4682      	mov	sl, r0
 80063c6:	468b      	mov	fp, r1
 80063c8:	2503      	movs	r5, #3
 80063ca:	4eac      	ldr	r6, [pc, #688]	; (800667c <_dtoa_r+0x61c>)
 80063cc:	b957      	cbnz	r7, 80063e4 <_dtoa_r+0x384>
 80063ce:	4642      	mov	r2, r8
 80063d0:	464b      	mov	r3, r9
 80063d2:	4650      	mov	r0, sl
 80063d4:	4659      	mov	r1, fp
 80063d6:	f7fa fa39 	bl	800084c <__aeabi_ddiv>
 80063da:	4682      	mov	sl, r0
 80063dc:	468b      	mov	fp, r1
 80063de:	e028      	b.n	8006432 <_dtoa_r+0x3d2>
 80063e0:	2502      	movs	r5, #2
 80063e2:	e7f2      	b.n	80063ca <_dtoa_r+0x36a>
 80063e4:	07f9      	lsls	r1, r7, #31
 80063e6:	d508      	bpl.n	80063fa <_dtoa_r+0x39a>
 80063e8:	4640      	mov	r0, r8
 80063ea:	4649      	mov	r1, r9
 80063ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063f0:	f7fa f902 	bl	80005f8 <__aeabi_dmul>
 80063f4:	3501      	adds	r5, #1
 80063f6:	4680      	mov	r8, r0
 80063f8:	4689      	mov	r9, r1
 80063fa:	107f      	asrs	r7, r7, #1
 80063fc:	3608      	adds	r6, #8
 80063fe:	e7e5      	b.n	80063cc <_dtoa_r+0x36c>
 8006400:	f000 809b 	beq.w	800653a <_dtoa_r+0x4da>
 8006404:	9b00      	ldr	r3, [sp, #0]
 8006406:	4f9d      	ldr	r7, [pc, #628]	; (800667c <_dtoa_r+0x61c>)
 8006408:	425e      	negs	r6, r3
 800640a:	4b9b      	ldr	r3, [pc, #620]	; (8006678 <_dtoa_r+0x618>)
 800640c:	f006 020f 	and.w	r2, r6, #15
 8006410:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006418:	ec51 0b19 	vmov	r0, r1, d9
 800641c:	f7fa f8ec 	bl	80005f8 <__aeabi_dmul>
 8006420:	1136      	asrs	r6, r6, #4
 8006422:	4682      	mov	sl, r0
 8006424:	468b      	mov	fp, r1
 8006426:	2300      	movs	r3, #0
 8006428:	2502      	movs	r5, #2
 800642a:	2e00      	cmp	r6, #0
 800642c:	d17a      	bne.n	8006524 <_dtoa_r+0x4c4>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1d3      	bne.n	80063da <_dtoa_r+0x37a>
 8006432:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006434:	2b00      	cmp	r3, #0
 8006436:	f000 8082 	beq.w	800653e <_dtoa_r+0x4de>
 800643a:	4b91      	ldr	r3, [pc, #580]	; (8006680 <_dtoa_r+0x620>)
 800643c:	2200      	movs	r2, #0
 800643e:	4650      	mov	r0, sl
 8006440:	4659      	mov	r1, fp
 8006442:	f7fa fb4b 	bl	8000adc <__aeabi_dcmplt>
 8006446:	2800      	cmp	r0, #0
 8006448:	d079      	beq.n	800653e <_dtoa_r+0x4de>
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d076      	beq.n	800653e <_dtoa_r+0x4de>
 8006450:	9b02      	ldr	r3, [sp, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	dd36      	ble.n	80064c4 <_dtoa_r+0x464>
 8006456:	9b00      	ldr	r3, [sp, #0]
 8006458:	4650      	mov	r0, sl
 800645a:	4659      	mov	r1, fp
 800645c:	1e5f      	subs	r7, r3, #1
 800645e:	2200      	movs	r2, #0
 8006460:	4b88      	ldr	r3, [pc, #544]	; (8006684 <_dtoa_r+0x624>)
 8006462:	f7fa f8c9 	bl	80005f8 <__aeabi_dmul>
 8006466:	9e02      	ldr	r6, [sp, #8]
 8006468:	4682      	mov	sl, r0
 800646a:	468b      	mov	fp, r1
 800646c:	3501      	adds	r5, #1
 800646e:	4628      	mov	r0, r5
 8006470:	f7fa f858 	bl	8000524 <__aeabi_i2d>
 8006474:	4652      	mov	r2, sl
 8006476:	465b      	mov	r3, fp
 8006478:	f7fa f8be 	bl	80005f8 <__aeabi_dmul>
 800647c:	4b82      	ldr	r3, [pc, #520]	; (8006688 <_dtoa_r+0x628>)
 800647e:	2200      	movs	r2, #0
 8006480:	f7f9 ff04 	bl	800028c <__adddf3>
 8006484:	46d0      	mov	r8, sl
 8006486:	46d9      	mov	r9, fp
 8006488:	4682      	mov	sl, r0
 800648a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800648e:	2e00      	cmp	r6, #0
 8006490:	d158      	bne.n	8006544 <_dtoa_r+0x4e4>
 8006492:	4b7e      	ldr	r3, [pc, #504]	; (800668c <_dtoa_r+0x62c>)
 8006494:	2200      	movs	r2, #0
 8006496:	4640      	mov	r0, r8
 8006498:	4649      	mov	r1, r9
 800649a:	f7f9 fef5 	bl	8000288 <__aeabi_dsub>
 800649e:	4652      	mov	r2, sl
 80064a0:	465b      	mov	r3, fp
 80064a2:	4680      	mov	r8, r0
 80064a4:	4689      	mov	r9, r1
 80064a6:	f7fa fb37 	bl	8000b18 <__aeabi_dcmpgt>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	f040 8295 	bne.w	80069da <_dtoa_r+0x97a>
 80064b0:	4652      	mov	r2, sl
 80064b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80064b6:	4640      	mov	r0, r8
 80064b8:	4649      	mov	r1, r9
 80064ba:	f7fa fb0f 	bl	8000adc <__aeabi_dcmplt>
 80064be:	2800      	cmp	r0, #0
 80064c0:	f040 8289 	bne.w	80069d6 <_dtoa_r+0x976>
 80064c4:	ec5b ab19 	vmov	sl, fp, d9
 80064c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f2c0 8148 	blt.w	8006760 <_dtoa_r+0x700>
 80064d0:	9a00      	ldr	r2, [sp, #0]
 80064d2:	2a0e      	cmp	r2, #14
 80064d4:	f300 8144 	bgt.w	8006760 <_dtoa_r+0x700>
 80064d8:	4b67      	ldr	r3, [pc, #412]	; (8006678 <_dtoa_r+0x618>)
 80064da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80064e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f280 80d5 	bge.w	8006694 <_dtoa_r+0x634>
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f300 80d1 	bgt.w	8006694 <_dtoa_r+0x634>
 80064f2:	f040 826f 	bne.w	80069d4 <_dtoa_r+0x974>
 80064f6:	4b65      	ldr	r3, [pc, #404]	; (800668c <_dtoa_r+0x62c>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	4640      	mov	r0, r8
 80064fc:	4649      	mov	r1, r9
 80064fe:	f7fa f87b 	bl	80005f8 <__aeabi_dmul>
 8006502:	4652      	mov	r2, sl
 8006504:	465b      	mov	r3, fp
 8006506:	f7fa fafd 	bl	8000b04 <__aeabi_dcmpge>
 800650a:	9e03      	ldr	r6, [sp, #12]
 800650c:	4637      	mov	r7, r6
 800650e:	2800      	cmp	r0, #0
 8006510:	f040 8245 	bne.w	800699e <_dtoa_r+0x93e>
 8006514:	9d01      	ldr	r5, [sp, #4]
 8006516:	2331      	movs	r3, #49	; 0x31
 8006518:	f805 3b01 	strb.w	r3, [r5], #1
 800651c:	9b00      	ldr	r3, [sp, #0]
 800651e:	3301      	adds	r3, #1
 8006520:	9300      	str	r3, [sp, #0]
 8006522:	e240      	b.n	80069a6 <_dtoa_r+0x946>
 8006524:	07f2      	lsls	r2, r6, #31
 8006526:	d505      	bpl.n	8006534 <_dtoa_r+0x4d4>
 8006528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800652c:	f7fa f864 	bl	80005f8 <__aeabi_dmul>
 8006530:	3501      	adds	r5, #1
 8006532:	2301      	movs	r3, #1
 8006534:	1076      	asrs	r6, r6, #1
 8006536:	3708      	adds	r7, #8
 8006538:	e777      	b.n	800642a <_dtoa_r+0x3ca>
 800653a:	2502      	movs	r5, #2
 800653c:	e779      	b.n	8006432 <_dtoa_r+0x3d2>
 800653e:	9f00      	ldr	r7, [sp, #0]
 8006540:	9e03      	ldr	r6, [sp, #12]
 8006542:	e794      	b.n	800646e <_dtoa_r+0x40e>
 8006544:	9901      	ldr	r1, [sp, #4]
 8006546:	4b4c      	ldr	r3, [pc, #304]	; (8006678 <_dtoa_r+0x618>)
 8006548:	4431      	add	r1, r6
 800654a:	910d      	str	r1, [sp, #52]	; 0x34
 800654c:	9908      	ldr	r1, [sp, #32]
 800654e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006552:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006556:	2900      	cmp	r1, #0
 8006558:	d043      	beq.n	80065e2 <_dtoa_r+0x582>
 800655a:	494d      	ldr	r1, [pc, #308]	; (8006690 <_dtoa_r+0x630>)
 800655c:	2000      	movs	r0, #0
 800655e:	f7fa f975 	bl	800084c <__aeabi_ddiv>
 8006562:	4652      	mov	r2, sl
 8006564:	465b      	mov	r3, fp
 8006566:	f7f9 fe8f 	bl	8000288 <__aeabi_dsub>
 800656a:	9d01      	ldr	r5, [sp, #4]
 800656c:	4682      	mov	sl, r0
 800656e:	468b      	mov	fp, r1
 8006570:	4649      	mov	r1, r9
 8006572:	4640      	mov	r0, r8
 8006574:	f7fa faf0 	bl	8000b58 <__aeabi_d2iz>
 8006578:	4606      	mov	r6, r0
 800657a:	f7f9 ffd3 	bl	8000524 <__aeabi_i2d>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4640      	mov	r0, r8
 8006584:	4649      	mov	r1, r9
 8006586:	f7f9 fe7f 	bl	8000288 <__aeabi_dsub>
 800658a:	3630      	adds	r6, #48	; 0x30
 800658c:	f805 6b01 	strb.w	r6, [r5], #1
 8006590:	4652      	mov	r2, sl
 8006592:	465b      	mov	r3, fp
 8006594:	4680      	mov	r8, r0
 8006596:	4689      	mov	r9, r1
 8006598:	f7fa faa0 	bl	8000adc <__aeabi_dcmplt>
 800659c:	2800      	cmp	r0, #0
 800659e:	d163      	bne.n	8006668 <_dtoa_r+0x608>
 80065a0:	4642      	mov	r2, r8
 80065a2:	464b      	mov	r3, r9
 80065a4:	4936      	ldr	r1, [pc, #216]	; (8006680 <_dtoa_r+0x620>)
 80065a6:	2000      	movs	r0, #0
 80065a8:	f7f9 fe6e 	bl	8000288 <__aeabi_dsub>
 80065ac:	4652      	mov	r2, sl
 80065ae:	465b      	mov	r3, fp
 80065b0:	f7fa fa94 	bl	8000adc <__aeabi_dcmplt>
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f040 80b5 	bne.w	8006724 <_dtoa_r+0x6c4>
 80065ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065bc:	429d      	cmp	r5, r3
 80065be:	d081      	beq.n	80064c4 <_dtoa_r+0x464>
 80065c0:	4b30      	ldr	r3, [pc, #192]	; (8006684 <_dtoa_r+0x624>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	4650      	mov	r0, sl
 80065c6:	4659      	mov	r1, fp
 80065c8:	f7fa f816 	bl	80005f8 <__aeabi_dmul>
 80065cc:	4b2d      	ldr	r3, [pc, #180]	; (8006684 <_dtoa_r+0x624>)
 80065ce:	4682      	mov	sl, r0
 80065d0:	468b      	mov	fp, r1
 80065d2:	4640      	mov	r0, r8
 80065d4:	4649      	mov	r1, r9
 80065d6:	2200      	movs	r2, #0
 80065d8:	f7fa f80e 	bl	80005f8 <__aeabi_dmul>
 80065dc:	4680      	mov	r8, r0
 80065de:	4689      	mov	r9, r1
 80065e0:	e7c6      	b.n	8006570 <_dtoa_r+0x510>
 80065e2:	4650      	mov	r0, sl
 80065e4:	4659      	mov	r1, fp
 80065e6:	f7fa f807 	bl	80005f8 <__aeabi_dmul>
 80065ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80065ec:	9d01      	ldr	r5, [sp, #4]
 80065ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80065f0:	4682      	mov	sl, r0
 80065f2:	468b      	mov	fp, r1
 80065f4:	4649      	mov	r1, r9
 80065f6:	4640      	mov	r0, r8
 80065f8:	f7fa faae 	bl	8000b58 <__aeabi_d2iz>
 80065fc:	4606      	mov	r6, r0
 80065fe:	f7f9 ff91 	bl	8000524 <__aeabi_i2d>
 8006602:	3630      	adds	r6, #48	; 0x30
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4640      	mov	r0, r8
 800660a:	4649      	mov	r1, r9
 800660c:	f7f9 fe3c 	bl	8000288 <__aeabi_dsub>
 8006610:	f805 6b01 	strb.w	r6, [r5], #1
 8006614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006616:	429d      	cmp	r5, r3
 8006618:	4680      	mov	r8, r0
 800661a:	4689      	mov	r9, r1
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	d124      	bne.n	800666c <_dtoa_r+0x60c>
 8006622:	4b1b      	ldr	r3, [pc, #108]	; (8006690 <_dtoa_r+0x630>)
 8006624:	4650      	mov	r0, sl
 8006626:	4659      	mov	r1, fp
 8006628:	f7f9 fe30 	bl	800028c <__adddf3>
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4640      	mov	r0, r8
 8006632:	4649      	mov	r1, r9
 8006634:	f7fa fa70 	bl	8000b18 <__aeabi_dcmpgt>
 8006638:	2800      	cmp	r0, #0
 800663a:	d173      	bne.n	8006724 <_dtoa_r+0x6c4>
 800663c:	4652      	mov	r2, sl
 800663e:	465b      	mov	r3, fp
 8006640:	4913      	ldr	r1, [pc, #76]	; (8006690 <_dtoa_r+0x630>)
 8006642:	2000      	movs	r0, #0
 8006644:	f7f9 fe20 	bl	8000288 <__aeabi_dsub>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4640      	mov	r0, r8
 800664e:	4649      	mov	r1, r9
 8006650:	f7fa fa44 	bl	8000adc <__aeabi_dcmplt>
 8006654:	2800      	cmp	r0, #0
 8006656:	f43f af35 	beq.w	80064c4 <_dtoa_r+0x464>
 800665a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800665c:	1e6b      	subs	r3, r5, #1
 800665e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006660:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006664:	2b30      	cmp	r3, #48	; 0x30
 8006666:	d0f8      	beq.n	800665a <_dtoa_r+0x5fa>
 8006668:	9700      	str	r7, [sp, #0]
 800666a:	e049      	b.n	8006700 <_dtoa_r+0x6a0>
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <_dtoa_r+0x624>)
 800666e:	f7f9 ffc3 	bl	80005f8 <__aeabi_dmul>
 8006672:	4680      	mov	r8, r0
 8006674:	4689      	mov	r9, r1
 8006676:	e7bd      	b.n	80065f4 <_dtoa_r+0x594>
 8006678:	08008630 	.word	0x08008630
 800667c:	08008608 	.word	0x08008608
 8006680:	3ff00000 	.word	0x3ff00000
 8006684:	40240000 	.word	0x40240000
 8006688:	401c0000 	.word	0x401c0000
 800668c:	40140000 	.word	0x40140000
 8006690:	3fe00000 	.word	0x3fe00000
 8006694:	9d01      	ldr	r5, [sp, #4]
 8006696:	4656      	mov	r6, sl
 8006698:	465f      	mov	r7, fp
 800669a:	4642      	mov	r2, r8
 800669c:	464b      	mov	r3, r9
 800669e:	4630      	mov	r0, r6
 80066a0:	4639      	mov	r1, r7
 80066a2:	f7fa f8d3 	bl	800084c <__aeabi_ddiv>
 80066a6:	f7fa fa57 	bl	8000b58 <__aeabi_d2iz>
 80066aa:	4682      	mov	sl, r0
 80066ac:	f7f9 ff3a 	bl	8000524 <__aeabi_i2d>
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	f7f9 ffa0 	bl	80005f8 <__aeabi_dmul>
 80066b8:	4602      	mov	r2, r0
 80066ba:	460b      	mov	r3, r1
 80066bc:	4630      	mov	r0, r6
 80066be:	4639      	mov	r1, r7
 80066c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80066c4:	f7f9 fde0 	bl	8000288 <__aeabi_dsub>
 80066c8:	f805 6b01 	strb.w	r6, [r5], #1
 80066cc:	9e01      	ldr	r6, [sp, #4]
 80066ce:	9f03      	ldr	r7, [sp, #12]
 80066d0:	1bae      	subs	r6, r5, r6
 80066d2:	42b7      	cmp	r7, r6
 80066d4:	4602      	mov	r2, r0
 80066d6:	460b      	mov	r3, r1
 80066d8:	d135      	bne.n	8006746 <_dtoa_r+0x6e6>
 80066da:	f7f9 fdd7 	bl	800028c <__adddf3>
 80066de:	4642      	mov	r2, r8
 80066e0:	464b      	mov	r3, r9
 80066e2:	4606      	mov	r6, r0
 80066e4:	460f      	mov	r7, r1
 80066e6:	f7fa fa17 	bl	8000b18 <__aeabi_dcmpgt>
 80066ea:	b9d0      	cbnz	r0, 8006722 <_dtoa_r+0x6c2>
 80066ec:	4642      	mov	r2, r8
 80066ee:	464b      	mov	r3, r9
 80066f0:	4630      	mov	r0, r6
 80066f2:	4639      	mov	r1, r7
 80066f4:	f7fa f9e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80066f8:	b110      	cbz	r0, 8006700 <_dtoa_r+0x6a0>
 80066fa:	f01a 0f01 	tst.w	sl, #1
 80066fe:	d110      	bne.n	8006722 <_dtoa_r+0x6c2>
 8006700:	4620      	mov	r0, r4
 8006702:	ee18 1a10 	vmov	r1, s16
 8006706:	f000 faf3 	bl	8006cf0 <_Bfree>
 800670a:	2300      	movs	r3, #0
 800670c:	9800      	ldr	r0, [sp, #0]
 800670e:	702b      	strb	r3, [r5, #0]
 8006710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006712:	3001      	adds	r0, #1
 8006714:	6018      	str	r0, [r3, #0]
 8006716:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006718:	2b00      	cmp	r3, #0
 800671a:	f43f acf1 	beq.w	8006100 <_dtoa_r+0xa0>
 800671e:	601d      	str	r5, [r3, #0]
 8006720:	e4ee      	b.n	8006100 <_dtoa_r+0xa0>
 8006722:	9f00      	ldr	r7, [sp, #0]
 8006724:	462b      	mov	r3, r5
 8006726:	461d      	mov	r5, r3
 8006728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800672c:	2a39      	cmp	r2, #57	; 0x39
 800672e:	d106      	bne.n	800673e <_dtoa_r+0x6de>
 8006730:	9a01      	ldr	r2, [sp, #4]
 8006732:	429a      	cmp	r2, r3
 8006734:	d1f7      	bne.n	8006726 <_dtoa_r+0x6c6>
 8006736:	9901      	ldr	r1, [sp, #4]
 8006738:	2230      	movs	r2, #48	; 0x30
 800673a:	3701      	adds	r7, #1
 800673c:	700a      	strb	r2, [r1, #0]
 800673e:	781a      	ldrb	r2, [r3, #0]
 8006740:	3201      	adds	r2, #1
 8006742:	701a      	strb	r2, [r3, #0]
 8006744:	e790      	b.n	8006668 <_dtoa_r+0x608>
 8006746:	4ba6      	ldr	r3, [pc, #664]	; (80069e0 <_dtoa_r+0x980>)
 8006748:	2200      	movs	r2, #0
 800674a:	f7f9 ff55 	bl	80005f8 <__aeabi_dmul>
 800674e:	2200      	movs	r2, #0
 8006750:	2300      	movs	r3, #0
 8006752:	4606      	mov	r6, r0
 8006754:	460f      	mov	r7, r1
 8006756:	f7fa f9b7 	bl	8000ac8 <__aeabi_dcmpeq>
 800675a:	2800      	cmp	r0, #0
 800675c:	d09d      	beq.n	800669a <_dtoa_r+0x63a>
 800675e:	e7cf      	b.n	8006700 <_dtoa_r+0x6a0>
 8006760:	9a08      	ldr	r2, [sp, #32]
 8006762:	2a00      	cmp	r2, #0
 8006764:	f000 80d7 	beq.w	8006916 <_dtoa_r+0x8b6>
 8006768:	9a06      	ldr	r2, [sp, #24]
 800676a:	2a01      	cmp	r2, #1
 800676c:	f300 80ba 	bgt.w	80068e4 <_dtoa_r+0x884>
 8006770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006772:	2a00      	cmp	r2, #0
 8006774:	f000 80b2 	beq.w	80068dc <_dtoa_r+0x87c>
 8006778:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800677c:	9e07      	ldr	r6, [sp, #28]
 800677e:	9d04      	ldr	r5, [sp, #16]
 8006780:	9a04      	ldr	r2, [sp, #16]
 8006782:	441a      	add	r2, r3
 8006784:	9204      	str	r2, [sp, #16]
 8006786:	9a05      	ldr	r2, [sp, #20]
 8006788:	2101      	movs	r1, #1
 800678a:	441a      	add	r2, r3
 800678c:	4620      	mov	r0, r4
 800678e:	9205      	str	r2, [sp, #20]
 8006790:	f000 fb66 	bl	8006e60 <__i2b>
 8006794:	4607      	mov	r7, r0
 8006796:	2d00      	cmp	r5, #0
 8006798:	dd0c      	ble.n	80067b4 <_dtoa_r+0x754>
 800679a:	9b05      	ldr	r3, [sp, #20]
 800679c:	2b00      	cmp	r3, #0
 800679e:	dd09      	ble.n	80067b4 <_dtoa_r+0x754>
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	9a04      	ldr	r2, [sp, #16]
 80067a4:	bfa8      	it	ge
 80067a6:	462b      	movge	r3, r5
 80067a8:	1ad2      	subs	r2, r2, r3
 80067aa:	9204      	str	r2, [sp, #16]
 80067ac:	9a05      	ldr	r2, [sp, #20]
 80067ae:	1aed      	subs	r5, r5, r3
 80067b0:	1ad3      	subs	r3, r2, r3
 80067b2:	9305      	str	r3, [sp, #20]
 80067b4:	9b07      	ldr	r3, [sp, #28]
 80067b6:	b31b      	cbz	r3, 8006800 <_dtoa_r+0x7a0>
 80067b8:	9b08      	ldr	r3, [sp, #32]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 80af 	beq.w	800691e <_dtoa_r+0x8be>
 80067c0:	2e00      	cmp	r6, #0
 80067c2:	dd13      	ble.n	80067ec <_dtoa_r+0x78c>
 80067c4:	4639      	mov	r1, r7
 80067c6:	4632      	mov	r2, r6
 80067c8:	4620      	mov	r0, r4
 80067ca:	f000 fc09 	bl	8006fe0 <__pow5mult>
 80067ce:	ee18 2a10 	vmov	r2, s16
 80067d2:	4601      	mov	r1, r0
 80067d4:	4607      	mov	r7, r0
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 fb58 	bl	8006e8c <__multiply>
 80067dc:	ee18 1a10 	vmov	r1, s16
 80067e0:	4680      	mov	r8, r0
 80067e2:	4620      	mov	r0, r4
 80067e4:	f000 fa84 	bl	8006cf0 <_Bfree>
 80067e8:	ee08 8a10 	vmov	s16, r8
 80067ec:	9b07      	ldr	r3, [sp, #28]
 80067ee:	1b9a      	subs	r2, r3, r6
 80067f0:	d006      	beq.n	8006800 <_dtoa_r+0x7a0>
 80067f2:	ee18 1a10 	vmov	r1, s16
 80067f6:	4620      	mov	r0, r4
 80067f8:	f000 fbf2 	bl	8006fe0 <__pow5mult>
 80067fc:	ee08 0a10 	vmov	s16, r0
 8006800:	2101      	movs	r1, #1
 8006802:	4620      	mov	r0, r4
 8006804:	f000 fb2c 	bl	8006e60 <__i2b>
 8006808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	4606      	mov	r6, r0
 800680e:	f340 8088 	ble.w	8006922 <_dtoa_r+0x8c2>
 8006812:	461a      	mov	r2, r3
 8006814:	4601      	mov	r1, r0
 8006816:	4620      	mov	r0, r4
 8006818:	f000 fbe2 	bl	8006fe0 <__pow5mult>
 800681c:	9b06      	ldr	r3, [sp, #24]
 800681e:	2b01      	cmp	r3, #1
 8006820:	4606      	mov	r6, r0
 8006822:	f340 8081 	ble.w	8006928 <_dtoa_r+0x8c8>
 8006826:	f04f 0800 	mov.w	r8, #0
 800682a:	6933      	ldr	r3, [r6, #16]
 800682c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006830:	6918      	ldr	r0, [r3, #16]
 8006832:	f000 fac5 	bl	8006dc0 <__hi0bits>
 8006836:	f1c0 0020 	rsb	r0, r0, #32
 800683a:	9b05      	ldr	r3, [sp, #20]
 800683c:	4418      	add	r0, r3
 800683e:	f010 001f 	ands.w	r0, r0, #31
 8006842:	f000 8092 	beq.w	800696a <_dtoa_r+0x90a>
 8006846:	f1c0 0320 	rsb	r3, r0, #32
 800684a:	2b04      	cmp	r3, #4
 800684c:	f340 808a 	ble.w	8006964 <_dtoa_r+0x904>
 8006850:	f1c0 001c 	rsb	r0, r0, #28
 8006854:	9b04      	ldr	r3, [sp, #16]
 8006856:	4403      	add	r3, r0
 8006858:	9304      	str	r3, [sp, #16]
 800685a:	9b05      	ldr	r3, [sp, #20]
 800685c:	4403      	add	r3, r0
 800685e:	4405      	add	r5, r0
 8006860:	9305      	str	r3, [sp, #20]
 8006862:	9b04      	ldr	r3, [sp, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	dd07      	ble.n	8006878 <_dtoa_r+0x818>
 8006868:	ee18 1a10 	vmov	r1, s16
 800686c:	461a      	mov	r2, r3
 800686e:	4620      	mov	r0, r4
 8006870:	f000 fc10 	bl	8007094 <__lshift>
 8006874:	ee08 0a10 	vmov	s16, r0
 8006878:	9b05      	ldr	r3, [sp, #20]
 800687a:	2b00      	cmp	r3, #0
 800687c:	dd05      	ble.n	800688a <_dtoa_r+0x82a>
 800687e:	4631      	mov	r1, r6
 8006880:	461a      	mov	r2, r3
 8006882:	4620      	mov	r0, r4
 8006884:	f000 fc06 	bl	8007094 <__lshift>
 8006888:	4606      	mov	r6, r0
 800688a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d06e      	beq.n	800696e <_dtoa_r+0x90e>
 8006890:	ee18 0a10 	vmov	r0, s16
 8006894:	4631      	mov	r1, r6
 8006896:	f000 fc6d 	bl	8007174 <__mcmp>
 800689a:	2800      	cmp	r0, #0
 800689c:	da67      	bge.n	800696e <_dtoa_r+0x90e>
 800689e:	9b00      	ldr	r3, [sp, #0]
 80068a0:	3b01      	subs	r3, #1
 80068a2:	ee18 1a10 	vmov	r1, s16
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	220a      	movs	r2, #10
 80068aa:	2300      	movs	r3, #0
 80068ac:	4620      	mov	r0, r4
 80068ae:	f000 fa41 	bl	8006d34 <__multadd>
 80068b2:	9b08      	ldr	r3, [sp, #32]
 80068b4:	ee08 0a10 	vmov	s16, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 81b1 	beq.w	8006c20 <_dtoa_r+0xbc0>
 80068be:	2300      	movs	r3, #0
 80068c0:	4639      	mov	r1, r7
 80068c2:	220a      	movs	r2, #10
 80068c4:	4620      	mov	r0, r4
 80068c6:	f000 fa35 	bl	8006d34 <__multadd>
 80068ca:	9b02      	ldr	r3, [sp, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	4607      	mov	r7, r0
 80068d0:	f300 808e 	bgt.w	80069f0 <_dtoa_r+0x990>
 80068d4:	9b06      	ldr	r3, [sp, #24]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	dc51      	bgt.n	800697e <_dtoa_r+0x91e>
 80068da:	e089      	b.n	80069f0 <_dtoa_r+0x990>
 80068dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80068e2:	e74b      	b.n	800677c <_dtoa_r+0x71c>
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	1e5e      	subs	r6, r3, #1
 80068e8:	9b07      	ldr	r3, [sp, #28]
 80068ea:	42b3      	cmp	r3, r6
 80068ec:	bfbf      	itttt	lt
 80068ee:	9b07      	ldrlt	r3, [sp, #28]
 80068f0:	9607      	strlt	r6, [sp, #28]
 80068f2:	1af2      	sublt	r2, r6, r3
 80068f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80068f6:	bfb6      	itet	lt
 80068f8:	189b      	addlt	r3, r3, r2
 80068fa:	1b9e      	subge	r6, r3, r6
 80068fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80068fe:	9b03      	ldr	r3, [sp, #12]
 8006900:	bfb8      	it	lt
 8006902:	2600      	movlt	r6, #0
 8006904:	2b00      	cmp	r3, #0
 8006906:	bfb7      	itett	lt
 8006908:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800690c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006910:	1a9d      	sublt	r5, r3, r2
 8006912:	2300      	movlt	r3, #0
 8006914:	e734      	b.n	8006780 <_dtoa_r+0x720>
 8006916:	9e07      	ldr	r6, [sp, #28]
 8006918:	9d04      	ldr	r5, [sp, #16]
 800691a:	9f08      	ldr	r7, [sp, #32]
 800691c:	e73b      	b.n	8006796 <_dtoa_r+0x736>
 800691e:	9a07      	ldr	r2, [sp, #28]
 8006920:	e767      	b.n	80067f2 <_dtoa_r+0x792>
 8006922:	9b06      	ldr	r3, [sp, #24]
 8006924:	2b01      	cmp	r3, #1
 8006926:	dc18      	bgt.n	800695a <_dtoa_r+0x8fa>
 8006928:	f1ba 0f00 	cmp.w	sl, #0
 800692c:	d115      	bne.n	800695a <_dtoa_r+0x8fa>
 800692e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006932:	b993      	cbnz	r3, 800695a <_dtoa_r+0x8fa>
 8006934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006938:	0d1b      	lsrs	r3, r3, #20
 800693a:	051b      	lsls	r3, r3, #20
 800693c:	b183      	cbz	r3, 8006960 <_dtoa_r+0x900>
 800693e:	9b04      	ldr	r3, [sp, #16]
 8006940:	3301      	adds	r3, #1
 8006942:	9304      	str	r3, [sp, #16]
 8006944:	9b05      	ldr	r3, [sp, #20]
 8006946:	3301      	adds	r3, #1
 8006948:	9305      	str	r3, [sp, #20]
 800694a:	f04f 0801 	mov.w	r8, #1
 800694e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006950:	2b00      	cmp	r3, #0
 8006952:	f47f af6a 	bne.w	800682a <_dtoa_r+0x7ca>
 8006956:	2001      	movs	r0, #1
 8006958:	e76f      	b.n	800683a <_dtoa_r+0x7da>
 800695a:	f04f 0800 	mov.w	r8, #0
 800695e:	e7f6      	b.n	800694e <_dtoa_r+0x8ee>
 8006960:	4698      	mov	r8, r3
 8006962:	e7f4      	b.n	800694e <_dtoa_r+0x8ee>
 8006964:	f43f af7d 	beq.w	8006862 <_dtoa_r+0x802>
 8006968:	4618      	mov	r0, r3
 800696a:	301c      	adds	r0, #28
 800696c:	e772      	b.n	8006854 <_dtoa_r+0x7f4>
 800696e:	9b03      	ldr	r3, [sp, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	dc37      	bgt.n	80069e4 <_dtoa_r+0x984>
 8006974:	9b06      	ldr	r3, [sp, #24]
 8006976:	2b02      	cmp	r3, #2
 8006978:	dd34      	ble.n	80069e4 <_dtoa_r+0x984>
 800697a:	9b03      	ldr	r3, [sp, #12]
 800697c:	9302      	str	r3, [sp, #8]
 800697e:	9b02      	ldr	r3, [sp, #8]
 8006980:	b96b      	cbnz	r3, 800699e <_dtoa_r+0x93e>
 8006982:	4631      	mov	r1, r6
 8006984:	2205      	movs	r2, #5
 8006986:	4620      	mov	r0, r4
 8006988:	f000 f9d4 	bl	8006d34 <__multadd>
 800698c:	4601      	mov	r1, r0
 800698e:	4606      	mov	r6, r0
 8006990:	ee18 0a10 	vmov	r0, s16
 8006994:	f000 fbee 	bl	8007174 <__mcmp>
 8006998:	2800      	cmp	r0, #0
 800699a:	f73f adbb 	bgt.w	8006514 <_dtoa_r+0x4b4>
 800699e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069a0:	9d01      	ldr	r5, [sp, #4]
 80069a2:	43db      	mvns	r3, r3
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	4631      	mov	r1, r6
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 f99f 	bl	8006cf0 <_Bfree>
 80069b2:	2f00      	cmp	r7, #0
 80069b4:	f43f aea4 	beq.w	8006700 <_dtoa_r+0x6a0>
 80069b8:	f1b8 0f00 	cmp.w	r8, #0
 80069bc:	d005      	beq.n	80069ca <_dtoa_r+0x96a>
 80069be:	45b8      	cmp	r8, r7
 80069c0:	d003      	beq.n	80069ca <_dtoa_r+0x96a>
 80069c2:	4641      	mov	r1, r8
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 f993 	bl	8006cf0 <_Bfree>
 80069ca:	4639      	mov	r1, r7
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 f98f 	bl	8006cf0 <_Bfree>
 80069d2:	e695      	b.n	8006700 <_dtoa_r+0x6a0>
 80069d4:	2600      	movs	r6, #0
 80069d6:	4637      	mov	r7, r6
 80069d8:	e7e1      	b.n	800699e <_dtoa_r+0x93e>
 80069da:	9700      	str	r7, [sp, #0]
 80069dc:	4637      	mov	r7, r6
 80069de:	e599      	b.n	8006514 <_dtoa_r+0x4b4>
 80069e0:	40240000 	.word	0x40240000
 80069e4:	9b08      	ldr	r3, [sp, #32]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 80ca 	beq.w	8006b80 <_dtoa_r+0xb20>
 80069ec:	9b03      	ldr	r3, [sp, #12]
 80069ee:	9302      	str	r3, [sp, #8]
 80069f0:	2d00      	cmp	r5, #0
 80069f2:	dd05      	ble.n	8006a00 <_dtoa_r+0x9a0>
 80069f4:	4639      	mov	r1, r7
 80069f6:	462a      	mov	r2, r5
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 fb4b 	bl	8007094 <__lshift>
 80069fe:	4607      	mov	r7, r0
 8006a00:	f1b8 0f00 	cmp.w	r8, #0
 8006a04:	d05b      	beq.n	8006abe <_dtoa_r+0xa5e>
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 f931 	bl	8006c70 <_Balloc>
 8006a0e:	4605      	mov	r5, r0
 8006a10:	b928      	cbnz	r0, 8006a1e <_dtoa_r+0x9be>
 8006a12:	4b87      	ldr	r3, [pc, #540]	; (8006c30 <_dtoa_r+0xbd0>)
 8006a14:	4602      	mov	r2, r0
 8006a16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006a1a:	f7ff bb3b 	b.w	8006094 <_dtoa_r+0x34>
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	3202      	adds	r2, #2
 8006a22:	0092      	lsls	r2, r2, #2
 8006a24:	f107 010c 	add.w	r1, r7, #12
 8006a28:	300c      	adds	r0, #12
 8006a2a:	f000 f913 	bl	8006c54 <memcpy>
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4629      	mov	r1, r5
 8006a32:	4620      	mov	r0, r4
 8006a34:	f000 fb2e 	bl	8007094 <__lshift>
 8006a38:	9b01      	ldr	r3, [sp, #4]
 8006a3a:	f103 0901 	add.w	r9, r3, #1
 8006a3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006a42:	4413      	add	r3, r2
 8006a44:	9305      	str	r3, [sp, #20]
 8006a46:	f00a 0301 	and.w	r3, sl, #1
 8006a4a:	46b8      	mov	r8, r7
 8006a4c:	9304      	str	r3, [sp, #16]
 8006a4e:	4607      	mov	r7, r0
 8006a50:	4631      	mov	r1, r6
 8006a52:	ee18 0a10 	vmov	r0, s16
 8006a56:	f7ff fa75 	bl	8005f44 <quorem>
 8006a5a:	4641      	mov	r1, r8
 8006a5c:	9002      	str	r0, [sp, #8]
 8006a5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006a62:	ee18 0a10 	vmov	r0, s16
 8006a66:	f000 fb85 	bl	8007174 <__mcmp>
 8006a6a:	463a      	mov	r2, r7
 8006a6c:	9003      	str	r0, [sp, #12]
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4620      	mov	r0, r4
 8006a72:	f000 fb9b 	bl	80071ac <__mdiff>
 8006a76:	68c2      	ldr	r2, [r0, #12]
 8006a78:	f109 3bff 	add.w	fp, r9, #4294967295
 8006a7c:	4605      	mov	r5, r0
 8006a7e:	bb02      	cbnz	r2, 8006ac2 <_dtoa_r+0xa62>
 8006a80:	4601      	mov	r1, r0
 8006a82:	ee18 0a10 	vmov	r0, s16
 8006a86:	f000 fb75 	bl	8007174 <__mcmp>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	4629      	mov	r1, r5
 8006a8e:	4620      	mov	r0, r4
 8006a90:	9207      	str	r2, [sp, #28]
 8006a92:	f000 f92d 	bl	8006cf0 <_Bfree>
 8006a96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006a9a:	ea43 0102 	orr.w	r1, r3, r2
 8006a9e:	9b04      	ldr	r3, [sp, #16]
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	464d      	mov	r5, r9
 8006aa4:	d10f      	bne.n	8006ac6 <_dtoa_r+0xa66>
 8006aa6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006aaa:	d02a      	beq.n	8006b02 <_dtoa_r+0xaa2>
 8006aac:	9b03      	ldr	r3, [sp, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	dd02      	ble.n	8006ab8 <_dtoa_r+0xa58>
 8006ab2:	9b02      	ldr	r3, [sp, #8]
 8006ab4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ab8:	f88b a000 	strb.w	sl, [fp]
 8006abc:	e775      	b.n	80069aa <_dtoa_r+0x94a>
 8006abe:	4638      	mov	r0, r7
 8006ac0:	e7ba      	b.n	8006a38 <_dtoa_r+0x9d8>
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	e7e2      	b.n	8006a8c <_dtoa_r+0xa2c>
 8006ac6:	9b03      	ldr	r3, [sp, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	db04      	blt.n	8006ad6 <_dtoa_r+0xa76>
 8006acc:	9906      	ldr	r1, [sp, #24]
 8006ace:	430b      	orrs	r3, r1
 8006ad0:	9904      	ldr	r1, [sp, #16]
 8006ad2:	430b      	orrs	r3, r1
 8006ad4:	d122      	bne.n	8006b1c <_dtoa_r+0xabc>
 8006ad6:	2a00      	cmp	r2, #0
 8006ad8:	ddee      	ble.n	8006ab8 <_dtoa_r+0xa58>
 8006ada:	ee18 1a10 	vmov	r1, s16
 8006ade:	2201      	movs	r2, #1
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 fad7 	bl	8007094 <__lshift>
 8006ae6:	4631      	mov	r1, r6
 8006ae8:	ee08 0a10 	vmov	s16, r0
 8006aec:	f000 fb42 	bl	8007174 <__mcmp>
 8006af0:	2800      	cmp	r0, #0
 8006af2:	dc03      	bgt.n	8006afc <_dtoa_r+0xa9c>
 8006af4:	d1e0      	bne.n	8006ab8 <_dtoa_r+0xa58>
 8006af6:	f01a 0f01 	tst.w	sl, #1
 8006afa:	d0dd      	beq.n	8006ab8 <_dtoa_r+0xa58>
 8006afc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b00:	d1d7      	bne.n	8006ab2 <_dtoa_r+0xa52>
 8006b02:	2339      	movs	r3, #57	; 0x39
 8006b04:	f88b 3000 	strb.w	r3, [fp]
 8006b08:	462b      	mov	r3, r5
 8006b0a:	461d      	mov	r5, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006b12:	2a39      	cmp	r2, #57	; 0x39
 8006b14:	d071      	beq.n	8006bfa <_dtoa_r+0xb9a>
 8006b16:	3201      	adds	r2, #1
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	e746      	b.n	80069aa <_dtoa_r+0x94a>
 8006b1c:	2a00      	cmp	r2, #0
 8006b1e:	dd07      	ble.n	8006b30 <_dtoa_r+0xad0>
 8006b20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b24:	d0ed      	beq.n	8006b02 <_dtoa_r+0xaa2>
 8006b26:	f10a 0301 	add.w	r3, sl, #1
 8006b2a:	f88b 3000 	strb.w	r3, [fp]
 8006b2e:	e73c      	b.n	80069aa <_dtoa_r+0x94a>
 8006b30:	9b05      	ldr	r3, [sp, #20]
 8006b32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006b36:	4599      	cmp	r9, r3
 8006b38:	d047      	beq.n	8006bca <_dtoa_r+0xb6a>
 8006b3a:	ee18 1a10 	vmov	r1, s16
 8006b3e:	2300      	movs	r3, #0
 8006b40:	220a      	movs	r2, #10
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 f8f6 	bl	8006d34 <__multadd>
 8006b48:	45b8      	cmp	r8, r7
 8006b4a:	ee08 0a10 	vmov	s16, r0
 8006b4e:	f04f 0300 	mov.w	r3, #0
 8006b52:	f04f 020a 	mov.w	r2, #10
 8006b56:	4641      	mov	r1, r8
 8006b58:	4620      	mov	r0, r4
 8006b5a:	d106      	bne.n	8006b6a <_dtoa_r+0xb0a>
 8006b5c:	f000 f8ea 	bl	8006d34 <__multadd>
 8006b60:	4680      	mov	r8, r0
 8006b62:	4607      	mov	r7, r0
 8006b64:	f109 0901 	add.w	r9, r9, #1
 8006b68:	e772      	b.n	8006a50 <_dtoa_r+0x9f0>
 8006b6a:	f000 f8e3 	bl	8006d34 <__multadd>
 8006b6e:	4639      	mov	r1, r7
 8006b70:	4680      	mov	r8, r0
 8006b72:	2300      	movs	r3, #0
 8006b74:	220a      	movs	r2, #10
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 f8dc 	bl	8006d34 <__multadd>
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	e7f1      	b.n	8006b64 <_dtoa_r+0xb04>
 8006b80:	9b03      	ldr	r3, [sp, #12]
 8006b82:	9302      	str	r3, [sp, #8]
 8006b84:	9d01      	ldr	r5, [sp, #4]
 8006b86:	ee18 0a10 	vmov	r0, s16
 8006b8a:	4631      	mov	r1, r6
 8006b8c:	f7ff f9da 	bl	8005f44 <quorem>
 8006b90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b94:	9b01      	ldr	r3, [sp, #4]
 8006b96:	f805 ab01 	strb.w	sl, [r5], #1
 8006b9a:	1aea      	subs	r2, r5, r3
 8006b9c:	9b02      	ldr	r3, [sp, #8]
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	dd09      	ble.n	8006bb6 <_dtoa_r+0xb56>
 8006ba2:	ee18 1a10 	vmov	r1, s16
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	220a      	movs	r2, #10
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 f8c2 	bl	8006d34 <__multadd>
 8006bb0:	ee08 0a10 	vmov	s16, r0
 8006bb4:	e7e7      	b.n	8006b86 <_dtoa_r+0xb26>
 8006bb6:	9b02      	ldr	r3, [sp, #8]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bfc8      	it	gt
 8006bbc:	461d      	movgt	r5, r3
 8006bbe:	9b01      	ldr	r3, [sp, #4]
 8006bc0:	bfd8      	it	le
 8006bc2:	2501      	movle	r5, #1
 8006bc4:	441d      	add	r5, r3
 8006bc6:	f04f 0800 	mov.w	r8, #0
 8006bca:	ee18 1a10 	vmov	r1, s16
 8006bce:	2201      	movs	r2, #1
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fa5f 	bl	8007094 <__lshift>
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	ee08 0a10 	vmov	s16, r0
 8006bdc:	f000 faca 	bl	8007174 <__mcmp>
 8006be0:	2800      	cmp	r0, #0
 8006be2:	dc91      	bgt.n	8006b08 <_dtoa_r+0xaa8>
 8006be4:	d102      	bne.n	8006bec <_dtoa_r+0xb8c>
 8006be6:	f01a 0f01 	tst.w	sl, #1
 8006bea:	d18d      	bne.n	8006b08 <_dtoa_r+0xaa8>
 8006bec:	462b      	mov	r3, r5
 8006bee:	461d      	mov	r5, r3
 8006bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bf4:	2a30      	cmp	r2, #48	; 0x30
 8006bf6:	d0fa      	beq.n	8006bee <_dtoa_r+0xb8e>
 8006bf8:	e6d7      	b.n	80069aa <_dtoa_r+0x94a>
 8006bfa:	9a01      	ldr	r2, [sp, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d184      	bne.n	8006b0a <_dtoa_r+0xaaa>
 8006c00:	9b00      	ldr	r3, [sp, #0]
 8006c02:	3301      	adds	r3, #1
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	2331      	movs	r3, #49	; 0x31
 8006c08:	7013      	strb	r3, [r2, #0]
 8006c0a:	e6ce      	b.n	80069aa <_dtoa_r+0x94a>
 8006c0c:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <_dtoa_r+0xbd4>)
 8006c0e:	f7ff ba95 	b.w	800613c <_dtoa_r+0xdc>
 8006c12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f47f aa6e 	bne.w	80060f6 <_dtoa_r+0x96>
 8006c1a:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <_dtoa_r+0xbd8>)
 8006c1c:	f7ff ba8e 	b.w	800613c <_dtoa_r+0xdc>
 8006c20:	9b02      	ldr	r3, [sp, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	dcae      	bgt.n	8006b84 <_dtoa_r+0xb24>
 8006c26:	9b06      	ldr	r3, [sp, #24]
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	f73f aea8 	bgt.w	800697e <_dtoa_r+0x91e>
 8006c2e:	e7a9      	b.n	8006b84 <_dtoa_r+0xb24>
 8006c30:	0800859b 	.word	0x0800859b
 8006c34:	080084f8 	.word	0x080084f8
 8006c38:	0800851c 	.word	0x0800851c

08006c3c <_localeconv_r>:
 8006c3c:	4800      	ldr	r0, [pc, #0]	; (8006c40 <_localeconv_r+0x4>)
 8006c3e:	4770      	bx	lr
 8006c40:	20000160 	.word	0x20000160

08006c44 <malloc>:
 8006c44:	4b02      	ldr	r3, [pc, #8]	; (8006c50 <malloc+0xc>)
 8006c46:	4601      	mov	r1, r0
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	f000 bc17 	b.w	800747c <_malloc_r>
 8006c4e:	bf00      	nop
 8006c50:	2000000c 	.word	0x2000000c

08006c54 <memcpy>:
 8006c54:	440a      	add	r2, r1
 8006c56:	4291      	cmp	r1, r2
 8006c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c5c:	d100      	bne.n	8006c60 <memcpy+0xc>
 8006c5e:	4770      	bx	lr
 8006c60:	b510      	push	{r4, lr}
 8006c62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c6a:	4291      	cmp	r1, r2
 8006c6c:	d1f9      	bne.n	8006c62 <memcpy+0xe>
 8006c6e:	bd10      	pop	{r4, pc}

08006c70 <_Balloc>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c74:	4604      	mov	r4, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	b976      	cbnz	r6, 8006c98 <_Balloc+0x28>
 8006c7a:	2010      	movs	r0, #16
 8006c7c:	f7ff ffe2 	bl	8006c44 <malloc>
 8006c80:	4602      	mov	r2, r0
 8006c82:	6260      	str	r0, [r4, #36]	; 0x24
 8006c84:	b920      	cbnz	r0, 8006c90 <_Balloc+0x20>
 8006c86:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <_Balloc+0x78>)
 8006c88:	4818      	ldr	r0, [pc, #96]	; (8006cec <_Balloc+0x7c>)
 8006c8a:	2166      	movs	r1, #102	; 0x66
 8006c8c:	f000 fdd6 	bl	800783c <__assert_func>
 8006c90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c94:	6006      	str	r6, [r0, #0]
 8006c96:	60c6      	str	r6, [r0, #12]
 8006c98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006c9a:	68f3      	ldr	r3, [r6, #12]
 8006c9c:	b183      	cbz	r3, 8006cc0 <_Balloc+0x50>
 8006c9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ca0:	68db      	ldr	r3, [r3, #12]
 8006ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ca6:	b9b8      	cbnz	r0, 8006cd8 <_Balloc+0x68>
 8006ca8:	2101      	movs	r1, #1
 8006caa:	fa01 f605 	lsl.w	r6, r1, r5
 8006cae:	1d72      	adds	r2, r6, #5
 8006cb0:	0092      	lsls	r2, r2, #2
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f000 fb60 	bl	8007378 <_calloc_r>
 8006cb8:	b160      	cbz	r0, 8006cd4 <_Balloc+0x64>
 8006cba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006cbe:	e00e      	b.n	8006cde <_Balloc+0x6e>
 8006cc0:	2221      	movs	r2, #33	; 0x21
 8006cc2:	2104      	movs	r1, #4
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f000 fb57 	bl	8007378 <_calloc_r>
 8006cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ccc:	60f0      	str	r0, [r6, #12]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e4      	bne.n	8006c9e <_Balloc+0x2e>
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	bd70      	pop	{r4, r5, r6, pc}
 8006cd8:	6802      	ldr	r2, [r0, #0]
 8006cda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cde:	2300      	movs	r3, #0
 8006ce0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ce4:	e7f7      	b.n	8006cd6 <_Balloc+0x66>
 8006ce6:	bf00      	nop
 8006ce8:	08008529 	.word	0x08008529
 8006cec:	080085ac 	.word	0x080085ac

08006cf0 <_Bfree>:
 8006cf0:	b570      	push	{r4, r5, r6, lr}
 8006cf2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	460c      	mov	r4, r1
 8006cf8:	b976      	cbnz	r6, 8006d18 <_Bfree+0x28>
 8006cfa:	2010      	movs	r0, #16
 8006cfc:	f7ff ffa2 	bl	8006c44 <malloc>
 8006d00:	4602      	mov	r2, r0
 8006d02:	6268      	str	r0, [r5, #36]	; 0x24
 8006d04:	b920      	cbnz	r0, 8006d10 <_Bfree+0x20>
 8006d06:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <_Bfree+0x3c>)
 8006d08:	4809      	ldr	r0, [pc, #36]	; (8006d30 <_Bfree+0x40>)
 8006d0a:	218a      	movs	r1, #138	; 0x8a
 8006d0c:	f000 fd96 	bl	800783c <__assert_func>
 8006d10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d14:	6006      	str	r6, [r0, #0]
 8006d16:	60c6      	str	r6, [r0, #12]
 8006d18:	b13c      	cbz	r4, 8006d2a <_Bfree+0x3a>
 8006d1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006d1c:	6862      	ldr	r2, [r4, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d24:	6021      	str	r1, [r4, #0]
 8006d26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d2a:	bd70      	pop	{r4, r5, r6, pc}
 8006d2c:	08008529 	.word	0x08008529
 8006d30:	080085ac 	.word	0x080085ac

08006d34 <__multadd>:
 8006d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d38:	690d      	ldr	r5, [r1, #16]
 8006d3a:	4607      	mov	r7, r0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	461e      	mov	r6, r3
 8006d40:	f101 0c14 	add.w	ip, r1, #20
 8006d44:	2000      	movs	r0, #0
 8006d46:	f8dc 3000 	ldr.w	r3, [ip]
 8006d4a:	b299      	uxth	r1, r3
 8006d4c:	fb02 6101 	mla	r1, r2, r1, r6
 8006d50:	0c1e      	lsrs	r6, r3, #16
 8006d52:	0c0b      	lsrs	r3, r1, #16
 8006d54:	fb02 3306 	mla	r3, r2, r6, r3
 8006d58:	b289      	uxth	r1, r1
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d60:	4285      	cmp	r5, r0
 8006d62:	f84c 1b04 	str.w	r1, [ip], #4
 8006d66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d6a:	dcec      	bgt.n	8006d46 <__multadd+0x12>
 8006d6c:	b30e      	cbz	r6, 8006db2 <__multadd+0x7e>
 8006d6e:	68a3      	ldr	r3, [r4, #8]
 8006d70:	42ab      	cmp	r3, r5
 8006d72:	dc19      	bgt.n	8006da8 <__multadd+0x74>
 8006d74:	6861      	ldr	r1, [r4, #4]
 8006d76:	4638      	mov	r0, r7
 8006d78:	3101      	adds	r1, #1
 8006d7a:	f7ff ff79 	bl	8006c70 <_Balloc>
 8006d7e:	4680      	mov	r8, r0
 8006d80:	b928      	cbnz	r0, 8006d8e <__multadd+0x5a>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <__multadd+0x84>)
 8006d86:	480d      	ldr	r0, [pc, #52]	; (8006dbc <__multadd+0x88>)
 8006d88:	21b5      	movs	r1, #181	; 0xb5
 8006d8a:	f000 fd57 	bl	800783c <__assert_func>
 8006d8e:	6922      	ldr	r2, [r4, #16]
 8006d90:	3202      	adds	r2, #2
 8006d92:	f104 010c 	add.w	r1, r4, #12
 8006d96:	0092      	lsls	r2, r2, #2
 8006d98:	300c      	adds	r0, #12
 8006d9a:	f7ff ff5b 	bl	8006c54 <memcpy>
 8006d9e:	4621      	mov	r1, r4
 8006da0:	4638      	mov	r0, r7
 8006da2:	f7ff ffa5 	bl	8006cf0 <_Bfree>
 8006da6:	4644      	mov	r4, r8
 8006da8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006dac:	3501      	adds	r5, #1
 8006dae:	615e      	str	r6, [r3, #20]
 8006db0:	6125      	str	r5, [r4, #16]
 8006db2:	4620      	mov	r0, r4
 8006db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db8:	0800859b 	.word	0x0800859b
 8006dbc:	080085ac 	.word	0x080085ac

08006dc0 <__hi0bits>:
 8006dc0:	0c03      	lsrs	r3, r0, #16
 8006dc2:	041b      	lsls	r3, r3, #16
 8006dc4:	b9d3      	cbnz	r3, 8006dfc <__hi0bits+0x3c>
 8006dc6:	0400      	lsls	r0, r0, #16
 8006dc8:	2310      	movs	r3, #16
 8006dca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006dce:	bf04      	itt	eq
 8006dd0:	0200      	lsleq	r0, r0, #8
 8006dd2:	3308      	addeq	r3, #8
 8006dd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006dd8:	bf04      	itt	eq
 8006dda:	0100      	lsleq	r0, r0, #4
 8006ddc:	3304      	addeq	r3, #4
 8006dde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006de2:	bf04      	itt	eq
 8006de4:	0080      	lsleq	r0, r0, #2
 8006de6:	3302      	addeq	r3, #2
 8006de8:	2800      	cmp	r0, #0
 8006dea:	db05      	blt.n	8006df8 <__hi0bits+0x38>
 8006dec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006df0:	f103 0301 	add.w	r3, r3, #1
 8006df4:	bf08      	it	eq
 8006df6:	2320      	moveq	r3, #32
 8006df8:	4618      	mov	r0, r3
 8006dfa:	4770      	bx	lr
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	e7e4      	b.n	8006dca <__hi0bits+0xa>

08006e00 <__lo0bits>:
 8006e00:	6803      	ldr	r3, [r0, #0]
 8006e02:	f013 0207 	ands.w	r2, r3, #7
 8006e06:	4601      	mov	r1, r0
 8006e08:	d00b      	beq.n	8006e22 <__lo0bits+0x22>
 8006e0a:	07da      	lsls	r2, r3, #31
 8006e0c:	d423      	bmi.n	8006e56 <__lo0bits+0x56>
 8006e0e:	0798      	lsls	r0, r3, #30
 8006e10:	bf49      	itett	mi
 8006e12:	085b      	lsrmi	r3, r3, #1
 8006e14:	089b      	lsrpl	r3, r3, #2
 8006e16:	2001      	movmi	r0, #1
 8006e18:	600b      	strmi	r3, [r1, #0]
 8006e1a:	bf5c      	itt	pl
 8006e1c:	600b      	strpl	r3, [r1, #0]
 8006e1e:	2002      	movpl	r0, #2
 8006e20:	4770      	bx	lr
 8006e22:	b298      	uxth	r0, r3
 8006e24:	b9a8      	cbnz	r0, 8006e52 <__lo0bits+0x52>
 8006e26:	0c1b      	lsrs	r3, r3, #16
 8006e28:	2010      	movs	r0, #16
 8006e2a:	b2da      	uxtb	r2, r3
 8006e2c:	b90a      	cbnz	r2, 8006e32 <__lo0bits+0x32>
 8006e2e:	3008      	adds	r0, #8
 8006e30:	0a1b      	lsrs	r3, r3, #8
 8006e32:	071a      	lsls	r2, r3, #28
 8006e34:	bf04      	itt	eq
 8006e36:	091b      	lsreq	r3, r3, #4
 8006e38:	3004      	addeq	r0, #4
 8006e3a:	079a      	lsls	r2, r3, #30
 8006e3c:	bf04      	itt	eq
 8006e3e:	089b      	lsreq	r3, r3, #2
 8006e40:	3002      	addeq	r0, #2
 8006e42:	07da      	lsls	r2, r3, #31
 8006e44:	d403      	bmi.n	8006e4e <__lo0bits+0x4e>
 8006e46:	085b      	lsrs	r3, r3, #1
 8006e48:	f100 0001 	add.w	r0, r0, #1
 8006e4c:	d005      	beq.n	8006e5a <__lo0bits+0x5a>
 8006e4e:	600b      	str	r3, [r1, #0]
 8006e50:	4770      	bx	lr
 8006e52:	4610      	mov	r0, r2
 8006e54:	e7e9      	b.n	8006e2a <__lo0bits+0x2a>
 8006e56:	2000      	movs	r0, #0
 8006e58:	4770      	bx	lr
 8006e5a:	2020      	movs	r0, #32
 8006e5c:	4770      	bx	lr
	...

08006e60 <__i2b>:
 8006e60:	b510      	push	{r4, lr}
 8006e62:	460c      	mov	r4, r1
 8006e64:	2101      	movs	r1, #1
 8006e66:	f7ff ff03 	bl	8006c70 <_Balloc>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	b928      	cbnz	r0, 8006e7a <__i2b+0x1a>
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <__i2b+0x24>)
 8006e70:	4805      	ldr	r0, [pc, #20]	; (8006e88 <__i2b+0x28>)
 8006e72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006e76:	f000 fce1 	bl	800783c <__assert_func>
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	6144      	str	r4, [r0, #20]
 8006e7e:	6103      	str	r3, [r0, #16]
 8006e80:	bd10      	pop	{r4, pc}
 8006e82:	bf00      	nop
 8006e84:	0800859b 	.word	0x0800859b
 8006e88:	080085ac 	.word	0x080085ac

08006e8c <__multiply>:
 8006e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e90:	4691      	mov	r9, r2
 8006e92:	690a      	ldr	r2, [r1, #16]
 8006e94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	bfb8      	it	lt
 8006e9c:	460b      	movlt	r3, r1
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	bfbc      	itt	lt
 8006ea2:	464c      	movlt	r4, r9
 8006ea4:	4699      	movlt	r9, r3
 8006ea6:	6927      	ldr	r7, [r4, #16]
 8006ea8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006eac:	68a3      	ldr	r3, [r4, #8]
 8006eae:	6861      	ldr	r1, [r4, #4]
 8006eb0:	eb07 060a 	add.w	r6, r7, sl
 8006eb4:	42b3      	cmp	r3, r6
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	bfb8      	it	lt
 8006eba:	3101      	addlt	r1, #1
 8006ebc:	f7ff fed8 	bl	8006c70 <_Balloc>
 8006ec0:	b930      	cbnz	r0, 8006ed0 <__multiply+0x44>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	4b44      	ldr	r3, [pc, #272]	; (8006fd8 <__multiply+0x14c>)
 8006ec6:	4845      	ldr	r0, [pc, #276]	; (8006fdc <__multiply+0x150>)
 8006ec8:	f240 115d 	movw	r1, #349	; 0x15d
 8006ecc:	f000 fcb6 	bl	800783c <__assert_func>
 8006ed0:	f100 0514 	add.w	r5, r0, #20
 8006ed4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006ed8:	462b      	mov	r3, r5
 8006eda:	2200      	movs	r2, #0
 8006edc:	4543      	cmp	r3, r8
 8006ede:	d321      	bcc.n	8006f24 <__multiply+0x98>
 8006ee0:	f104 0314 	add.w	r3, r4, #20
 8006ee4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006ee8:	f109 0314 	add.w	r3, r9, #20
 8006eec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ef0:	9202      	str	r2, [sp, #8]
 8006ef2:	1b3a      	subs	r2, r7, r4
 8006ef4:	3a15      	subs	r2, #21
 8006ef6:	f022 0203 	bic.w	r2, r2, #3
 8006efa:	3204      	adds	r2, #4
 8006efc:	f104 0115 	add.w	r1, r4, #21
 8006f00:	428f      	cmp	r7, r1
 8006f02:	bf38      	it	cc
 8006f04:	2204      	movcc	r2, #4
 8006f06:	9201      	str	r2, [sp, #4]
 8006f08:	9a02      	ldr	r2, [sp, #8]
 8006f0a:	9303      	str	r3, [sp, #12]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d80c      	bhi.n	8006f2a <__multiply+0x9e>
 8006f10:	2e00      	cmp	r6, #0
 8006f12:	dd03      	ble.n	8006f1c <__multiply+0x90>
 8006f14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d05a      	beq.n	8006fd2 <__multiply+0x146>
 8006f1c:	6106      	str	r6, [r0, #16]
 8006f1e:	b005      	add	sp, #20
 8006f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f24:	f843 2b04 	str.w	r2, [r3], #4
 8006f28:	e7d8      	b.n	8006edc <__multiply+0x50>
 8006f2a:	f8b3 a000 	ldrh.w	sl, [r3]
 8006f2e:	f1ba 0f00 	cmp.w	sl, #0
 8006f32:	d024      	beq.n	8006f7e <__multiply+0xf2>
 8006f34:	f104 0e14 	add.w	lr, r4, #20
 8006f38:	46a9      	mov	r9, r5
 8006f3a:	f04f 0c00 	mov.w	ip, #0
 8006f3e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006f42:	f8d9 1000 	ldr.w	r1, [r9]
 8006f46:	fa1f fb82 	uxth.w	fp, r2
 8006f4a:	b289      	uxth	r1, r1
 8006f4c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006f50:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006f54:	f8d9 2000 	ldr.w	r2, [r9]
 8006f58:	4461      	add	r1, ip
 8006f5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f5e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006f62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f66:	b289      	uxth	r1, r1
 8006f68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f6c:	4577      	cmp	r7, lr
 8006f6e:	f849 1b04 	str.w	r1, [r9], #4
 8006f72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006f76:	d8e2      	bhi.n	8006f3e <__multiply+0xb2>
 8006f78:	9a01      	ldr	r2, [sp, #4]
 8006f7a:	f845 c002 	str.w	ip, [r5, r2]
 8006f7e:	9a03      	ldr	r2, [sp, #12]
 8006f80:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006f84:	3304      	adds	r3, #4
 8006f86:	f1b9 0f00 	cmp.w	r9, #0
 8006f8a:	d020      	beq.n	8006fce <__multiply+0x142>
 8006f8c:	6829      	ldr	r1, [r5, #0]
 8006f8e:	f104 0c14 	add.w	ip, r4, #20
 8006f92:	46ae      	mov	lr, r5
 8006f94:	f04f 0a00 	mov.w	sl, #0
 8006f98:	f8bc b000 	ldrh.w	fp, [ip]
 8006f9c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006fa0:	fb09 220b 	mla	r2, r9, fp, r2
 8006fa4:	4492      	add	sl, r2
 8006fa6:	b289      	uxth	r1, r1
 8006fa8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006fac:	f84e 1b04 	str.w	r1, [lr], #4
 8006fb0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006fb4:	f8be 1000 	ldrh.w	r1, [lr]
 8006fb8:	0c12      	lsrs	r2, r2, #16
 8006fba:	fb09 1102 	mla	r1, r9, r2, r1
 8006fbe:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006fc2:	4567      	cmp	r7, ip
 8006fc4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006fc8:	d8e6      	bhi.n	8006f98 <__multiply+0x10c>
 8006fca:	9a01      	ldr	r2, [sp, #4]
 8006fcc:	50a9      	str	r1, [r5, r2]
 8006fce:	3504      	adds	r5, #4
 8006fd0:	e79a      	b.n	8006f08 <__multiply+0x7c>
 8006fd2:	3e01      	subs	r6, #1
 8006fd4:	e79c      	b.n	8006f10 <__multiply+0x84>
 8006fd6:	bf00      	nop
 8006fd8:	0800859b 	.word	0x0800859b
 8006fdc:	080085ac 	.word	0x080085ac

08006fe0 <__pow5mult>:
 8006fe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe4:	4615      	mov	r5, r2
 8006fe6:	f012 0203 	ands.w	r2, r2, #3
 8006fea:	4606      	mov	r6, r0
 8006fec:	460f      	mov	r7, r1
 8006fee:	d007      	beq.n	8007000 <__pow5mult+0x20>
 8006ff0:	4c25      	ldr	r4, [pc, #148]	; (8007088 <__pow5mult+0xa8>)
 8006ff2:	3a01      	subs	r2, #1
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ffa:	f7ff fe9b 	bl	8006d34 <__multadd>
 8006ffe:	4607      	mov	r7, r0
 8007000:	10ad      	asrs	r5, r5, #2
 8007002:	d03d      	beq.n	8007080 <__pow5mult+0xa0>
 8007004:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007006:	b97c      	cbnz	r4, 8007028 <__pow5mult+0x48>
 8007008:	2010      	movs	r0, #16
 800700a:	f7ff fe1b 	bl	8006c44 <malloc>
 800700e:	4602      	mov	r2, r0
 8007010:	6270      	str	r0, [r6, #36]	; 0x24
 8007012:	b928      	cbnz	r0, 8007020 <__pow5mult+0x40>
 8007014:	4b1d      	ldr	r3, [pc, #116]	; (800708c <__pow5mult+0xac>)
 8007016:	481e      	ldr	r0, [pc, #120]	; (8007090 <__pow5mult+0xb0>)
 8007018:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800701c:	f000 fc0e 	bl	800783c <__assert_func>
 8007020:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007024:	6004      	str	r4, [r0, #0]
 8007026:	60c4      	str	r4, [r0, #12]
 8007028:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800702c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007030:	b94c      	cbnz	r4, 8007046 <__pow5mult+0x66>
 8007032:	f240 2171 	movw	r1, #625	; 0x271
 8007036:	4630      	mov	r0, r6
 8007038:	f7ff ff12 	bl	8006e60 <__i2b>
 800703c:	2300      	movs	r3, #0
 800703e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007042:	4604      	mov	r4, r0
 8007044:	6003      	str	r3, [r0, #0]
 8007046:	f04f 0900 	mov.w	r9, #0
 800704a:	07eb      	lsls	r3, r5, #31
 800704c:	d50a      	bpl.n	8007064 <__pow5mult+0x84>
 800704e:	4639      	mov	r1, r7
 8007050:	4622      	mov	r2, r4
 8007052:	4630      	mov	r0, r6
 8007054:	f7ff ff1a 	bl	8006e8c <__multiply>
 8007058:	4639      	mov	r1, r7
 800705a:	4680      	mov	r8, r0
 800705c:	4630      	mov	r0, r6
 800705e:	f7ff fe47 	bl	8006cf0 <_Bfree>
 8007062:	4647      	mov	r7, r8
 8007064:	106d      	asrs	r5, r5, #1
 8007066:	d00b      	beq.n	8007080 <__pow5mult+0xa0>
 8007068:	6820      	ldr	r0, [r4, #0]
 800706a:	b938      	cbnz	r0, 800707c <__pow5mult+0x9c>
 800706c:	4622      	mov	r2, r4
 800706e:	4621      	mov	r1, r4
 8007070:	4630      	mov	r0, r6
 8007072:	f7ff ff0b 	bl	8006e8c <__multiply>
 8007076:	6020      	str	r0, [r4, #0]
 8007078:	f8c0 9000 	str.w	r9, [r0]
 800707c:	4604      	mov	r4, r0
 800707e:	e7e4      	b.n	800704a <__pow5mult+0x6a>
 8007080:	4638      	mov	r0, r7
 8007082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007086:	bf00      	nop
 8007088:	080086f8 	.word	0x080086f8
 800708c:	08008529 	.word	0x08008529
 8007090:	080085ac 	.word	0x080085ac

08007094 <__lshift>:
 8007094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007098:	460c      	mov	r4, r1
 800709a:	6849      	ldr	r1, [r1, #4]
 800709c:	6923      	ldr	r3, [r4, #16]
 800709e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070a2:	68a3      	ldr	r3, [r4, #8]
 80070a4:	4607      	mov	r7, r0
 80070a6:	4691      	mov	r9, r2
 80070a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070ac:	f108 0601 	add.w	r6, r8, #1
 80070b0:	42b3      	cmp	r3, r6
 80070b2:	db0b      	blt.n	80070cc <__lshift+0x38>
 80070b4:	4638      	mov	r0, r7
 80070b6:	f7ff fddb 	bl	8006c70 <_Balloc>
 80070ba:	4605      	mov	r5, r0
 80070bc:	b948      	cbnz	r0, 80070d2 <__lshift+0x3e>
 80070be:	4602      	mov	r2, r0
 80070c0:	4b2a      	ldr	r3, [pc, #168]	; (800716c <__lshift+0xd8>)
 80070c2:	482b      	ldr	r0, [pc, #172]	; (8007170 <__lshift+0xdc>)
 80070c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80070c8:	f000 fbb8 	bl	800783c <__assert_func>
 80070cc:	3101      	adds	r1, #1
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	e7ee      	b.n	80070b0 <__lshift+0x1c>
 80070d2:	2300      	movs	r3, #0
 80070d4:	f100 0114 	add.w	r1, r0, #20
 80070d8:	f100 0210 	add.w	r2, r0, #16
 80070dc:	4618      	mov	r0, r3
 80070de:	4553      	cmp	r3, sl
 80070e0:	db37      	blt.n	8007152 <__lshift+0xbe>
 80070e2:	6920      	ldr	r0, [r4, #16]
 80070e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070e8:	f104 0314 	add.w	r3, r4, #20
 80070ec:	f019 091f 	ands.w	r9, r9, #31
 80070f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80070f8:	d02f      	beq.n	800715a <__lshift+0xc6>
 80070fa:	f1c9 0e20 	rsb	lr, r9, #32
 80070fe:	468a      	mov	sl, r1
 8007100:	f04f 0c00 	mov.w	ip, #0
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	fa02 f209 	lsl.w	r2, r2, r9
 800710a:	ea42 020c 	orr.w	r2, r2, ip
 800710e:	f84a 2b04 	str.w	r2, [sl], #4
 8007112:	f853 2b04 	ldr.w	r2, [r3], #4
 8007116:	4298      	cmp	r0, r3
 8007118:	fa22 fc0e 	lsr.w	ip, r2, lr
 800711c:	d8f2      	bhi.n	8007104 <__lshift+0x70>
 800711e:	1b03      	subs	r3, r0, r4
 8007120:	3b15      	subs	r3, #21
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	3304      	adds	r3, #4
 8007128:	f104 0215 	add.w	r2, r4, #21
 800712c:	4290      	cmp	r0, r2
 800712e:	bf38      	it	cc
 8007130:	2304      	movcc	r3, #4
 8007132:	f841 c003 	str.w	ip, [r1, r3]
 8007136:	f1bc 0f00 	cmp.w	ip, #0
 800713a:	d001      	beq.n	8007140 <__lshift+0xac>
 800713c:	f108 0602 	add.w	r6, r8, #2
 8007140:	3e01      	subs	r6, #1
 8007142:	4638      	mov	r0, r7
 8007144:	612e      	str	r6, [r5, #16]
 8007146:	4621      	mov	r1, r4
 8007148:	f7ff fdd2 	bl	8006cf0 <_Bfree>
 800714c:	4628      	mov	r0, r5
 800714e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007152:	f842 0f04 	str.w	r0, [r2, #4]!
 8007156:	3301      	adds	r3, #1
 8007158:	e7c1      	b.n	80070de <__lshift+0x4a>
 800715a:	3904      	subs	r1, #4
 800715c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007160:	f841 2f04 	str.w	r2, [r1, #4]!
 8007164:	4298      	cmp	r0, r3
 8007166:	d8f9      	bhi.n	800715c <__lshift+0xc8>
 8007168:	e7ea      	b.n	8007140 <__lshift+0xac>
 800716a:	bf00      	nop
 800716c:	0800859b 	.word	0x0800859b
 8007170:	080085ac 	.word	0x080085ac

08007174 <__mcmp>:
 8007174:	b530      	push	{r4, r5, lr}
 8007176:	6902      	ldr	r2, [r0, #16]
 8007178:	690c      	ldr	r4, [r1, #16]
 800717a:	1b12      	subs	r2, r2, r4
 800717c:	d10e      	bne.n	800719c <__mcmp+0x28>
 800717e:	f100 0314 	add.w	r3, r0, #20
 8007182:	3114      	adds	r1, #20
 8007184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800718c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007194:	42a5      	cmp	r5, r4
 8007196:	d003      	beq.n	80071a0 <__mcmp+0x2c>
 8007198:	d305      	bcc.n	80071a6 <__mcmp+0x32>
 800719a:	2201      	movs	r2, #1
 800719c:	4610      	mov	r0, r2
 800719e:	bd30      	pop	{r4, r5, pc}
 80071a0:	4283      	cmp	r3, r0
 80071a2:	d3f3      	bcc.n	800718c <__mcmp+0x18>
 80071a4:	e7fa      	b.n	800719c <__mcmp+0x28>
 80071a6:	f04f 32ff 	mov.w	r2, #4294967295
 80071aa:	e7f7      	b.n	800719c <__mcmp+0x28>

080071ac <__mdiff>:
 80071ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	460c      	mov	r4, r1
 80071b2:	4606      	mov	r6, r0
 80071b4:	4611      	mov	r1, r2
 80071b6:	4620      	mov	r0, r4
 80071b8:	4690      	mov	r8, r2
 80071ba:	f7ff ffdb 	bl	8007174 <__mcmp>
 80071be:	1e05      	subs	r5, r0, #0
 80071c0:	d110      	bne.n	80071e4 <__mdiff+0x38>
 80071c2:	4629      	mov	r1, r5
 80071c4:	4630      	mov	r0, r6
 80071c6:	f7ff fd53 	bl	8006c70 <_Balloc>
 80071ca:	b930      	cbnz	r0, 80071da <__mdiff+0x2e>
 80071cc:	4b3a      	ldr	r3, [pc, #232]	; (80072b8 <__mdiff+0x10c>)
 80071ce:	4602      	mov	r2, r0
 80071d0:	f240 2132 	movw	r1, #562	; 0x232
 80071d4:	4839      	ldr	r0, [pc, #228]	; (80072bc <__mdiff+0x110>)
 80071d6:	f000 fb31 	bl	800783c <__assert_func>
 80071da:	2301      	movs	r3, #1
 80071dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e4:	bfa4      	itt	ge
 80071e6:	4643      	movge	r3, r8
 80071e8:	46a0      	movge	r8, r4
 80071ea:	4630      	mov	r0, r6
 80071ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80071f0:	bfa6      	itte	ge
 80071f2:	461c      	movge	r4, r3
 80071f4:	2500      	movge	r5, #0
 80071f6:	2501      	movlt	r5, #1
 80071f8:	f7ff fd3a 	bl	8006c70 <_Balloc>
 80071fc:	b920      	cbnz	r0, 8007208 <__mdiff+0x5c>
 80071fe:	4b2e      	ldr	r3, [pc, #184]	; (80072b8 <__mdiff+0x10c>)
 8007200:	4602      	mov	r2, r0
 8007202:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007206:	e7e5      	b.n	80071d4 <__mdiff+0x28>
 8007208:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800720c:	6926      	ldr	r6, [r4, #16]
 800720e:	60c5      	str	r5, [r0, #12]
 8007210:	f104 0914 	add.w	r9, r4, #20
 8007214:	f108 0514 	add.w	r5, r8, #20
 8007218:	f100 0e14 	add.w	lr, r0, #20
 800721c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007224:	f108 0210 	add.w	r2, r8, #16
 8007228:	46f2      	mov	sl, lr
 800722a:	2100      	movs	r1, #0
 800722c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007230:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007234:	fa1f f883 	uxth.w	r8, r3
 8007238:	fa11 f18b 	uxtah	r1, r1, fp
 800723c:	0c1b      	lsrs	r3, r3, #16
 800723e:	eba1 0808 	sub.w	r8, r1, r8
 8007242:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007246:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800724a:	fa1f f888 	uxth.w	r8, r8
 800724e:	1419      	asrs	r1, r3, #16
 8007250:	454e      	cmp	r6, r9
 8007252:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007256:	f84a 3b04 	str.w	r3, [sl], #4
 800725a:	d8e7      	bhi.n	800722c <__mdiff+0x80>
 800725c:	1b33      	subs	r3, r6, r4
 800725e:	3b15      	subs	r3, #21
 8007260:	f023 0303 	bic.w	r3, r3, #3
 8007264:	3304      	adds	r3, #4
 8007266:	3415      	adds	r4, #21
 8007268:	42a6      	cmp	r6, r4
 800726a:	bf38      	it	cc
 800726c:	2304      	movcc	r3, #4
 800726e:	441d      	add	r5, r3
 8007270:	4473      	add	r3, lr
 8007272:	469e      	mov	lr, r3
 8007274:	462e      	mov	r6, r5
 8007276:	4566      	cmp	r6, ip
 8007278:	d30e      	bcc.n	8007298 <__mdiff+0xec>
 800727a:	f10c 0203 	add.w	r2, ip, #3
 800727e:	1b52      	subs	r2, r2, r5
 8007280:	f022 0203 	bic.w	r2, r2, #3
 8007284:	3d03      	subs	r5, #3
 8007286:	45ac      	cmp	ip, r5
 8007288:	bf38      	it	cc
 800728a:	2200      	movcc	r2, #0
 800728c:	441a      	add	r2, r3
 800728e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007292:	b17b      	cbz	r3, 80072b4 <__mdiff+0x108>
 8007294:	6107      	str	r7, [r0, #16]
 8007296:	e7a3      	b.n	80071e0 <__mdiff+0x34>
 8007298:	f856 8b04 	ldr.w	r8, [r6], #4
 800729c:	fa11 f288 	uxtah	r2, r1, r8
 80072a0:	1414      	asrs	r4, r2, #16
 80072a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80072a6:	b292      	uxth	r2, r2
 80072a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80072ac:	f84e 2b04 	str.w	r2, [lr], #4
 80072b0:	1421      	asrs	r1, r4, #16
 80072b2:	e7e0      	b.n	8007276 <__mdiff+0xca>
 80072b4:	3f01      	subs	r7, #1
 80072b6:	e7ea      	b.n	800728e <__mdiff+0xe2>
 80072b8:	0800859b 	.word	0x0800859b
 80072bc:	080085ac 	.word	0x080085ac

080072c0 <__d2b>:
 80072c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072c4:	4689      	mov	r9, r1
 80072c6:	2101      	movs	r1, #1
 80072c8:	ec57 6b10 	vmov	r6, r7, d0
 80072cc:	4690      	mov	r8, r2
 80072ce:	f7ff fccf 	bl	8006c70 <_Balloc>
 80072d2:	4604      	mov	r4, r0
 80072d4:	b930      	cbnz	r0, 80072e4 <__d2b+0x24>
 80072d6:	4602      	mov	r2, r0
 80072d8:	4b25      	ldr	r3, [pc, #148]	; (8007370 <__d2b+0xb0>)
 80072da:	4826      	ldr	r0, [pc, #152]	; (8007374 <__d2b+0xb4>)
 80072dc:	f240 310a 	movw	r1, #778	; 0x30a
 80072e0:	f000 faac 	bl	800783c <__assert_func>
 80072e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80072e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80072ec:	bb35      	cbnz	r5, 800733c <__d2b+0x7c>
 80072ee:	2e00      	cmp	r6, #0
 80072f0:	9301      	str	r3, [sp, #4]
 80072f2:	d028      	beq.n	8007346 <__d2b+0x86>
 80072f4:	4668      	mov	r0, sp
 80072f6:	9600      	str	r6, [sp, #0]
 80072f8:	f7ff fd82 	bl	8006e00 <__lo0bits>
 80072fc:	9900      	ldr	r1, [sp, #0]
 80072fe:	b300      	cbz	r0, 8007342 <__d2b+0x82>
 8007300:	9a01      	ldr	r2, [sp, #4]
 8007302:	f1c0 0320 	rsb	r3, r0, #32
 8007306:	fa02 f303 	lsl.w	r3, r2, r3
 800730a:	430b      	orrs	r3, r1
 800730c:	40c2      	lsrs	r2, r0
 800730e:	6163      	str	r3, [r4, #20]
 8007310:	9201      	str	r2, [sp, #4]
 8007312:	9b01      	ldr	r3, [sp, #4]
 8007314:	61a3      	str	r3, [r4, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	bf14      	ite	ne
 800731a:	2202      	movne	r2, #2
 800731c:	2201      	moveq	r2, #1
 800731e:	6122      	str	r2, [r4, #16]
 8007320:	b1d5      	cbz	r5, 8007358 <__d2b+0x98>
 8007322:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007326:	4405      	add	r5, r0
 8007328:	f8c9 5000 	str.w	r5, [r9]
 800732c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007330:	f8c8 0000 	str.w	r0, [r8]
 8007334:	4620      	mov	r0, r4
 8007336:	b003      	add	sp, #12
 8007338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800733c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007340:	e7d5      	b.n	80072ee <__d2b+0x2e>
 8007342:	6161      	str	r1, [r4, #20]
 8007344:	e7e5      	b.n	8007312 <__d2b+0x52>
 8007346:	a801      	add	r0, sp, #4
 8007348:	f7ff fd5a 	bl	8006e00 <__lo0bits>
 800734c:	9b01      	ldr	r3, [sp, #4]
 800734e:	6163      	str	r3, [r4, #20]
 8007350:	2201      	movs	r2, #1
 8007352:	6122      	str	r2, [r4, #16]
 8007354:	3020      	adds	r0, #32
 8007356:	e7e3      	b.n	8007320 <__d2b+0x60>
 8007358:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800735c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007360:	f8c9 0000 	str.w	r0, [r9]
 8007364:	6918      	ldr	r0, [r3, #16]
 8007366:	f7ff fd2b 	bl	8006dc0 <__hi0bits>
 800736a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800736e:	e7df      	b.n	8007330 <__d2b+0x70>
 8007370:	0800859b 	.word	0x0800859b
 8007374:	080085ac 	.word	0x080085ac

08007378 <_calloc_r>:
 8007378:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800737a:	fba1 2402 	umull	r2, r4, r1, r2
 800737e:	b94c      	cbnz	r4, 8007394 <_calloc_r+0x1c>
 8007380:	4611      	mov	r1, r2
 8007382:	9201      	str	r2, [sp, #4]
 8007384:	f000 f87a 	bl	800747c <_malloc_r>
 8007388:	9a01      	ldr	r2, [sp, #4]
 800738a:	4605      	mov	r5, r0
 800738c:	b930      	cbnz	r0, 800739c <_calloc_r+0x24>
 800738e:	4628      	mov	r0, r5
 8007390:	b003      	add	sp, #12
 8007392:	bd30      	pop	{r4, r5, pc}
 8007394:	220c      	movs	r2, #12
 8007396:	6002      	str	r2, [r0, #0]
 8007398:	2500      	movs	r5, #0
 800739a:	e7f8      	b.n	800738e <_calloc_r+0x16>
 800739c:	4621      	mov	r1, r4
 800739e:	f7fe f93f 	bl	8005620 <memset>
 80073a2:	e7f4      	b.n	800738e <_calloc_r+0x16>

080073a4 <_free_r>:
 80073a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80073a6:	2900      	cmp	r1, #0
 80073a8:	d044      	beq.n	8007434 <_free_r+0x90>
 80073aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073ae:	9001      	str	r0, [sp, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f1a1 0404 	sub.w	r4, r1, #4
 80073b6:	bfb8      	it	lt
 80073b8:	18e4      	addlt	r4, r4, r3
 80073ba:	f000 fa9b 	bl	80078f4 <__malloc_lock>
 80073be:	4a1e      	ldr	r2, [pc, #120]	; (8007438 <_free_r+0x94>)
 80073c0:	9801      	ldr	r0, [sp, #4]
 80073c2:	6813      	ldr	r3, [r2, #0]
 80073c4:	b933      	cbnz	r3, 80073d4 <_free_r+0x30>
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	6014      	str	r4, [r2, #0]
 80073ca:	b003      	add	sp, #12
 80073cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80073d0:	f000 ba96 	b.w	8007900 <__malloc_unlock>
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	d908      	bls.n	80073ea <_free_r+0x46>
 80073d8:	6825      	ldr	r5, [r4, #0]
 80073da:	1961      	adds	r1, r4, r5
 80073dc:	428b      	cmp	r3, r1
 80073de:	bf01      	itttt	eq
 80073e0:	6819      	ldreq	r1, [r3, #0]
 80073e2:	685b      	ldreq	r3, [r3, #4]
 80073e4:	1949      	addeq	r1, r1, r5
 80073e6:	6021      	streq	r1, [r4, #0]
 80073e8:	e7ed      	b.n	80073c6 <_free_r+0x22>
 80073ea:	461a      	mov	r2, r3
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	b10b      	cbz	r3, 80073f4 <_free_r+0x50>
 80073f0:	42a3      	cmp	r3, r4
 80073f2:	d9fa      	bls.n	80073ea <_free_r+0x46>
 80073f4:	6811      	ldr	r1, [r2, #0]
 80073f6:	1855      	adds	r5, r2, r1
 80073f8:	42a5      	cmp	r5, r4
 80073fa:	d10b      	bne.n	8007414 <_free_r+0x70>
 80073fc:	6824      	ldr	r4, [r4, #0]
 80073fe:	4421      	add	r1, r4
 8007400:	1854      	adds	r4, r2, r1
 8007402:	42a3      	cmp	r3, r4
 8007404:	6011      	str	r1, [r2, #0]
 8007406:	d1e0      	bne.n	80073ca <_free_r+0x26>
 8007408:	681c      	ldr	r4, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	6053      	str	r3, [r2, #4]
 800740e:	4421      	add	r1, r4
 8007410:	6011      	str	r1, [r2, #0]
 8007412:	e7da      	b.n	80073ca <_free_r+0x26>
 8007414:	d902      	bls.n	800741c <_free_r+0x78>
 8007416:	230c      	movs	r3, #12
 8007418:	6003      	str	r3, [r0, #0]
 800741a:	e7d6      	b.n	80073ca <_free_r+0x26>
 800741c:	6825      	ldr	r5, [r4, #0]
 800741e:	1961      	adds	r1, r4, r5
 8007420:	428b      	cmp	r3, r1
 8007422:	bf04      	itt	eq
 8007424:	6819      	ldreq	r1, [r3, #0]
 8007426:	685b      	ldreq	r3, [r3, #4]
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	bf04      	itt	eq
 800742c:	1949      	addeq	r1, r1, r5
 800742e:	6021      	streq	r1, [r4, #0]
 8007430:	6054      	str	r4, [r2, #4]
 8007432:	e7ca      	b.n	80073ca <_free_r+0x26>
 8007434:	b003      	add	sp, #12
 8007436:	bd30      	pop	{r4, r5, pc}
 8007438:	200003ec 	.word	0x200003ec

0800743c <sbrk_aligned>:
 800743c:	b570      	push	{r4, r5, r6, lr}
 800743e:	4e0e      	ldr	r6, [pc, #56]	; (8007478 <sbrk_aligned+0x3c>)
 8007440:	460c      	mov	r4, r1
 8007442:	6831      	ldr	r1, [r6, #0]
 8007444:	4605      	mov	r5, r0
 8007446:	b911      	cbnz	r1, 800744e <sbrk_aligned+0x12>
 8007448:	f000 f9e8 	bl	800781c <_sbrk_r>
 800744c:	6030      	str	r0, [r6, #0]
 800744e:	4621      	mov	r1, r4
 8007450:	4628      	mov	r0, r5
 8007452:	f000 f9e3 	bl	800781c <_sbrk_r>
 8007456:	1c43      	adds	r3, r0, #1
 8007458:	d00a      	beq.n	8007470 <sbrk_aligned+0x34>
 800745a:	1cc4      	adds	r4, r0, #3
 800745c:	f024 0403 	bic.w	r4, r4, #3
 8007460:	42a0      	cmp	r0, r4
 8007462:	d007      	beq.n	8007474 <sbrk_aligned+0x38>
 8007464:	1a21      	subs	r1, r4, r0
 8007466:	4628      	mov	r0, r5
 8007468:	f000 f9d8 	bl	800781c <_sbrk_r>
 800746c:	3001      	adds	r0, #1
 800746e:	d101      	bne.n	8007474 <sbrk_aligned+0x38>
 8007470:	f04f 34ff 	mov.w	r4, #4294967295
 8007474:	4620      	mov	r0, r4
 8007476:	bd70      	pop	{r4, r5, r6, pc}
 8007478:	200003f0 	.word	0x200003f0

0800747c <_malloc_r>:
 800747c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007480:	1ccd      	adds	r5, r1, #3
 8007482:	f025 0503 	bic.w	r5, r5, #3
 8007486:	3508      	adds	r5, #8
 8007488:	2d0c      	cmp	r5, #12
 800748a:	bf38      	it	cc
 800748c:	250c      	movcc	r5, #12
 800748e:	2d00      	cmp	r5, #0
 8007490:	4607      	mov	r7, r0
 8007492:	db01      	blt.n	8007498 <_malloc_r+0x1c>
 8007494:	42a9      	cmp	r1, r5
 8007496:	d905      	bls.n	80074a4 <_malloc_r+0x28>
 8007498:	230c      	movs	r3, #12
 800749a:	603b      	str	r3, [r7, #0]
 800749c:	2600      	movs	r6, #0
 800749e:	4630      	mov	r0, r6
 80074a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074a4:	4e2e      	ldr	r6, [pc, #184]	; (8007560 <_malloc_r+0xe4>)
 80074a6:	f000 fa25 	bl	80078f4 <__malloc_lock>
 80074aa:	6833      	ldr	r3, [r6, #0]
 80074ac:	461c      	mov	r4, r3
 80074ae:	bb34      	cbnz	r4, 80074fe <_malloc_r+0x82>
 80074b0:	4629      	mov	r1, r5
 80074b2:	4638      	mov	r0, r7
 80074b4:	f7ff ffc2 	bl	800743c <sbrk_aligned>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	4604      	mov	r4, r0
 80074bc:	d14d      	bne.n	800755a <_malloc_r+0xde>
 80074be:	6834      	ldr	r4, [r6, #0]
 80074c0:	4626      	mov	r6, r4
 80074c2:	2e00      	cmp	r6, #0
 80074c4:	d140      	bne.n	8007548 <_malloc_r+0xcc>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	4631      	mov	r1, r6
 80074ca:	4638      	mov	r0, r7
 80074cc:	eb04 0803 	add.w	r8, r4, r3
 80074d0:	f000 f9a4 	bl	800781c <_sbrk_r>
 80074d4:	4580      	cmp	r8, r0
 80074d6:	d13a      	bne.n	800754e <_malloc_r+0xd2>
 80074d8:	6821      	ldr	r1, [r4, #0]
 80074da:	3503      	adds	r5, #3
 80074dc:	1a6d      	subs	r5, r5, r1
 80074de:	f025 0503 	bic.w	r5, r5, #3
 80074e2:	3508      	adds	r5, #8
 80074e4:	2d0c      	cmp	r5, #12
 80074e6:	bf38      	it	cc
 80074e8:	250c      	movcc	r5, #12
 80074ea:	4629      	mov	r1, r5
 80074ec:	4638      	mov	r0, r7
 80074ee:	f7ff ffa5 	bl	800743c <sbrk_aligned>
 80074f2:	3001      	adds	r0, #1
 80074f4:	d02b      	beq.n	800754e <_malloc_r+0xd2>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	442b      	add	r3, r5
 80074fa:	6023      	str	r3, [r4, #0]
 80074fc:	e00e      	b.n	800751c <_malloc_r+0xa0>
 80074fe:	6822      	ldr	r2, [r4, #0]
 8007500:	1b52      	subs	r2, r2, r5
 8007502:	d41e      	bmi.n	8007542 <_malloc_r+0xc6>
 8007504:	2a0b      	cmp	r2, #11
 8007506:	d916      	bls.n	8007536 <_malloc_r+0xba>
 8007508:	1961      	adds	r1, r4, r5
 800750a:	42a3      	cmp	r3, r4
 800750c:	6025      	str	r5, [r4, #0]
 800750e:	bf18      	it	ne
 8007510:	6059      	strne	r1, [r3, #4]
 8007512:	6863      	ldr	r3, [r4, #4]
 8007514:	bf08      	it	eq
 8007516:	6031      	streq	r1, [r6, #0]
 8007518:	5162      	str	r2, [r4, r5]
 800751a:	604b      	str	r3, [r1, #4]
 800751c:	4638      	mov	r0, r7
 800751e:	f104 060b 	add.w	r6, r4, #11
 8007522:	f000 f9ed 	bl	8007900 <__malloc_unlock>
 8007526:	f026 0607 	bic.w	r6, r6, #7
 800752a:	1d23      	adds	r3, r4, #4
 800752c:	1af2      	subs	r2, r6, r3
 800752e:	d0b6      	beq.n	800749e <_malloc_r+0x22>
 8007530:	1b9b      	subs	r3, r3, r6
 8007532:	50a3      	str	r3, [r4, r2]
 8007534:	e7b3      	b.n	800749e <_malloc_r+0x22>
 8007536:	6862      	ldr	r2, [r4, #4]
 8007538:	42a3      	cmp	r3, r4
 800753a:	bf0c      	ite	eq
 800753c:	6032      	streq	r2, [r6, #0]
 800753e:	605a      	strne	r2, [r3, #4]
 8007540:	e7ec      	b.n	800751c <_malloc_r+0xa0>
 8007542:	4623      	mov	r3, r4
 8007544:	6864      	ldr	r4, [r4, #4]
 8007546:	e7b2      	b.n	80074ae <_malloc_r+0x32>
 8007548:	4634      	mov	r4, r6
 800754a:	6876      	ldr	r6, [r6, #4]
 800754c:	e7b9      	b.n	80074c2 <_malloc_r+0x46>
 800754e:	230c      	movs	r3, #12
 8007550:	603b      	str	r3, [r7, #0]
 8007552:	4638      	mov	r0, r7
 8007554:	f000 f9d4 	bl	8007900 <__malloc_unlock>
 8007558:	e7a1      	b.n	800749e <_malloc_r+0x22>
 800755a:	6025      	str	r5, [r4, #0]
 800755c:	e7de      	b.n	800751c <_malloc_r+0xa0>
 800755e:	bf00      	nop
 8007560:	200003ec 	.word	0x200003ec

08007564 <__ssputs_r>:
 8007564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	688e      	ldr	r6, [r1, #8]
 800756a:	429e      	cmp	r6, r3
 800756c:	4682      	mov	sl, r0
 800756e:	460c      	mov	r4, r1
 8007570:	4690      	mov	r8, r2
 8007572:	461f      	mov	r7, r3
 8007574:	d838      	bhi.n	80075e8 <__ssputs_r+0x84>
 8007576:	898a      	ldrh	r2, [r1, #12]
 8007578:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800757c:	d032      	beq.n	80075e4 <__ssputs_r+0x80>
 800757e:	6825      	ldr	r5, [r4, #0]
 8007580:	6909      	ldr	r1, [r1, #16]
 8007582:	eba5 0901 	sub.w	r9, r5, r1
 8007586:	6965      	ldr	r5, [r4, #20]
 8007588:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800758c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007590:	3301      	adds	r3, #1
 8007592:	444b      	add	r3, r9
 8007594:	106d      	asrs	r5, r5, #1
 8007596:	429d      	cmp	r5, r3
 8007598:	bf38      	it	cc
 800759a:	461d      	movcc	r5, r3
 800759c:	0553      	lsls	r3, r2, #21
 800759e:	d531      	bpl.n	8007604 <__ssputs_r+0xa0>
 80075a0:	4629      	mov	r1, r5
 80075a2:	f7ff ff6b 	bl	800747c <_malloc_r>
 80075a6:	4606      	mov	r6, r0
 80075a8:	b950      	cbnz	r0, 80075c0 <__ssputs_r+0x5c>
 80075aa:	230c      	movs	r3, #12
 80075ac:	f8ca 3000 	str.w	r3, [sl]
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075b6:	81a3      	strh	r3, [r4, #12]
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c0:	6921      	ldr	r1, [r4, #16]
 80075c2:	464a      	mov	r2, r9
 80075c4:	f7ff fb46 	bl	8006c54 <memcpy>
 80075c8:	89a3      	ldrh	r3, [r4, #12]
 80075ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80075ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	6126      	str	r6, [r4, #16]
 80075d6:	6165      	str	r5, [r4, #20]
 80075d8:	444e      	add	r6, r9
 80075da:	eba5 0509 	sub.w	r5, r5, r9
 80075de:	6026      	str	r6, [r4, #0]
 80075e0:	60a5      	str	r5, [r4, #8]
 80075e2:	463e      	mov	r6, r7
 80075e4:	42be      	cmp	r6, r7
 80075e6:	d900      	bls.n	80075ea <__ssputs_r+0x86>
 80075e8:	463e      	mov	r6, r7
 80075ea:	6820      	ldr	r0, [r4, #0]
 80075ec:	4632      	mov	r2, r6
 80075ee:	4641      	mov	r1, r8
 80075f0:	f000 f966 	bl	80078c0 <memmove>
 80075f4:	68a3      	ldr	r3, [r4, #8]
 80075f6:	1b9b      	subs	r3, r3, r6
 80075f8:	60a3      	str	r3, [r4, #8]
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	4433      	add	r3, r6
 80075fe:	6023      	str	r3, [r4, #0]
 8007600:	2000      	movs	r0, #0
 8007602:	e7db      	b.n	80075bc <__ssputs_r+0x58>
 8007604:	462a      	mov	r2, r5
 8007606:	f000 f981 	bl	800790c <_realloc_r>
 800760a:	4606      	mov	r6, r0
 800760c:	2800      	cmp	r0, #0
 800760e:	d1e1      	bne.n	80075d4 <__ssputs_r+0x70>
 8007610:	6921      	ldr	r1, [r4, #16]
 8007612:	4650      	mov	r0, sl
 8007614:	f7ff fec6 	bl	80073a4 <_free_r>
 8007618:	e7c7      	b.n	80075aa <__ssputs_r+0x46>
	...

0800761c <_svfiprintf_r>:
 800761c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007620:	4698      	mov	r8, r3
 8007622:	898b      	ldrh	r3, [r1, #12]
 8007624:	061b      	lsls	r3, r3, #24
 8007626:	b09d      	sub	sp, #116	; 0x74
 8007628:	4607      	mov	r7, r0
 800762a:	460d      	mov	r5, r1
 800762c:	4614      	mov	r4, r2
 800762e:	d50e      	bpl.n	800764e <_svfiprintf_r+0x32>
 8007630:	690b      	ldr	r3, [r1, #16]
 8007632:	b963      	cbnz	r3, 800764e <_svfiprintf_r+0x32>
 8007634:	2140      	movs	r1, #64	; 0x40
 8007636:	f7ff ff21 	bl	800747c <_malloc_r>
 800763a:	6028      	str	r0, [r5, #0]
 800763c:	6128      	str	r0, [r5, #16]
 800763e:	b920      	cbnz	r0, 800764a <_svfiprintf_r+0x2e>
 8007640:	230c      	movs	r3, #12
 8007642:	603b      	str	r3, [r7, #0]
 8007644:	f04f 30ff 	mov.w	r0, #4294967295
 8007648:	e0d1      	b.n	80077ee <_svfiprintf_r+0x1d2>
 800764a:	2340      	movs	r3, #64	; 0x40
 800764c:	616b      	str	r3, [r5, #20]
 800764e:	2300      	movs	r3, #0
 8007650:	9309      	str	r3, [sp, #36]	; 0x24
 8007652:	2320      	movs	r3, #32
 8007654:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007658:	f8cd 800c 	str.w	r8, [sp, #12]
 800765c:	2330      	movs	r3, #48	; 0x30
 800765e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007808 <_svfiprintf_r+0x1ec>
 8007662:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007666:	f04f 0901 	mov.w	r9, #1
 800766a:	4623      	mov	r3, r4
 800766c:	469a      	mov	sl, r3
 800766e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007672:	b10a      	cbz	r2, 8007678 <_svfiprintf_r+0x5c>
 8007674:	2a25      	cmp	r2, #37	; 0x25
 8007676:	d1f9      	bne.n	800766c <_svfiprintf_r+0x50>
 8007678:	ebba 0b04 	subs.w	fp, sl, r4
 800767c:	d00b      	beq.n	8007696 <_svfiprintf_r+0x7a>
 800767e:	465b      	mov	r3, fp
 8007680:	4622      	mov	r2, r4
 8007682:	4629      	mov	r1, r5
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff ff6d 	bl	8007564 <__ssputs_r>
 800768a:	3001      	adds	r0, #1
 800768c:	f000 80aa 	beq.w	80077e4 <_svfiprintf_r+0x1c8>
 8007690:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007692:	445a      	add	r2, fp
 8007694:	9209      	str	r2, [sp, #36]	; 0x24
 8007696:	f89a 3000 	ldrb.w	r3, [sl]
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 80a2 	beq.w	80077e4 <_svfiprintf_r+0x1c8>
 80076a0:	2300      	movs	r3, #0
 80076a2:	f04f 32ff 	mov.w	r2, #4294967295
 80076a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076aa:	f10a 0a01 	add.w	sl, sl, #1
 80076ae:	9304      	str	r3, [sp, #16]
 80076b0:	9307      	str	r3, [sp, #28]
 80076b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076b6:	931a      	str	r3, [sp, #104]	; 0x68
 80076b8:	4654      	mov	r4, sl
 80076ba:	2205      	movs	r2, #5
 80076bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076c0:	4851      	ldr	r0, [pc, #324]	; (8007808 <_svfiprintf_r+0x1ec>)
 80076c2:	f7f8 fd8d 	bl	80001e0 <memchr>
 80076c6:	9a04      	ldr	r2, [sp, #16]
 80076c8:	b9d8      	cbnz	r0, 8007702 <_svfiprintf_r+0xe6>
 80076ca:	06d0      	lsls	r0, r2, #27
 80076cc:	bf44      	itt	mi
 80076ce:	2320      	movmi	r3, #32
 80076d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d4:	0711      	lsls	r1, r2, #28
 80076d6:	bf44      	itt	mi
 80076d8:	232b      	movmi	r3, #43	; 0x2b
 80076da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076de:	f89a 3000 	ldrb.w	r3, [sl]
 80076e2:	2b2a      	cmp	r3, #42	; 0x2a
 80076e4:	d015      	beq.n	8007712 <_svfiprintf_r+0xf6>
 80076e6:	9a07      	ldr	r2, [sp, #28]
 80076e8:	4654      	mov	r4, sl
 80076ea:	2000      	movs	r0, #0
 80076ec:	f04f 0c0a 	mov.w	ip, #10
 80076f0:	4621      	mov	r1, r4
 80076f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076f6:	3b30      	subs	r3, #48	; 0x30
 80076f8:	2b09      	cmp	r3, #9
 80076fa:	d94e      	bls.n	800779a <_svfiprintf_r+0x17e>
 80076fc:	b1b0      	cbz	r0, 800772c <_svfiprintf_r+0x110>
 80076fe:	9207      	str	r2, [sp, #28]
 8007700:	e014      	b.n	800772c <_svfiprintf_r+0x110>
 8007702:	eba0 0308 	sub.w	r3, r0, r8
 8007706:	fa09 f303 	lsl.w	r3, r9, r3
 800770a:	4313      	orrs	r3, r2
 800770c:	9304      	str	r3, [sp, #16]
 800770e:	46a2      	mov	sl, r4
 8007710:	e7d2      	b.n	80076b8 <_svfiprintf_r+0x9c>
 8007712:	9b03      	ldr	r3, [sp, #12]
 8007714:	1d19      	adds	r1, r3, #4
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	9103      	str	r1, [sp, #12]
 800771a:	2b00      	cmp	r3, #0
 800771c:	bfbb      	ittet	lt
 800771e:	425b      	neglt	r3, r3
 8007720:	f042 0202 	orrlt.w	r2, r2, #2
 8007724:	9307      	strge	r3, [sp, #28]
 8007726:	9307      	strlt	r3, [sp, #28]
 8007728:	bfb8      	it	lt
 800772a:	9204      	strlt	r2, [sp, #16]
 800772c:	7823      	ldrb	r3, [r4, #0]
 800772e:	2b2e      	cmp	r3, #46	; 0x2e
 8007730:	d10c      	bne.n	800774c <_svfiprintf_r+0x130>
 8007732:	7863      	ldrb	r3, [r4, #1]
 8007734:	2b2a      	cmp	r3, #42	; 0x2a
 8007736:	d135      	bne.n	80077a4 <_svfiprintf_r+0x188>
 8007738:	9b03      	ldr	r3, [sp, #12]
 800773a:	1d1a      	adds	r2, r3, #4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	9203      	str	r2, [sp, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	bfb8      	it	lt
 8007744:	f04f 33ff 	movlt.w	r3, #4294967295
 8007748:	3402      	adds	r4, #2
 800774a:	9305      	str	r3, [sp, #20]
 800774c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007818 <_svfiprintf_r+0x1fc>
 8007750:	7821      	ldrb	r1, [r4, #0]
 8007752:	2203      	movs	r2, #3
 8007754:	4650      	mov	r0, sl
 8007756:	f7f8 fd43 	bl	80001e0 <memchr>
 800775a:	b140      	cbz	r0, 800776e <_svfiprintf_r+0x152>
 800775c:	2340      	movs	r3, #64	; 0x40
 800775e:	eba0 000a 	sub.w	r0, r0, sl
 8007762:	fa03 f000 	lsl.w	r0, r3, r0
 8007766:	9b04      	ldr	r3, [sp, #16]
 8007768:	4303      	orrs	r3, r0
 800776a:	3401      	adds	r4, #1
 800776c:	9304      	str	r3, [sp, #16]
 800776e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007772:	4826      	ldr	r0, [pc, #152]	; (800780c <_svfiprintf_r+0x1f0>)
 8007774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007778:	2206      	movs	r2, #6
 800777a:	f7f8 fd31 	bl	80001e0 <memchr>
 800777e:	2800      	cmp	r0, #0
 8007780:	d038      	beq.n	80077f4 <_svfiprintf_r+0x1d8>
 8007782:	4b23      	ldr	r3, [pc, #140]	; (8007810 <_svfiprintf_r+0x1f4>)
 8007784:	bb1b      	cbnz	r3, 80077ce <_svfiprintf_r+0x1b2>
 8007786:	9b03      	ldr	r3, [sp, #12]
 8007788:	3307      	adds	r3, #7
 800778a:	f023 0307 	bic.w	r3, r3, #7
 800778e:	3308      	adds	r3, #8
 8007790:	9303      	str	r3, [sp, #12]
 8007792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007794:	4433      	add	r3, r6
 8007796:	9309      	str	r3, [sp, #36]	; 0x24
 8007798:	e767      	b.n	800766a <_svfiprintf_r+0x4e>
 800779a:	fb0c 3202 	mla	r2, ip, r2, r3
 800779e:	460c      	mov	r4, r1
 80077a0:	2001      	movs	r0, #1
 80077a2:	e7a5      	b.n	80076f0 <_svfiprintf_r+0xd4>
 80077a4:	2300      	movs	r3, #0
 80077a6:	3401      	adds	r4, #1
 80077a8:	9305      	str	r3, [sp, #20]
 80077aa:	4619      	mov	r1, r3
 80077ac:	f04f 0c0a 	mov.w	ip, #10
 80077b0:	4620      	mov	r0, r4
 80077b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077b6:	3a30      	subs	r2, #48	; 0x30
 80077b8:	2a09      	cmp	r2, #9
 80077ba:	d903      	bls.n	80077c4 <_svfiprintf_r+0x1a8>
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d0c5      	beq.n	800774c <_svfiprintf_r+0x130>
 80077c0:	9105      	str	r1, [sp, #20]
 80077c2:	e7c3      	b.n	800774c <_svfiprintf_r+0x130>
 80077c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80077c8:	4604      	mov	r4, r0
 80077ca:	2301      	movs	r3, #1
 80077cc:	e7f0      	b.n	80077b0 <_svfiprintf_r+0x194>
 80077ce:	ab03      	add	r3, sp, #12
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	462a      	mov	r2, r5
 80077d4:	4b0f      	ldr	r3, [pc, #60]	; (8007814 <_svfiprintf_r+0x1f8>)
 80077d6:	a904      	add	r1, sp, #16
 80077d8:	4638      	mov	r0, r7
 80077da:	f7fd ffc9 	bl	8005770 <_printf_float>
 80077de:	1c42      	adds	r2, r0, #1
 80077e0:	4606      	mov	r6, r0
 80077e2:	d1d6      	bne.n	8007792 <_svfiprintf_r+0x176>
 80077e4:	89ab      	ldrh	r3, [r5, #12]
 80077e6:	065b      	lsls	r3, r3, #25
 80077e8:	f53f af2c 	bmi.w	8007644 <_svfiprintf_r+0x28>
 80077ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077ee:	b01d      	add	sp, #116	; 0x74
 80077f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077f4:	ab03      	add	r3, sp, #12
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	462a      	mov	r2, r5
 80077fa:	4b06      	ldr	r3, [pc, #24]	; (8007814 <_svfiprintf_r+0x1f8>)
 80077fc:	a904      	add	r1, sp, #16
 80077fe:	4638      	mov	r0, r7
 8007800:	f7fe fa5a 	bl	8005cb8 <_printf_i>
 8007804:	e7eb      	b.n	80077de <_svfiprintf_r+0x1c2>
 8007806:	bf00      	nop
 8007808:	08008704 	.word	0x08008704
 800780c:	0800870e 	.word	0x0800870e
 8007810:	08005771 	.word	0x08005771
 8007814:	08007565 	.word	0x08007565
 8007818:	0800870a 	.word	0x0800870a

0800781c <_sbrk_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d06      	ldr	r5, [pc, #24]	; (8007838 <_sbrk_r+0x1c>)
 8007820:	2300      	movs	r3, #0
 8007822:	4604      	mov	r4, r0
 8007824:	4608      	mov	r0, r1
 8007826:	602b      	str	r3, [r5, #0]
 8007828:	f7fa fd94 	bl	8002354 <_sbrk>
 800782c:	1c43      	adds	r3, r0, #1
 800782e:	d102      	bne.n	8007836 <_sbrk_r+0x1a>
 8007830:	682b      	ldr	r3, [r5, #0]
 8007832:	b103      	cbz	r3, 8007836 <_sbrk_r+0x1a>
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	bd38      	pop	{r3, r4, r5, pc}
 8007838:	200003f4 	.word	0x200003f4

0800783c <__assert_func>:
 800783c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800783e:	4614      	mov	r4, r2
 8007840:	461a      	mov	r2, r3
 8007842:	4b09      	ldr	r3, [pc, #36]	; (8007868 <__assert_func+0x2c>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4605      	mov	r5, r0
 8007848:	68d8      	ldr	r0, [r3, #12]
 800784a:	b14c      	cbz	r4, 8007860 <__assert_func+0x24>
 800784c:	4b07      	ldr	r3, [pc, #28]	; (800786c <__assert_func+0x30>)
 800784e:	9100      	str	r1, [sp, #0]
 8007850:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007854:	4906      	ldr	r1, [pc, #24]	; (8007870 <__assert_func+0x34>)
 8007856:	462b      	mov	r3, r5
 8007858:	f000 f80e 	bl	8007878 <fiprintf>
 800785c:	f000 faac 	bl	8007db8 <abort>
 8007860:	4b04      	ldr	r3, [pc, #16]	; (8007874 <__assert_func+0x38>)
 8007862:	461c      	mov	r4, r3
 8007864:	e7f3      	b.n	800784e <__assert_func+0x12>
 8007866:	bf00      	nop
 8007868:	2000000c 	.word	0x2000000c
 800786c:	08008715 	.word	0x08008715
 8007870:	08008722 	.word	0x08008722
 8007874:	08008750 	.word	0x08008750

08007878 <fiprintf>:
 8007878:	b40e      	push	{r1, r2, r3}
 800787a:	b503      	push	{r0, r1, lr}
 800787c:	4601      	mov	r1, r0
 800787e:	ab03      	add	r3, sp, #12
 8007880:	4805      	ldr	r0, [pc, #20]	; (8007898 <fiprintf+0x20>)
 8007882:	f853 2b04 	ldr.w	r2, [r3], #4
 8007886:	6800      	ldr	r0, [r0, #0]
 8007888:	9301      	str	r3, [sp, #4]
 800788a:	f000 f897 	bl	80079bc <_vfiprintf_r>
 800788e:	b002      	add	sp, #8
 8007890:	f85d eb04 	ldr.w	lr, [sp], #4
 8007894:	b003      	add	sp, #12
 8007896:	4770      	bx	lr
 8007898:	2000000c 	.word	0x2000000c

0800789c <__ascii_mbtowc>:
 800789c:	b082      	sub	sp, #8
 800789e:	b901      	cbnz	r1, 80078a2 <__ascii_mbtowc+0x6>
 80078a0:	a901      	add	r1, sp, #4
 80078a2:	b142      	cbz	r2, 80078b6 <__ascii_mbtowc+0x1a>
 80078a4:	b14b      	cbz	r3, 80078ba <__ascii_mbtowc+0x1e>
 80078a6:	7813      	ldrb	r3, [r2, #0]
 80078a8:	600b      	str	r3, [r1, #0]
 80078aa:	7812      	ldrb	r2, [r2, #0]
 80078ac:	1e10      	subs	r0, r2, #0
 80078ae:	bf18      	it	ne
 80078b0:	2001      	movne	r0, #1
 80078b2:	b002      	add	sp, #8
 80078b4:	4770      	bx	lr
 80078b6:	4610      	mov	r0, r2
 80078b8:	e7fb      	b.n	80078b2 <__ascii_mbtowc+0x16>
 80078ba:	f06f 0001 	mvn.w	r0, #1
 80078be:	e7f8      	b.n	80078b2 <__ascii_mbtowc+0x16>

080078c0 <memmove>:
 80078c0:	4288      	cmp	r0, r1
 80078c2:	b510      	push	{r4, lr}
 80078c4:	eb01 0402 	add.w	r4, r1, r2
 80078c8:	d902      	bls.n	80078d0 <memmove+0x10>
 80078ca:	4284      	cmp	r4, r0
 80078cc:	4623      	mov	r3, r4
 80078ce:	d807      	bhi.n	80078e0 <memmove+0x20>
 80078d0:	1e43      	subs	r3, r0, #1
 80078d2:	42a1      	cmp	r1, r4
 80078d4:	d008      	beq.n	80078e8 <memmove+0x28>
 80078d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80078de:	e7f8      	b.n	80078d2 <memmove+0x12>
 80078e0:	4402      	add	r2, r0
 80078e2:	4601      	mov	r1, r0
 80078e4:	428a      	cmp	r2, r1
 80078e6:	d100      	bne.n	80078ea <memmove+0x2a>
 80078e8:	bd10      	pop	{r4, pc}
 80078ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80078ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80078f2:	e7f7      	b.n	80078e4 <memmove+0x24>

080078f4 <__malloc_lock>:
 80078f4:	4801      	ldr	r0, [pc, #4]	; (80078fc <__malloc_lock+0x8>)
 80078f6:	f000 bc1f 	b.w	8008138 <__retarget_lock_acquire_recursive>
 80078fa:	bf00      	nop
 80078fc:	200003f8 	.word	0x200003f8

08007900 <__malloc_unlock>:
 8007900:	4801      	ldr	r0, [pc, #4]	; (8007908 <__malloc_unlock+0x8>)
 8007902:	f000 bc1a 	b.w	800813a <__retarget_lock_release_recursive>
 8007906:	bf00      	nop
 8007908:	200003f8 	.word	0x200003f8

0800790c <_realloc_r>:
 800790c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007910:	4680      	mov	r8, r0
 8007912:	4614      	mov	r4, r2
 8007914:	460e      	mov	r6, r1
 8007916:	b921      	cbnz	r1, 8007922 <_realloc_r+0x16>
 8007918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800791c:	4611      	mov	r1, r2
 800791e:	f7ff bdad 	b.w	800747c <_malloc_r>
 8007922:	b92a      	cbnz	r2, 8007930 <_realloc_r+0x24>
 8007924:	f7ff fd3e 	bl	80073a4 <_free_r>
 8007928:	4625      	mov	r5, r4
 800792a:	4628      	mov	r0, r5
 800792c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007930:	f000 fc6a 	bl	8008208 <_malloc_usable_size_r>
 8007934:	4284      	cmp	r4, r0
 8007936:	4607      	mov	r7, r0
 8007938:	d802      	bhi.n	8007940 <_realloc_r+0x34>
 800793a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800793e:	d812      	bhi.n	8007966 <_realloc_r+0x5a>
 8007940:	4621      	mov	r1, r4
 8007942:	4640      	mov	r0, r8
 8007944:	f7ff fd9a 	bl	800747c <_malloc_r>
 8007948:	4605      	mov	r5, r0
 800794a:	2800      	cmp	r0, #0
 800794c:	d0ed      	beq.n	800792a <_realloc_r+0x1e>
 800794e:	42bc      	cmp	r4, r7
 8007950:	4622      	mov	r2, r4
 8007952:	4631      	mov	r1, r6
 8007954:	bf28      	it	cs
 8007956:	463a      	movcs	r2, r7
 8007958:	f7ff f97c 	bl	8006c54 <memcpy>
 800795c:	4631      	mov	r1, r6
 800795e:	4640      	mov	r0, r8
 8007960:	f7ff fd20 	bl	80073a4 <_free_r>
 8007964:	e7e1      	b.n	800792a <_realloc_r+0x1e>
 8007966:	4635      	mov	r5, r6
 8007968:	e7df      	b.n	800792a <_realloc_r+0x1e>

0800796a <__sfputc_r>:
 800796a:	6893      	ldr	r3, [r2, #8]
 800796c:	3b01      	subs	r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	b410      	push	{r4}
 8007972:	6093      	str	r3, [r2, #8]
 8007974:	da08      	bge.n	8007988 <__sfputc_r+0x1e>
 8007976:	6994      	ldr	r4, [r2, #24]
 8007978:	42a3      	cmp	r3, r4
 800797a:	db01      	blt.n	8007980 <__sfputc_r+0x16>
 800797c:	290a      	cmp	r1, #10
 800797e:	d103      	bne.n	8007988 <__sfputc_r+0x1e>
 8007980:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007984:	f000 b94a 	b.w	8007c1c <__swbuf_r>
 8007988:	6813      	ldr	r3, [r2, #0]
 800798a:	1c58      	adds	r0, r3, #1
 800798c:	6010      	str	r0, [r2, #0]
 800798e:	7019      	strb	r1, [r3, #0]
 8007990:	4608      	mov	r0, r1
 8007992:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007996:	4770      	bx	lr

08007998 <__sfputs_r>:
 8007998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799a:	4606      	mov	r6, r0
 800799c:	460f      	mov	r7, r1
 800799e:	4614      	mov	r4, r2
 80079a0:	18d5      	adds	r5, r2, r3
 80079a2:	42ac      	cmp	r4, r5
 80079a4:	d101      	bne.n	80079aa <__sfputs_r+0x12>
 80079a6:	2000      	movs	r0, #0
 80079a8:	e007      	b.n	80079ba <__sfputs_r+0x22>
 80079aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079ae:	463a      	mov	r2, r7
 80079b0:	4630      	mov	r0, r6
 80079b2:	f7ff ffda 	bl	800796a <__sfputc_r>
 80079b6:	1c43      	adds	r3, r0, #1
 80079b8:	d1f3      	bne.n	80079a2 <__sfputs_r+0xa>
 80079ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080079bc <_vfiprintf_r>:
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	460d      	mov	r5, r1
 80079c2:	b09d      	sub	sp, #116	; 0x74
 80079c4:	4614      	mov	r4, r2
 80079c6:	4698      	mov	r8, r3
 80079c8:	4606      	mov	r6, r0
 80079ca:	b118      	cbz	r0, 80079d4 <_vfiprintf_r+0x18>
 80079cc:	6983      	ldr	r3, [r0, #24]
 80079ce:	b90b      	cbnz	r3, 80079d4 <_vfiprintf_r+0x18>
 80079d0:	f000 fb14 	bl	8007ffc <__sinit>
 80079d4:	4b89      	ldr	r3, [pc, #548]	; (8007bfc <_vfiprintf_r+0x240>)
 80079d6:	429d      	cmp	r5, r3
 80079d8:	d11b      	bne.n	8007a12 <_vfiprintf_r+0x56>
 80079da:	6875      	ldr	r5, [r6, #4]
 80079dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80079de:	07d9      	lsls	r1, r3, #31
 80079e0:	d405      	bmi.n	80079ee <_vfiprintf_r+0x32>
 80079e2:	89ab      	ldrh	r3, [r5, #12]
 80079e4:	059a      	lsls	r2, r3, #22
 80079e6:	d402      	bmi.n	80079ee <_vfiprintf_r+0x32>
 80079e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80079ea:	f000 fba5 	bl	8008138 <__retarget_lock_acquire_recursive>
 80079ee:	89ab      	ldrh	r3, [r5, #12]
 80079f0:	071b      	lsls	r3, r3, #28
 80079f2:	d501      	bpl.n	80079f8 <_vfiprintf_r+0x3c>
 80079f4:	692b      	ldr	r3, [r5, #16]
 80079f6:	b9eb      	cbnz	r3, 8007a34 <_vfiprintf_r+0x78>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4630      	mov	r0, r6
 80079fc:	f000 f96e 	bl	8007cdc <__swsetup_r>
 8007a00:	b1c0      	cbz	r0, 8007a34 <_vfiprintf_r+0x78>
 8007a02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a04:	07dc      	lsls	r4, r3, #31
 8007a06:	d50e      	bpl.n	8007a26 <_vfiprintf_r+0x6a>
 8007a08:	f04f 30ff 	mov.w	r0, #4294967295
 8007a0c:	b01d      	add	sp, #116	; 0x74
 8007a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a12:	4b7b      	ldr	r3, [pc, #492]	; (8007c00 <_vfiprintf_r+0x244>)
 8007a14:	429d      	cmp	r5, r3
 8007a16:	d101      	bne.n	8007a1c <_vfiprintf_r+0x60>
 8007a18:	68b5      	ldr	r5, [r6, #8]
 8007a1a:	e7df      	b.n	80079dc <_vfiprintf_r+0x20>
 8007a1c:	4b79      	ldr	r3, [pc, #484]	; (8007c04 <_vfiprintf_r+0x248>)
 8007a1e:	429d      	cmp	r5, r3
 8007a20:	bf08      	it	eq
 8007a22:	68f5      	ldreq	r5, [r6, #12]
 8007a24:	e7da      	b.n	80079dc <_vfiprintf_r+0x20>
 8007a26:	89ab      	ldrh	r3, [r5, #12]
 8007a28:	0598      	lsls	r0, r3, #22
 8007a2a:	d4ed      	bmi.n	8007a08 <_vfiprintf_r+0x4c>
 8007a2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a2e:	f000 fb84 	bl	800813a <__retarget_lock_release_recursive>
 8007a32:	e7e9      	b.n	8007a08 <_vfiprintf_r+0x4c>
 8007a34:	2300      	movs	r3, #0
 8007a36:	9309      	str	r3, [sp, #36]	; 0x24
 8007a38:	2320      	movs	r3, #32
 8007a3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007a3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a42:	2330      	movs	r3, #48	; 0x30
 8007a44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007c08 <_vfiprintf_r+0x24c>
 8007a48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007a4c:	f04f 0901 	mov.w	r9, #1
 8007a50:	4623      	mov	r3, r4
 8007a52:	469a      	mov	sl, r3
 8007a54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a58:	b10a      	cbz	r2, 8007a5e <_vfiprintf_r+0xa2>
 8007a5a:	2a25      	cmp	r2, #37	; 0x25
 8007a5c:	d1f9      	bne.n	8007a52 <_vfiprintf_r+0x96>
 8007a5e:	ebba 0b04 	subs.w	fp, sl, r4
 8007a62:	d00b      	beq.n	8007a7c <_vfiprintf_r+0xc0>
 8007a64:	465b      	mov	r3, fp
 8007a66:	4622      	mov	r2, r4
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f7ff ff94 	bl	8007998 <__sfputs_r>
 8007a70:	3001      	adds	r0, #1
 8007a72:	f000 80aa 	beq.w	8007bca <_vfiprintf_r+0x20e>
 8007a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a78:	445a      	add	r2, fp
 8007a7a:	9209      	str	r2, [sp, #36]	; 0x24
 8007a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 80a2 	beq.w	8007bca <_vfiprintf_r+0x20e>
 8007a86:	2300      	movs	r3, #0
 8007a88:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a90:	f10a 0a01 	add.w	sl, sl, #1
 8007a94:	9304      	str	r3, [sp, #16]
 8007a96:	9307      	str	r3, [sp, #28]
 8007a98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a9c:	931a      	str	r3, [sp, #104]	; 0x68
 8007a9e:	4654      	mov	r4, sl
 8007aa0:	2205      	movs	r2, #5
 8007aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aa6:	4858      	ldr	r0, [pc, #352]	; (8007c08 <_vfiprintf_r+0x24c>)
 8007aa8:	f7f8 fb9a 	bl	80001e0 <memchr>
 8007aac:	9a04      	ldr	r2, [sp, #16]
 8007aae:	b9d8      	cbnz	r0, 8007ae8 <_vfiprintf_r+0x12c>
 8007ab0:	06d1      	lsls	r1, r2, #27
 8007ab2:	bf44      	itt	mi
 8007ab4:	2320      	movmi	r3, #32
 8007ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007aba:	0713      	lsls	r3, r2, #28
 8007abc:	bf44      	itt	mi
 8007abe:	232b      	movmi	r3, #43	; 0x2b
 8007ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ac4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ac8:	2b2a      	cmp	r3, #42	; 0x2a
 8007aca:	d015      	beq.n	8007af8 <_vfiprintf_r+0x13c>
 8007acc:	9a07      	ldr	r2, [sp, #28]
 8007ace:	4654      	mov	r4, sl
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	f04f 0c0a 	mov.w	ip, #10
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007adc:	3b30      	subs	r3, #48	; 0x30
 8007ade:	2b09      	cmp	r3, #9
 8007ae0:	d94e      	bls.n	8007b80 <_vfiprintf_r+0x1c4>
 8007ae2:	b1b0      	cbz	r0, 8007b12 <_vfiprintf_r+0x156>
 8007ae4:	9207      	str	r2, [sp, #28]
 8007ae6:	e014      	b.n	8007b12 <_vfiprintf_r+0x156>
 8007ae8:	eba0 0308 	sub.w	r3, r0, r8
 8007aec:	fa09 f303 	lsl.w	r3, r9, r3
 8007af0:	4313      	orrs	r3, r2
 8007af2:	9304      	str	r3, [sp, #16]
 8007af4:	46a2      	mov	sl, r4
 8007af6:	e7d2      	b.n	8007a9e <_vfiprintf_r+0xe2>
 8007af8:	9b03      	ldr	r3, [sp, #12]
 8007afa:	1d19      	adds	r1, r3, #4
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	9103      	str	r1, [sp, #12]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	bfbb      	ittet	lt
 8007b04:	425b      	neglt	r3, r3
 8007b06:	f042 0202 	orrlt.w	r2, r2, #2
 8007b0a:	9307      	strge	r3, [sp, #28]
 8007b0c:	9307      	strlt	r3, [sp, #28]
 8007b0e:	bfb8      	it	lt
 8007b10:	9204      	strlt	r2, [sp, #16]
 8007b12:	7823      	ldrb	r3, [r4, #0]
 8007b14:	2b2e      	cmp	r3, #46	; 0x2e
 8007b16:	d10c      	bne.n	8007b32 <_vfiprintf_r+0x176>
 8007b18:	7863      	ldrb	r3, [r4, #1]
 8007b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8007b1c:	d135      	bne.n	8007b8a <_vfiprintf_r+0x1ce>
 8007b1e:	9b03      	ldr	r3, [sp, #12]
 8007b20:	1d1a      	adds	r2, r3, #4
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	9203      	str	r2, [sp, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bfb8      	it	lt
 8007b2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007b2e:	3402      	adds	r4, #2
 8007b30:	9305      	str	r3, [sp, #20]
 8007b32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007c18 <_vfiprintf_r+0x25c>
 8007b36:	7821      	ldrb	r1, [r4, #0]
 8007b38:	2203      	movs	r2, #3
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	f7f8 fb50 	bl	80001e0 <memchr>
 8007b40:	b140      	cbz	r0, 8007b54 <_vfiprintf_r+0x198>
 8007b42:	2340      	movs	r3, #64	; 0x40
 8007b44:	eba0 000a 	sub.w	r0, r0, sl
 8007b48:	fa03 f000 	lsl.w	r0, r3, r0
 8007b4c:	9b04      	ldr	r3, [sp, #16]
 8007b4e:	4303      	orrs	r3, r0
 8007b50:	3401      	adds	r4, #1
 8007b52:	9304      	str	r3, [sp, #16]
 8007b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b58:	482c      	ldr	r0, [pc, #176]	; (8007c0c <_vfiprintf_r+0x250>)
 8007b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b5e:	2206      	movs	r2, #6
 8007b60:	f7f8 fb3e 	bl	80001e0 <memchr>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d03f      	beq.n	8007be8 <_vfiprintf_r+0x22c>
 8007b68:	4b29      	ldr	r3, [pc, #164]	; (8007c10 <_vfiprintf_r+0x254>)
 8007b6a:	bb1b      	cbnz	r3, 8007bb4 <_vfiprintf_r+0x1f8>
 8007b6c:	9b03      	ldr	r3, [sp, #12]
 8007b6e:	3307      	adds	r3, #7
 8007b70:	f023 0307 	bic.w	r3, r3, #7
 8007b74:	3308      	adds	r3, #8
 8007b76:	9303      	str	r3, [sp, #12]
 8007b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7a:	443b      	add	r3, r7
 8007b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7e:	e767      	b.n	8007a50 <_vfiprintf_r+0x94>
 8007b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b84:	460c      	mov	r4, r1
 8007b86:	2001      	movs	r0, #1
 8007b88:	e7a5      	b.n	8007ad6 <_vfiprintf_r+0x11a>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	3401      	adds	r4, #1
 8007b8e:	9305      	str	r3, [sp, #20]
 8007b90:	4619      	mov	r1, r3
 8007b92:	f04f 0c0a 	mov.w	ip, #10
 8007b96:	4620      	mov	r0, r4
 8007b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b9c:	3a30      	subs	r2, #48	; 0x30
 8007b9e:	2a09      	cmp	r2, #9
 8007ba0:	d903      	bls.n	8007baa <_vfiprintf_r+0x1ee>
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0c5      	beq.n	8007b32 <_vfiprintf_r+0x176>
 8007ba6:	9105      	str	r1, [sp, #20]
 8007ba8:	e7c3      	b.n	8007b32 <_vfiprintf_r+0x176>
 8007baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bae:	4604      	mov	r4, r0
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e7f0      	b.n	8007b96 <_vfiprintf_r+0x1da>
 8007bb4:	ab03      	add	r3, sp, #12
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	462a      	mov	r2, r5
 8007bba:	4b16      	ldr	r3, [pc, #88]	; (8007c14 <_vfiprintf_r+0x258>)
 8007bbc:	a904      	add	r1, sp, #16
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7fd fdd6 	bl	8005770 <_printf_float>
 8007bc4:	4607      	mov	r7, r0
 8007bc6:	1c78      	adds	r0, r7, #1
 8007bc8:	d1d6      	bne.n	8007b78 <_vfiprintf_r+0x1bc>
 8007bca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bcc:	07d9      	lsls	r1, r3, #31
 8007bce:	d405      	bmi.n	8007bdc <_vfiprintf_r+0x220>
 8007bd0:	89ab      	ldrh	r3, [r5, #12]
 8007bd2:	059a      	lsls	r2, r3, #22
 8007bd4:	d402      	bmi.n	8007bdc <_vfiprintf_r+0x220>
 8007bd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bd8:	f000 faaf 	bl	800813a <__retarget_lock_release_recursive>
 8007bdc:	89ab      	ldrh	r3, [r5, #12]
 8007bde:	065b      	lsls	r3, r3, #25
 8007be0:	f53f af12 	bmi.w	8007a08 <_vfiprintf_r+0x4c>
 8007be4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007be6:	e711      	b.n	8007a0c <_vfiprintf_r+0x50>
 8007be8:	ab03      	add	r3, sp, #12
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	462a      	mov	r2, r5
 8007bee:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <_vfiprintf_r+0x258>)
 8007bf0:	a904      	add	r1, sp, #16
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f7fe f860 	bl	8005cb8 <_printf_i>
 8007bf8:	e7e4      	b.n	8007bc4 <_vfiprintf_r+0x208>
 8007bfa:	bf00      	nop
 8007bfc:	0800887c 	.word	0x0800887c
 8007c00:	0800889c 	.word	0x0800889c
 8007c04:	0800885c 	.word	0x0800885c
 8007c08:	08008704 	.word	0x08008704
 8007c0c:	0800870e 	.word	0x0800870e
 8007c10:	08005771 	.word	0x08005771
 8007c14:	08007999 	.word	0x08007999
 8007c18:	0800870a 	.word	0x0800870a

08007c1c <__swbuf_r>:
 8007c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1e:	460e      	mov	r6, r1
 8007c20:	4614      	mov	r4, r2
 8007c22:	4605      	mov	r5, r0
 8007c24:	b118      	cbz	r0, 8007c2e <__swbuf_r+0x12>
 8007c26:	6983      	ldr	r3, [r0, #24]
 8007c28:	b90b      	cbnz	r3, 8007c2e <__swbuf_r+0x12>
 8007c2a:	f000 f9e7 	bl	8007ffc <__sinit>
 8007c2e:	4b21      	ldr	r3, [pc, #132]	; (8007cb4 <__swbuf_r+0x98>)
 8007c30:	429c      	cmp	r4, r3
 8007c32:	d12b      	bne.n	8007c8c <__swbuf_r+0x70>
 8007c34:	686c      	ldr	r4, [r5, #4]
 8007c36:	69a3      	ldr	r3, [r4, #24]
 8007c38:	60a3      	str	r3, [r4, #8]
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	071a      	lsls	r2, r3, #28
 8007c3e:	d52f      	bpl.n	8007ca0 <__swbuf_r+0x84>
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	b36b      	cbz	r3, 8007ca0 <__swbuf_r+0x84>
 8007c44:	6923      	ldr	r3, [r4, #16]
 8007c46:	6820      	ldr	r0, [r4, #0]
 8007c48:	1ac0      	subs	r0, r0, r3
 8007c4a:	6963      	ldr	r3, [r4, #20]
 8007c4c:	b2f6      	uxtb	r6, r6
 8007c4e:	4283      	cmp	r3, r0
 8007c50:	4637      	mov	r7, r6
 8007c52:	dc04      	bgt.n	8007c5e <__swbuf_r+0x42>
 8007c54:	4621      	mov	r1, r4
 8007c56:	4628      	mov	r0, r5
 8007c58:	f000 f93c 	bl	8007ed4 <_fflush_r>
 8007c5c:	bb30      	cbnz	r0, 8007cac <__swbuf_r+0x90>
 8007c5e:	68a3      	ldr	r3, [r4, #8]
 8007c60:	3b01      	subs	r3, #1
 8007c62:	60a3      	str	r3, [r4, #8]
 8007c64:	6823      	ldr	r3, [r4, #0]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	6022      	str	r2, [r4, #0]
 8007c6a:	701e      	strb	r6, [r3, #0]
 8007c6c:	6963      	ldr	r3, [r4, #20]
 8007c6e:	3001      	adds	r0, #1
 8007c70:	4283      	cmp	r3, r0
 8007c72:	d004      	beq.n	8007c7e <__swbuf_r+0x62>
 8007c74:	89a3      	ldrh	r3, [r4, #12]
 8007c76:	07db      	lsls	r3, r3, #31
 8007c78:	d506      	bpl.n	8007c88 <__swbuf_r+0x6c>
 8007c7a:	2e0a      	cmp	r6, #10
 8007c7c:	d104      	bne.n	8007c88 <__swbuf_r+0x6c>
 8007c7e:	4621      	mov	r1, r4
 8007c80:	4628      	mov	r0, r5
 8007c82:	f000 f927 	bl	8007ed4 <_fflush_r>
 8007c86:	b988      	cbnz	r0, 8007cac <__swbuf_r+0x90>
 8007c88:	4638      	mov	r0, r7
 8007c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <__swbuf_r+0x9c>)
 8007c8e:	429c      	cmp	r4, r3
 8007c90:	d101      	bne.n	8007c96 <__swbuf_r+0x7a>
 8007c92:	68ac      	ldr	r4, [r5, #8]
 8007c94:	e7cf      	b.n	8007c36 <__swbuf_r+0x1a>
 8007c96:	4b09      	ldr	r3, [pc, #36]	; (8007cbc <__swbuf_r+0xa0>)
 8007c98:	429c      	cmp	r4, r3
 8007c9a:	bf08      	it	eq
 8007c9c:	68ec      	ldreq	r4, [r5, #12]
 8007c9e:	e7ca      	b.n	8007c36 <__swbuf_r+0x1a>
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	4628      	mov	r0, r5
 8007ca4:	f000 f81a 	bl	8007cdc <__swsetup_r>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d0cb      	beq.n	8007c44 <__swbuf_r+0x28>
 8007cac:	f04f 37ff 	mov.w	r7, #4294967295
 8007cb0:	e7ea      	b.n	8007c88 <__swbuf_r+0x6c>
 8007cb2:	bf00      	nop
 8007cb4:	0800887c 	.word	0x0800887c
 8007cb8:	0800889c 	.word	0x0800889c
 8007cbc:	0800885c 	.word	0x0800885c

08007cc0 <__ascii_wctomb>:
 8007cc0:	b149      	cbz	r1, 8007cd6 <__ascii_wctomb+0x16>
 8007cc2:	2aff      	cmp	r2, #255	; 0xff
 8007cc4:	bf85      	ittet	hi
 8007cc6:	238a      	movhi	r3, #138	; 0x8a
 8007cc8:	6003      	strhi	r3, [r0, #0]
 8007cca:	700a      	strbls	r2, [r1, #0]
 8007ccc:	f04f 30ff 	movhi.w	r0, #4294967295
 8007cd0:	bf98      	it	ls
 8007cd2:	2001      	movls	r0, #1
 8007cd4:	4770      	bx	lr
 8007cd6:	4608      	mov	r0, r1
 8007cd8:	4770      	bx	lr
	...

08007cdc <__swsetup_r>:
 8007cdc:	4b32      	ldr	r3, [pc, #200]	; (8007da8 <__swsetup_r+0xcc>)
 8007cde:	b570      	push	{r4, r5, r6, lr}
 8007ce0:	681d      	ldr	r5, [r3, #0]
 8007ce2:	4606      	mov	r6, r0
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	b125      	cbz	r5, 8007cf2 <__swsetup_r+0x16>
 8007ce8:	69ab      	ldr	r3, [r5, #24]
 8007cea:	b913      	cbnz	r3, 8007cf2 <__swsetup_r+0x16>
 8007cec:	4628      	mov	r0, r5
 8007cee:	f000 f985 	bl	8007ffc <__sinit>
 8007cf2:	4b2e      	ldr	r3, [pc, #184]	; (8007dac <__swsetup_r+0xd0>)
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	d10f      	bne.n	8007d18 <__swsetup_r+0x3c>
 8007cf8:	686c      	ldr	r4, [r5, #4]
 8007cfa:	89a3      	ldrh	r3, [r4, #12]
 8007cfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d00:	0719      	lsls	r1, r3, #28
 8007d02:	d42c      	bmi.n	8007d5e <__swsetup_r+0x82>
 8007d04:	06dd      	lsls	r5, r3, #27
 8007d06:	d411      	bmi.n	8007d2c <__swsetup_r+0x50>
 8007d08:	2309      	movs	r3, #9
 8007d0a:	6033      	str	r3, [r6, #0]
 8007d0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d10:	81a3      	strh	r3, [r4, #12]
 8007d12:	f04f 30ff 	mov.w	r0, #4294967295
 8007d16:	e03e      	b.n	8007d96 <__swsetup_r+0xba>
 8007d18:	4b25      	ldr	r3, [pc, #148]	; (8007db0 <__swsetup_r+0xd4>)
 8007d1a:	429c      	cmp	r4, r3
 8007d1c:	d101      	bne.n	8007d22 <__swsetup_r+0x46>
 8007d1e:	68ac      	ldr	r4, [r5, #8]
 8007d20:	e7eb      	b.n	8007cfa <__swsetup_r+0x1e>
 8007d22:	4b24      	ldr	r3, [pc, #144]	; (8007db4 <__swsetup_r+0xd8>)
 8007d24:	429c      	cmp	r4, r3
 8007d26:	bf08      	it	eq
 8007d28:	68ec      	ldreq	r4, [r5, #12]
 8007d2a:	e7e6      	b.n	8007cfa <__swsetup_r+0x1e>
 8007d2c:	0758      	lsls	r0, r3, #29
 8007d2e:	d512      	bpl.n	8007d56 <__swsetup_r+0x7a>
 8007d30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d32:	b141      	cbz	r1, 8007d46 <__swsetup_r+0x6a>
 8007d34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d38:	4299      	cmp	r1, r3
 8007d3a:	d002      	beq.n	8007d42 <__swsetup_r+0x66>
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	f7ff fb31 	bl	80073a4 <_free_r>
 8007d42:	2300      	movs	r3, #0
 8007d44:	6363      	str	r3, [r4, #52]	; 0x34
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007d4c:	81a3      	strh	r3, [r4, #12]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	6063      	str	r3, [r4, #4]
 8007d52:	6923      	ldr	r3, [r4, #16]
 8007d54:	6023      	str	r3, [r4, #0]
 8007d56:	89a3      	ldrh	r3, [r4, #12]
 8007d58:	f043 0308 	orr.w	r3, r3, #8
 8007d5c:	81a3      	strh	r3, [r4, #12]
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	b94b      	cbnz	r3, 8007d76 <__swsetup_r+0x9a>
 8007d62:	89a3      	ldrh	r3, [r4, #12]
 8007d64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d6c:	d003      	beq.n	8007d76 <__swsetup_r+0x9a>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4630      	mov	r0, r6
 8007d72:	f000 fa09 	bl	8008188 <__smakebuf_r>
 8007d76:	89a0      	ldrh	r0, [r4, #12]
 8007d78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d7c:	f010 0301 	ands.w	r3, r0, #1
 8007d80:	d00a      	beq.n	8007d98 <__swsetup_r+0xbc>
 8007d82:	2300      	movs	r3, #0
 8007d84:	60a3      	str	r3, [r4, #8]
 8007d86:	6963      	ldr	r3, [r4, #20]
 8007d88:	425b      	negs	r3, r3
 8007d8a:	61a3      	str	r3, [r4, #24]
 8007d8c:	6923      	ldr	r3, [r4, #16]
 8007d8e:	b943      	cbnz	r3, 8007da2 <__swsetup_r+0xc6>
 8007d90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007d94:	d1ba      	bne.n	8007d0c <__swsetup_r+0x30>
 8007d96:	bd70      	pop	{r4, r5, r6, pc}
 8007d98:	0781      	lsls	r1, r0, #30
 8007d9a:	bf58      	it	pl
 8007d9c:	6963      	ldrpl	r3, [r4, #20]
 8007d9e:	60a3      	str	r3, [r4, #8]
 8007da0:	e7f4      	b.n	8007d8c <__swsetup_r+0xb0>
 8007da2:	2000      	movs	r0, #0
 8007da4:	e7f7      	b.n	8007d96 <__swsetup_r+0xba>
 8007da6:	bf00      	nop
 8007da8:	2000000c 	.word	0x2000000c
 8007dac:	0800887c 	.word	0x0800887c
 8007db0:	0800889c 	.word	0x0800889c
 8007db4:	0800885c 	.word	0x0800885c

08007db8 <abort>:
 8007db8:	b508      	push	{r3, lr}
 8007dba:	2006      	movs	r0, #6
 8007dbc:	f000 fa54 	bl	8008268 <raise>
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	f7fa fa4f 	bl	8002264 <_exit>
	...

08007dc8 <__sflush_r>:
 8007dc8:	898a      	ldrh	r2, [r1, #12]
 8007dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007dce:	4605      	mov	r5, r0
 8007dd0:	0710      	lsls	r0, r2, #28
 8007dd2:	460c      	mov	r4, r1
 8007dd4:	d458      	bmi.n	8007e88 <__sflush_r+0xc0>
 8007dd6:	684b      	ldr	r3, [r1, #4]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dc05      	bgt.n	8007de8 <__sflush_r+0x20>
 8007ddc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	dc02      	bgt.n	8007de8 <__sflush_r+0x20>
 8007de2:	2000      	movs	r0, #0
 8007de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007de8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007dea:	2e00      	cmp	r6, #0
 8007dec:	d0f9      	beq.n	8007de2 <__sflush_r+0x1a>
 8007dee:	2300      	movs	r3, #0
 8007df0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007df4:	682f      	ldr	r7, [r5, #0]
 8007df6:	602b      	str	r3, [r5, #0]
 8007df8:	d032      	beq.n	8007e60 <__sflush_r+0x98>
 8007dfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007dfc:	89a3      	ldrh	r3, [r4, #12]
 8007dfe:	075a      	lsls	r2, r3, #29
 8007e00:	d505      	bpl.n	8007e0e <__sflush_r+0x46>
 8007e02:	6863      	ldr	r3, [r4, #4]
 8007e04:	1ac0      	subs	r0, r0, r3
 8007e06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e08:	b10b      	cbz	r3, 8007e0e <__sflush_r+0x46>
 8007e0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e0c:	1ac0      	subs	r0, r0, r3
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4602      	mov	r2, r0
 8007e12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e14:	6a21      	ldr	r1, [r4, #32]
 8007e16:	4628      	mov	r0, r5
 8007e18:	47b0      	blx	r6
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	89a3      	ldrh	r3, [r4, #12]
 8007e1e:	d106      	bne.n	8007e2e <__sflush_r+0x66>
 8007e20:	6829      	ldr	r1, [r5, #0]
 8007e22:	291d      	cmp	r1, #29
 8007e24:	d82c      	bhi.n	8007e80 <__sflush_r+0xb8>
 8007e26:	4a2a      	ldr	r2, [pc, #168]	; (8007ed0 <__sflush_r+0x108>)
 8007e28:	40ca      	lsrs	r2, r1
 8007e2a:	07d6      	lsls	r6, r2, #31
 8007e2c:	d528      	bpl.n	8007e80 <__sflush_r+0xb8>
 8007e2e:	2200      	movs	r2, #0
 8007e30:	6062      	str	r2, [r4, #4]
 8007e32:	04d9      	lsls	r1, r3, #19
 8007e34:	6922      	ldr	r2, [r4, #16]
 8007e36:	6022      	str	r2, [r4, #0]
 8007e38:	d504      	bpl.n	8007e44 <__sflush_r+0x7c>
 8007e3a:	1c42      	adds	r2, r0, #1
 8007e3c:	d101      	bne.n	8007e42 <__sflush_r+0x7a>
 8007e3e:	682b      	ldr	r3, [r5, #0]
 8007e40:	b903      	cbnz	r3, 8007e44 <__sflush_r+0x7c>
 8007e42:	6560      	str	r0, [r4, #84]	; 0x54
 8007e44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e46:	602f      	str	r7, [r5, #0]
 8007e48:	2900      	cmp	r1, #0
 8007e4a:	d0ca      	beq.n	8007de2 <__sflush_r+0x1a>
 8007e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e50:	4299      	cmp	r1, r3
 8007e52:	d002      	beq.n	8007e5a <__sflush_r+0x92>
 8007e54:	4628      	mov	r0, r5
 8007e56:	f7ff faa5 	bl	80073a4 <_free_r>
 8007e5a:	2000      	movs	r0, #0
 8007e5c:	6360      	str	r0, [r4, #52]	; 0x34
 8007e5e:	e7c1      	b.n	8007de4 <__sflush_r+0x1c>
 8007e60:	6a21      	ldr	r1, [r4, #32]
 8007e62:	2301      	movs	r3, #1
 8007e64:	4628      	mov	r0, r5
 8007e66:	47b0      	blx	r6
 8007e68:	1c41      	adds	r1, r0, #1
 8007e6a:	d1c7      	bne.n	8007dfc <__sflush_r+0x34>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d0c4      	beq.n	8007dfc <__sflush_r+0x34>
 8007e72:	2b1d      	cmp	r3, #29
 8007e74:	d001      	beq.n	8007e7a <__sflush_r+0xb2>
 8007e76:	2b16      	cmp	r3, #22
 8007e78:	d101      	bne.n	8007e7e <__sflush_r+0xb6>
 8007e7a:	602f      	str	r7, [r5, #0]
 8007e7c:	e7b1      	b.n	8007de2 <__sflush_r+0x1a>
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	e7ad      	b.n	8007de4 <__sflush_r+0x1c>
 8007e88:	690f      	ldr	r7, [r1, #16]
 8007e8a:	2f00      	cmp	r7, #0
 8007e8c:	d0a9      	beq.n	8007de2 <__sflush_r+0x1a>
 8007e8e:	0793      	lsls	r3, r2, #30
 8007e90:	680e      	ldr	r6, [r1, #0]
 8007e92:	bf08      	it	eq
 8007e94:	694b      	ldreq	r3, [r1, #20]
 8007e96:	600f      	str	r7, [r1, #0]
 8007e98:	bf18      	it	ne
 8007e9a:	2300      	movne	r3, #0
 8007e9c:	eba6 0807 	sub.w	r8, r6, r7
 8007ea0:	608b      	str	r3, [r1, #8]
 8007ea2:	f1b8 0f00 	cmp.w	r8, #0
 8007ea6:	dd9c      	ble.n	8007de2 <__sflush_r+0x1a>
 8007ea8:	6a21      	ldr	r1, [r4, #32]
 8007eaa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007eac:	4643      	mov	r3, r8
 8007eae:	463a      	mov	r2, r7
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	47b0      	blx	r6
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	dc06      	bgt.n	8007ec6 <__sflush_r+0xfe>
 8007eb8:	89a3      	ldrh	r3, [r4, #12]
 8007eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ebe:	81a3      	strh	r3, [r4, #12]
 8007ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ec4:	e78e      	b.n	8007de4 <__sflush_r+0x1c>
 8007ec6:	4407      	add	r7, r0
 8007ec8:	eba8 0800 	sub.w	r8, r8, r0
 8007ecc:	e7e9      	b.n	8007ea2 <__sflush_r+0xda>
 8007ece:	bf00      	nop
 8007ed0:	20400001 	.word	0x20400001

08007ed4 <_fflush_r>:
 8007ed4:	b538      	push	{r3, r4, r5, lr}
 8007ed6:	690b      	ldr	r3, [r1, #16]
 8007ed8:	4605      	mov	r5, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	b913      	cbnz	r3, 8007ee4 <_fflush_r+0x10>
 8007ede:	2500      	movs	r5, #0
 8007ee0:	4628      	mov	r0, r5
 8007ee2:	bd38      	pop	{r3, r4, r5, pc}
 8007ee4:	b118      	cbz	r0, 8007eee <_fflush_r+0x1a>
 8007ee6:	6983      	ldr	r3, [r0, #24]
 8007ee8:	b90b      	cbnz	r3, 8007eee <_fflush_r+0x1a>
 8007eea:	f000 f887 	bl	8007ffc <__sinit>
 8007eee:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <_fflush_r+0x6c>)
 8007ef0:	429c      	cmp	r4, r3
 8007ef2:	d11b      	bne.n	8007f2c <_fflush_r+0x58>
 8007ef4:	686c      	ldr	r4, [r5, #4]
 8007ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d0ef      	beq.n	8007ede <_fflush_r+0xa>
 8007efe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f00:	07d0      	lsls	r0, r2, #31
 8007f02:	d404      	bmi.n	8007f0e <_fflush_r+0x3a>
 8007f04:	0599      	lsls	r1, r3, #22
 8007f06:	d402      	bmi.n	8007f0e <_fflush_r+0x3a>
 8007f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f0a:	f000 f915 	bl	8008138 <__retarget_lock_acquire_recursive>
 8007f0e:	4628      	mov	r0, r5
 8007f10:	4621      	mov	r1, r4
 8007f12:	f7ff ff59 	bl	8007dc8 <__sflush_r>
 8007f16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f18:	07da      	lsls	r2, r3, #31
 8007f1a:	4605      	mov	r5, r0
 8007f1c:	d4e0      	bmi.n	8007ee0 <_fflush_r+0xc>
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	059b      	lsls	r3, r3, #22
 8007f22:	d4dd      	bmi.n	8007ee0 <_fflush_r+0xc>
 8007f24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f26:	f000 f908 	bl	800813a <__retarget_lock_release_recursive>
 8007f2a:	e7d9      	b.n	8007ee0 <_fflush_r+0xc>
 8007f2c:	4b05      	ldr	r3, [pc, #20]	; (8007f44 <_fflush_r+0x70>)
 8007f2e:	429c      	cmp	r4, r3
 8007f30:	d101      	bne.n	8007f36 <_fflush_r+0x62>
 8007f32:	68ac      	ldr	r4, [r5, #8]
 8007f34:	e7df      	b.n	8007ef6 <_fflush_r+0x22>
 8007f36:	4b04      	ldr	r3, [pc, #16]	; (8007f48 <_fflush_r+0x74>)
 8007f38:	429c      	cmp	r4, r3
 8007f3a:	bf08      	it	eq
 8007f3c:	68ec      	ldreq	r4, [r5, #12]
 8007f3e:	e7da      	b.n	8007ef6 <_fflush_r+0x22>
 8007f40:	0800887c 	.word	0x0800887c
 8007f44:	0800889c 	.word	0x0800889c
 8007f48:	0800885c 	.word	0x0800885c

08007f4c <std>:
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	b510      	push	{r4, lr}
 8007f50:	4604      	mov	r4, r0
 8007f52:	e9c0 3300 	strd	r3, r3, [r0]
 8007f56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f5a:	6083      	str	r3, [r0, #8]
 8007f5c:	8181      	strh	r1, [r0, #12]
 8007f5e:	6643      	str	r3, [r0, #100]	; 0x64
 8007f60:	81c2      	strh	r2, [r0, #14]
 8007f62:	6183      	str	r3, [r0, #24]
 8007f64:	4619      	mov	r1, r3
 8007f66:	2208      	movs	r2, #8
 8007f68:	305c      	adds	r0, #92	; 0x5c
 8007f6a:	f7fd fb59 	bl	8005620 <memset>
 8007f6e:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <std+0x38>)
 8007f70:	6263      	str	r3, [r4, #36]	; 0x24
 8007f72:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <std+0x3c>)
 8007f74:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <std+0x40>)
 8007f78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f7a:	4b05      	ldr	r3, [pc, #20]	; (8007f90 <std+0x44>)
 8007f7c:	6224      	str	r4, [r4, #32]
 8007f7e:	6323      	str	r3, [r4, #48]	; 0x30
 8007f80:	bd10      	pop	{r4, pc}
 8007f82:	bf00      	nop
 8007f84:	080082a1 	.word	0x080082a1
 8007f88:	080082c3 	.word	0x080082c3
 8007f8c:	080082fb 	.word	0x080082fb
 8007f90:	0800831f 	.word	0x0800831f

08007f94 <_cleanup_r>:
 8007f94:	4901      	ldr	r1, [pc, #4]	; (8007f9c <_cleanup_r+0x8>)
 8007f96:	f000 b8af 	b.w	80080f8 <_fwalk_reent>
 8007f9a:	bf00      	nop
 8007f9c:	08007ed5 	.word	0x08007ed5

08007fa0 <__sfmoreglue>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	2268      	movs	r2, #104	; 0x68
 8007fa4:	1e4d      	subs	r5, r1, #1
 8007fa6:	4355      	muls	r5, r2
 8007fa8:	460e      	mov	r6, r1
 8007faa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007fae:	f7ff fa65 	bl	800747c <_malloc_r>
 8007fb2:	4604      	mov	r4, r0
 8007fb4:	b140      	cbz	r0, 8007fc8 <__sfmoreglue+0x28>
 8007fb6:	2100      	movs	r1, #0
 8007fb8:	e9c0 1600 	strd	r1, r6, [r0]
 8007fbc:	300c      	adds	r0, #12
 8007fbe:	60a0      	str	r0, [r4, #8]
 8007fc0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007fc4:	f7fd fb2c 	bl	8005620 <memset>
 8007fc8:	4620      	mov	r0, r4
 8007fca:	bd70      	pop	{r4, r5, r6, pc}

08007fcc <__sfp_lock_acquire>:
 8007fcc:	4801      	ldr	r0, [pc, #4]	; (8007fd4 <__sfp_lock_acquire+0x8>)
 8007fce:	f000 b8b3 	b.w	8008138 <__retarget_lock_acquire_recursive>
 8007fd2:	bf00      	nop
 8007fd4:	200003f9 	.word	0x200003f9

08007fd8 <__sfp_lock_release>:
 8007fd8:	4801      	ldr	r0, [pc, #4]	; (8007fe0 <__sfp_lock_release+0x8>)
 8007fda:	f000 b8ae 	b.w	800813a <__retarget_lock_release_recursive>
 8007fde:	bf00      	nop
 8007fe0:	200003f9 	.word	0x200003f9

08007fe4 <__sinit_lock_acquire>:
 8007fe4:	4801      	ldr	r0, [pc, #4]	; (8007fec <__sinit_lock_acquire+0x8>)
 8007fe6:	f000 b8a7 	b.w	8008138 <__retarget_lock_acquire_recursive>
 8007fea:	bf00      	nop
 8007fec:	200003fa 	.word	0x200003fa

08007ff0 <__sinit_lock_release>:
 8007ff0:	4801      	ldr	r0, [pc, #4]	; (8007ff8 <__sinit_lock_release+0x8>)
 8007ff2:	f000 b8a2 	b.w	800813a <__retarget_lock_release_recursive>
 8007ff6:	bf00      	nop
 8007ff8:	200003fa 	.word	0x200003fa

08007ffc <__sinit>:
 8007ffc:	b510      	push	{r4, lr}
 8007ffe:	4604      	mov	r4, r0
 8008000:	f7ff fff0 	bl	8007fe4 <__sinit_lock_acquire>
 8008004:	69a3      	ldr	r3, [r4, #24]
 8008006:	b11b      	cbz	r3, 8008010 <__sinit+0x14>
 8008008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800800c:	f7ff bff0 	b.w	8007ff0 <__sinit_lock_release>
 8008010:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008014:	6523      	str	r3, [r4, #80]	; 0x50
 8008016:	4b13      	ldr	r3, [pc, #76]	; (8008064 <__sinit+0x68>)
 8008018:	4a13      	ldr	r2, [pc, #76]	; (8008068 <__sinit+0x6c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	62a2      	str	r2, [r4, #40]	; 0x28
 800801e:	42a3      	cmp	r3, r4
 8008020:	bf04      	itt	eq
 8008022:	2301      	moveq	r3, #1
 8008024:	61a3      	streq	r3, [r4, #24]
 8008026:	4620      	mov	r0, r4
 8008028:	f000 f820 	bl	800806c <__sfp>
 800802c:	6060      	str	r0, [r4, #4]
 800802e:	4620      	mov	r0, r4
 8008030:	f000 f81c 	bl	800806c <__sfp>
 8008034:	60a0      	str	r0, [r4, #8]
 8008036:	4620      	mov	r0, r4
 8008038:	f000 f818 	bl	800806c <__sfp>
 800803c:	2200      	movs	r2, #0
 800803e:	60e0      	str	r0, [r4, #12]
 8008040:	2104      	movs	r1, #4
 8008042:	6860      	ldr	r0, [r4, #4]
 8008044:	f7ff ff82 	bl	8007f4c <std>
 8008048:	68a0      	ldr	r0, [r4, #8]
 800804a:	2201      	movs	r2, #1
 800804c:	2109      	movs	r1, #9
 800804e:	f7ff ff7d 	bl	8007f4c <std>
 8008052:	68e0      	ldr	r0, [r4, #12]
 8008054:	2202      	movs	r2, #2
 8008056:	2112      	movs	r1, #18
 8008058:	f7ff ff78 	bl	8007f4c <std>
 800805c:	2301      	movs	r3, #1
 800805e:	61a3      	str	r3, [r4, #24]
 8008060:	e7d2      	b.n	8008008 <__sinit+0xc>
 8008062:	bf00      	nop
 8008064:	080084e4 	.word	0x080084e4
 8008068:	08007f95 	.word	0x08007f95

0800806c <__sfp>:
 800806c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800806e:	4607      	mov	r7, r0
 8008070:	f7ff ffac 	bl	8007fcc <__sfp_lock_acquire>
 8008074:	4b1e      	ldr	r3, [pc, #120]	; (80080f0 <__sfp+0x84>)
 8008076:	681e      	ldr	r6, [r3, #0]
 8008078:	69b3      	ldr	r3, [r6, #24]
 800807a:	b913      	cbnz	r3, 8008082 <__sfp+0x16>
 800807c:	4630      	mov	r0, r6
 800807e:	f7ff ffbd 	bl	8007ffc <__sinit>
 8008082:	3648      	adds	r6, #72	; 0x48
 8008084:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008088:	3b01      	subs	r3, #1
 800808a:	d503      	bpl.n	8008094 <__sfp+0x28>
 800808c:	6833      	ldr	r3, [r6, #0]
 800808e:	b30b      	cbz	r3, 80080d4 <__sfp+0x68>
 8008090:	6836      	ldr	r6, [r6, #0]
 8008092:	e7f7      	b.n	8008084 <__sfp+0x18>
 8008094:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008098:	b9d5      	cbnz	r5, 80080d0 <__sfp+0x64>
 800809a:	4b16      	ldr	r3, [pc, #88]	; (80080f4 <__sfp+0x88>)
 800809c:	60e3      	str	r3, [r4, #12]
 800809e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080a2:	6665      	str	r5, [r4, #100]	; 0x64
 80080a4:	f000 f847 	bl	8008136 <__retarget_lock_init_recursive>
 80080a8:	f7ff ff96 	bl	8007fd8 <__sfp_lock_release>
 80080ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80080b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80080b4:	6025      	str	r5, [r4, #0]
 80080b6:	61a5      	str	r5, [r4, #24]
 80080b8:	2208      	movs	r2, #8
 80080ba:	4629      	mov	r1, r5
 80080bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80080c0:	f7fd faae 	bl	8005620 <memset>
 80080c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80080c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80080cc:	4620      	mov	r0, r4
 80080ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080d0:	3468      	adds	r4, #104	; 0x68
 80080d2:	e7d9      	b.n	8008088 <__sfp+0x1c>
 80080d4:	2104      	movs	r1, #4
 80080d6:	4638      	mov	r0, r7
 80080d8:	f7ff ff62 	bl	8007fa0 <__sfmoreglue>
 80080dc:	4604      	mov	r4, r0
 80080de:	6030      	str	r0, [r6, #0]
 80080e0:	2800      	cmp	r0, #0
 80080e2:	d1d5      	bne.n	8008090 <__sfp+0x24>
 80080e4:	f7ff ff78 	bl	8007fd8 <__sfp_lock_release>
 80080e8:	230c      	movs	r3, #12
 80080ea:	603b      	str	r3, [r7, #0]
 80080ec:	e7ee      	b.n	80080cc <__sfp+0x60>
 80080ee:	bf00      	nop
 80080f0:	080084e4 	.word	0x080084e4
 80080f4:	ffff0001 	.word	0xffff0001

080080f8 <_fwalk_reent>:
 80080f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080fc:	4606      	mov	r6, r0
 80080fe:	4688      	mov	r8, r1
 8008100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008104:	2700      	movs	r7, #0
 8008106:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800810a:	f1b9 0901 	subs.w	r9, r9, #1
 800810e:	d505      	bpl.n	800811c <_fwalk_reent+0x24>
 8008110:	6824      	ldr	r4, [r4, #0]
 8008112:	2c00      	cmp	r4, #0
 8008114:	d1f7      	bne.n	8008106 <_fwalk_reent+0xe>
 8008116:	4638      	mov	r0, r7
 8008118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800811c:	89ab      	ldrh	r3, [r5, #12]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d907      	bls.n	8008132 <_fwalk_reent+0x3a>
 8008122:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008126:	3301      	adds	r3, #1
 8008128:	d003      	beq.n	8008132 <_fwalk_reent+0x3a>
 800812a:	4629      	mov	r1, r5
 800812c:	4630      	mov	r0, r6
 800812e:	47c0      	blx	r8
 8008130:	4307      	orrs	r7, r0
 8008132:	3568      	adds	r5, #104	; 0x68
 8008134:	e7e9      	b.n	800810a <_fwalk_reent+0x12>

08008136 <__retarget_lock_init_recursive>:
 8008136:	4770      	bx	lr

08008138 <__retarget_lock_acquire_recursive>:
 8008138:	4770      	bx	lr

0800813a <__retarget_lock_release_recursive>:
 800813a:	4770      	bx	lr

0800813c <__swhatbuf_r>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	460e      	mov	r6, r1
 8008140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008144:	2900      	cmp	r1, #0
 8008146:	b096      	sub	sp, #88	; 0x58
 8008148:	4614      	mov	r4, r2
 800814a:	461d      	mov	r5, r3
 800814c:	da08      	bge.n	8008160 <__swhatbuf_r+0x24>
 800814e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	602a      	str	r2, [r5, #0]
 8008156:	061a      	lsls	r2, r3, #24
 8008158:	d410      	bmi.n	800817c <__swhatbuf_r+0x40>
 800815a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800815e:	e00e      	b.n	800817e <__swhatbuf_r+0x42>
 8008160:	466a      	mov	r2, sp
 8008162:	f000 f903 	bl	800836c <_fstat_r>
 8008166:	2800      	cmp	r0, #0
 8008168:	dbf1      	blt.n	800814e <__swhatbuf_r+0x12>
 800816a:	9a01      	ldr	r2, [sp, #4]
 800816c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008170:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008174:	425a      	negs	r2, r3
 8008176:	415a      	adcs	r2, r3
 8008178:	602a      	str	r2, [r5, #0]
 800817a:	e7ee      	b.n	800815a <__swhatbuf_r+0x1e>
 800817c:	2340      	movs	r3, #64	; 0x40
 800817e:	2000      	movs	r0, #0
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	b016      	add	sp, #88	; 0x58
 8008184:	bd70      	pop	{r4, r5, r6, pc}
	...

08008188 <__smakebuf_r>:
 8008188:	898b      	ldrh	r3, [r1, #12]
 800818a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800818c:	079d      	lsls	r5, r3, #30
 800818e:	4606      	mov	r6, r0
 8008190:	460c      	mov	r4, r1
 8008192:	d507      	bpl.n	80081a4 <__smakebuf_r+0x1c>
 8008194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008198:	6023      	str	r3, [r4, #0]
 800819a:	6123      	str	r3, [r4, #16]
 800819c:	2301      	movs	r3, #1
 800819e:	6163      	str	r3, [r4, #20]
 80081a0:	b002      	add	sp, #8
 80081a2:	bd70      	pop	{r4, r5, r6, pc}
 80081a4:	ab01      	add	r3, sp, #4
 80081a6:	466a      	mov	r2, sp
 80081a8:	f7ff ffc8 	bl	800813c <__swhatbuf_r>
 80081ac:	9900      	ldr	r1, [sp, #0]
 80081ae:	4605      	mov	r5, r0
 80081b0:	4630      	mov	r0, r6
 80081b2:	f7ff f963 	bl	800747c <_malloc_r>
 80081b6:	b948      	cbnz	r0, 80081cc <__smakebuf_r+0x44>
 80081b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081bc:	059a      	lsls	r2, r3, #22
 80081be:	d4ef      	bmi.n	80081a0 <__smakebuf_r+0x18>
 80081c0:	f023 0303 	bic.w	r3, r3, #3
 80081c4:	f043 0302 	orr.w	r3, r3, #2
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	e7e3      	b.n	8008194 <__smakebuf_r+0xc>
 80081cc:	4b0d      	ldr	r3, [pc, #52]	; (8008204 <__smakebuf_r+0x7c>)
 80081ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80081d0:	89a3      	ldrh	r3, [r4, #12]
 80081d2:	6020      	str	r0, [r4, #0]
 80081d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d8:	81a3      	strh	r3, [r4, #12]
 80081da:	9b00      	ldr	r3, [sp, #0]
 80081dc:	6163      	str	r3, [r4, #20]
 80081de:	9b01      	ldr	r3, [sp, #4]
 80081e0:	6120      	str	r0, [r4, #16]
 80081e2:	b15b      	cbz	r3, 80081fc <__smakebuf_r+0x74>
 80081e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081e8:	4630      	mov	r0, r6
 80081ea:	f000 f8d1 	bl	8008390 <_isatty_r>
 80081ee:	b128      	cbz	r0, 80081fc <__smakebuf_r+0x74>
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f023 0303 	bic.w	r3, r3, #3
 80081f6:	f043 0301 	orr.w	r3, r3, #1
 80081fa:	81a3      	strh	r3, [r4, #12]
 80081fc:	89a0      	ldrh	r0, [r4, #12]
 80081fe:	4305      	orrs	r5, r0
 8008200:	81a5      	strh	r5, [r4, #12]
 8008202:	e7cd      	b.n	80081a0 <__smakebuf_r+0x18>
 8008204:	08007f95 	.word	0x08007f95

08008208 <_malloc_usable_size_r>:
 8008208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800820c:	1f18      	subs	r0, r3, #4
 800820e:	2b00      	cmp	r3, #0
 8008210:	bfbc      	itt	lt
 8008212:	580b      	ldrlt	r3, [r1, r0]
 8008214:	18c0      	addlt	r0, r0, r3
 8008216:	4770      	bx	lr

08008218 <_raise_r>:
 8008218:	291f      	cmp	r1, #31
 800821a:	b538      	push	{r3, r4, r5, lr}
 800821c:	4604      	mov	r4, r0
 800821e:	460d      	mov	r5, r1
 8008220:	d904      	bls.n	800822c <_raise_r+0x14>
 8008222:	2316      	movs	r3, #22
 8008224:	6003      	str	r3, [r0, #0]
 8008226:	f04f 30ff 	mov.w	r0, #4294967295
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800822e:	b112      	cbz	r2, 8008236 <_raise_r+0x1e>
 8008230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008234:	b94b      	cbnz	r3, 800824a <_raise_r+0x32>
 8008236:	4620      	mov	r0, r4
 8008238:	f000 f830 	bl	800829c <_getpid_r>
 800823c:	462a      	mov	r2, r5
 800823e:	4601      	mov	r1, r0
 8008240:	4620      	mov	r0, r4
 8008242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008246:	f000 b817 	b.w	8008278 <_kill_r>
 800824a:	2b01      	cmp	r3, #1
 800824c:	d00a      	beq.n	8008264 <_raise_r+0x4c>
 800824e:	1c59      	adds	r1, r3, #1
 8008250:	d103      	bne.n	800825a <_raise_r+0x42>
 8008252:	2316      	movs	r3, #22
 8008254:	6003      	str	r3, [r0, #0]
 8008256:	2001      	movs	r0, #1
 8008258:	e7e7      	b.n	800822a <_raise_r+0x12>
 800825a:	2400      	movs	r4, #0
 800825c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008260:	4628      	mov	r0, r5
 8008262:	4798      	blx	r3
 8008264:	2000      	movs	r0, #0
 8008266:	e7e0      	b.n	800822a <_raise_r+0x12>

08008268 <raise>:
 8008268:	4b02      	ldr	r3, [pc, #8]	; (8008274 <raise+0xc>)
 800826a:	4601      	mov	r1, r0
 800826c:	6818      	ldr	r0, [r3, #0]
 800826e:	f7ff bfd3 	b.w	8008218 <_raise_r>
 8008272:	bf00      	nop
 8008274:	2000000c 	.word	0x2000000c

08008278 <_kill_r>:
 8008278:	b538      	push	{r3, r4, r5, lr}
 800827a:	4d07      	ldr	r5, [pc, #28]	; (8008298 <_kill_r+0x20>)
 800827c:	2300      	movs	r3, #0
 800827e:	4604      	mov	r4, r0
 8008280:	4608      	mov	r0, r1
 8008282:	4611      	mov	r1, r2
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	f7f9 ffdd 	bl	8002244 <_kill>
 800828a:	1c43      	adds	r3, r0, #1
 800828c:	d102      	bne.n	8008294 <_kill_r+0x1c>
 800828e:	682b      	ldr	r3, [r5, #0]
 8008290:	b103      	cbz	r3, 8008294 <_kill_r+0x1c>
 8008292:	6023      	str	r3, [r4, #0]
 8008294:	bd38      	pop	{r3, r4, r5, pc}
 8008296:	bf00      	nop
 8008298:	200003f4 	.word	0x200003f4

0800829c <_getpid_r>:
 800829c:	f7f9 bfca 	b.w	8002234 <_getpid>

080082a0 <__sread>:
 80082a0:	b510      	push	{r4, lr}
 80082a2:	460c      	mov	r4, r1
 80082a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a8:	f000 f894 	bl	80083d4 <_read_r>
 80082ac:	2800      	cmp	r0, #0
 80082ae:	bfab      	itete	ge
 80082b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082b2:	89a3      	ldrhlt	r3, [r4, #12]
 80082b4:	181b      	addge	r3, r3, r0
 80082b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082ba:	bfac      	ite	ge
 80082bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80082be:	81a3      	strhlt	r3, [r4, #12]
 80082c0:	bd10      	pop	{r4, pc}

080082c2 <__swrite>:
 80082c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082c6:	461f      	mov	r7, r3
 80082c8:	898b      	ldrh	r3, [r1, #12]
 80082ca:	05db      	lsls	r3, r3, #23
 80082cc:	4605      	mov	r5, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	4616      	mov	r6, r2
 80082d2:	d505      	bpl.n	80082e0 <__swrite+0x1e>
 80082d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d8:	2302      	movs	r3, #2
 80082da:	2200      	movs	r2, #0
 80082dc:	f000 f868 	bl	80083b0 <_lseek_r>
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	4632      	mov	r2, r6
 80082ee:	463b      	mov	r3, r7
 80082f0:	4628      	mov	r0, r5
 80082f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082f6:	f000 b817 	b.w	8008328 <_write_r>

080082fa <__sseek>:
 80082fa:	b510      	push	{r4, lr}
 80082fc:	460c      	mov	r4, r1
 80082fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008302:	f000 f855 	bl	80083b0 <_lseek_r>
 8008306:	1c43      	adds	r3, r0, #1
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	bf15      	itete	ne
 800830c:	6560      	strne	r0, [r4, #84]	; 0x54
 800830e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008312:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008316:	81a3      	strheq	r3, [r4, #12]
 8008318:	bf18      	it	ne
 800831a:	81a3      	strhne	r3, [r4, #12]
 800831c:	bd10      	pop	{r4, pc}

0800831e <__sclose>:
 800831e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008322:	f000 b813 	b.w	800834c <_close_r>
	...

08008328 <_write_r>:
 8008328:	b538      	push	{r3, r4, r5, lr}
 800832a:	4d07      	ldr	r5, [pc, #28]	; (8008348 <_write_r+0x20>)
 800832c:	4604      	mov	r4, r0
 800832e:	4608      	mov	r0, r1
 8008330:	4611      	mov	r1, r2
 8008332:	2200      	movs	r2, #0
 8008334:	602a      	str	r2, [r5, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	f7f9 ffbb 	bl	80022b2 <_write>
 800833c:	1c43      	adds	r3, r0, #1
 800833e:	d102      	bne.n	8008346 <_write_r+0x1e>
 8008340:	682b      	ldr	r3, [r5, #0]
 8008342:	b103      	cbz	r3, 8008346 <_write_r+0x1e>
 8008344:	6023      	str	r3, [r4, #0]
 8008346:	bd38      	pop	{r3, r4, r5, pc}
 8008348:	200003f4 	.word	0x200003f4

0800834c <_close_r>:
 800834c:	b538      	push	{r3, r4, r5, lr}
 800834e:	4d06      	ldr	r5, [pc, #24]	; (8008368 <_close_r+0x1c>)
 8008350:	2300      	movs	r3, #0
 8008352:	4604      	mov	r4, r0
 8008354:	4608      	mov	r0, r1
 8008356:	602b      	str	r3, [r5, #0]
 8008358:	f7f9 ffc7 	bl	80022ea <_close>
 800835c:	1c43      	adds	r3, r0, #1
 800835e:	d102      	bne.n	8008366 <_close_r+0x1a>
 8008360:	682b      	ldr	r3, [r5, #0]
 8008362:	b103      	cbz	r3, 8008366 <_close_r+0x1a>
 8008364:	6023      	str	r3, [r4, #0]
 8008366:	bd38      	pop	{r3, r4, r5, pc}
 8008368:	200003f4 	.word	0x200003f4

0800836c <_fstat_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4d07      	ldr	r5, [pc, #28]	; (800838c <_fstat_r+0x20>)
 8008370:	2300      	movs	r3, #0
 8008372:	4604      	mov	r4, r0
 8008374:	4608      	mov	r0, r1
 8008376:	4611      	mov	r1, r2
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	f7f9 ffc2 	bl	8002302 <_fstat>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	d102      	bne.n	8008388 <_fstat_r+0x1c>
 8008382:	682b      	ldr	r3, [r5, #0]
 8008384:	b103      	cbz	r3, 8008388 <_fstat_r+0x1c>
 8008386:	6023      	str	r3, [r4, #0]
 8008388:	bd38      	pop	{r3, r4, r5, pc}
 800838a:	bf00      	nop
 800838c:	200003f4 	.word	0x200003f4

08008390 <_isatty_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d06      	ldr	r5, [pc, #24]	; (80083ac <_isatty_r+0x1c>)
 8008394:	2300      	movs	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	f7f9 ffc1 	bl	8002322 <_isatty>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_isatty_r+0x1a>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_isatty_r+0x1a>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	200003f4 	.word	0x200003f4

080083b0 <_lseek_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4d07      	ldr	r5, [pc, #28]	; (80083d0 <_lseek_r+0x20>)
 80083b4:	4604      	mov	r4, r0
 80083b6:	4608      	mov	r0, r1
 80083b8:	4611      	mov	r1, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	602a      	str	r2, [r5, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	f7f9 ffba 	bl	8002338 <_lseek>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_lseek_r+0x1e>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_lseek_r+0x1e>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	200003f4 	.word	0x200003f4

080083d4 <_read_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d07      	ldr	r5, [pc, #28]	; (80083f4 <_read_r+0x20>)
 80083d8:	4604      	mov	r4, r0
 80083da:	4608      	mov	r0, r1
 80083dc:	4611      	mov	r1, r2
 80083de:	2200      	movs	r2, #0
 80083e0:	602a      	str	r2, [r5, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	f7f9 ff48 	bl	8002278 <_read>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_read_r+0x1e>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_read_r+0x1e>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	200003f4 	.word	0x200003f4

080083f8 <_init>:
 80083f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fa:	bf00      	nop
 80083fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fe:	bc08      	pop	{r3}
 8008400:	469e      	mov	lr, r3
 8008402:	4770      	bx	lr

08008404 <_fini>:
 8008404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008406:	bf00      	nop
 8008408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800840a:	bc08      	pop	{r3}
 800840c:	469e      	mov	lr, r3
 800840e:	4770      	bx	lr
